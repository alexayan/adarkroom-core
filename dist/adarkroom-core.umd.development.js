(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global['adarkroom-core'] = {}));
}(this, (function (exports) { 'use strict';

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;

    _setPrototypeOf(subClass, superClass);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
      return this;
    });

    define(Gp, "toString", function() {
      return "[object Generator]";
    });

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  });

  function translate(text) {
    return text;
  }

  var _Perks;

  (function (StoreCategory) {
    StoreCategory["wood"] = "wood";
    StoreCategory["fur"] = "fur";
    StoreCategory["meat"] = "meat";
    StoreCategory["iron"] = "iron";
    StoreCategory["coal"] = "coal";
    StoreCategory["sulphur"] = "sulphur";
    StoreCategory["steel"] = "steel";
    StoreCategory["cured_meat"] = "cured_meat";
    StoreCategory["scales"] = "scales";
    StoreCategory["teeth"] = "teeth";
    StoreCategory["leather"] = "leather";
    StoreCategory["bait"] = "bait";
    StoreCategory["torch"] = "torch";
    StoreCategory["cloth"] = "cloth";
    StoreCategory["bone_spear"] = "bone_spear";
    StoreCategory["iron_sword"] = "iron_sword";
    StoreCategory["steel_sword"] = "steel_sword";
    StoreCategory["bayonet"] = "bayonet";
    StoreCategory["rifle"] = "rifle";
    StoreCategory["laser_rifle"] = "laser_rifle";
    StoreCategory["bullets"] = "bullets";
    StoreCategory["energy_cell"] = "energy_cell";
    StoreCategory["grenade"] = "grenade";
    StoreCategory["bolas"] = "bolas";
    StoreCategory["medicine"] = "medicine";
    StoreCategory["compass"] = "compass";
    StoreCategory["charm"] = "charm";
    StoreCategory["alien_alloy"] = "alien_alloy";
    StoreCategory["waterskin"] = "waterskin";
    StoreCategory["cask"] = "cask";
    StoreCategory["water_tank"] = "water_tank";
    StoreCategory["rucksack"] = "rucksack";
    StoreCategory["wagon"] = "wagon";
    StoreCategory["convoy"] = "convoy";
    StoreCategory["l_armou"] = "l_armou";
    StoreCategory["i_armour"] = "i_armour";
    StoreCategory["s_armour"] = "s_armour";
    StoreCategory["trap"] = "trap";
    StoreCategory["cart"] = "cart";
    StoreCategory["hut"] = "hut";
    StoreCategory["lodge"] = "lodge";
    StoreCategory["trading_post"] = "trading_post";
    StoreCategory["tannery"] = "tannery";
    StoreCategory["smokehouse"] = "smokehouse";
    StoreCategory["workshop"] = "workshop";
    StoreCategory["steelworks"] = "steelworks";
    StoreCategory["armoury"] = "armoury";
  })(exports.StoreCategory || (exports.StoreCategory = {}));

  (function (GameSpace) {
    GameSpace["Room"] = "Room";
    GameSpace["Path"] = "Path";
    GameSpace["Outside"] = "Outside";
    GameSpace["World"] = "World";
    GameSpace["Ship"] = "Ship";
    GameSpace["Space"] = "Space";
  })(exports.GameSpace || (exports.GameSpace = {}));

  (function (PerkCategory) {
    PerkCategory["boxer"] = "boxer";
    PerkCategory["martial_artist"] = "martial_artist";
    PerkCategory["unarmed_master"] = "unarmed_master";
    PerkCategory["barbarian"] = "barbarian";
    PerkCategory["slow_metabolism"] = "slow_metabolism";
    PerkCategory["desert_rat"] = "desert_rat";
    PerkCategory["evasive"] = "evasive";
    PerkCategory["precise"] = "precise";
    PerkCategory["scout"] = "scout";
    PerkCategory["stealthy"] = "stealthy";
    PerkCategory["gastronome"] = "gastronome";
  })(exports.PerkCategory || (exports.PerkCategory = {}));

  var Perks = (_Perks = {}, _Perks[exports.PerkCategory.boxer] = {
    name: /*#__PURE__*/translate('boxer'),
    desc: /*#__PURE__*/translate('punches do more damage'),
    notify: /*#__PURE__*/translate('learned to throw punches with purpose')
  }, _Perks[exports.PerkCategory.martial_artist] = {
    name: /*#__PURE__*/translate('martial artist'),
    desc: /*#__PURE__*/translate('punches do even more damage.'),
    notify: /*#__PURE__*/translate('learned to fight quite effectively without weapons')
  }, _Perks[exports.PerkCategory.unarmed_master] = {
    /// TRANSLATORS : master of unarmed combat
    name: /*#__PURE__*/translate('unarmed master'),
    desc: /*#__PURE__*/translate('punch twice as fast, and with even more force'),
    notify: /*#__PURE__*/translate('learned to strike faster without weapons')
  }, _Perks[exports.PerkCategory.barbarian] = {
    name: /*#__PURE__*/translate('barbarian'),
    desc: /*#__PURE__*/translate('melee weapons deal more damage'),
    notify: /*#__PURE__*/translate('learned to swing weapons with force')
  }, _Perks[exports.PerkCategory.slow_metabolism] = {
    name: /*#__PURE__*/translate('slow metabolism'),
    desc: /*#__PURE__*/translate('go twice as far without eating'),
    notify: /*#__PURE__*/translate('learned how to ignore the hunger')
  }, _Perks[exports.PerkCategory.desert_rat] = {
    name: /*#__PURE__*/translate('desert rat'),
    desc: /*#__PURE__*/translate('go twice as far without drinking'),
    notify: /*#__PURE__*/translate('learned to love the dry air')
  }, _Perks[exports.PerkCategory.evasive] = {
    name: /*#__PURE__*/translate('evasive'),
    desc: /*#__PURE__*/translate('dodge attacks more effectively'),
    notify: /*#__PURE__*/translate("learned to be where they're not")
  }, _Perks[exports.PerkCategory.precise] = {
    name: /*#__PURE__*/translate('precise'),
    desc: /*#__PURE__*/translate('land blows more often'),
    notify: /*#__PURE__*/translate('learned to predict their movement')
  }, _Perks[exports.PerkCategory.scout] = {
    name: /*#__PURE__*/translate('scout'),
    desc: /*#__PURE__*/translate('see farther'),
    notify: /*#__PURE__*/translate('learned to look ahead')
  }, _Perks[exports.PerkCategory.stealthy] = {
    name: /*#__PURE__*/translate('stealthy'),
    desc: /*#__PURE__*/translate('better avoid conflict in the wild'),
    notify: /*#__PURE__*/translate('learned how not to be seen')
  }, _Perks[exports.PerkCategory.gastronome] = {
    name: /*#__PURE__*/translate('gastronome'),
    desc: /*#__PURE__*/translate('restore more health when eating'),
    notify: /*#__PURE__*/translate('learned to make the most of food')
  }, _Perks);

  (function (Building) {
    Building["trap"] = "trap";
    Building["cart"] = "cart";
    Building["hut"] = "hut";
    Building["lodge"] = "lodge";
    Building["trading_post"] = "trading_post";
    Building["tannery"] = "tannery";
    Building["smokehouse"] = "smokehouse";
    Building["workshop"] = "workshop";
    Building["steelworks"] = "steelworks";
    Building["armoury"] = "armoury";
    Building["sulphur_mine"] = "sulphur_mine";
    Building["iron_mine"] = "iron_mine";
    Building["coal_mine"] = "coal_mine";
  })(exports.Building || (exports.Building = {}));

  (function (Craftable) {
    Craftable["trap"] = "trap";
    Craftable["cart"] = "cart";
    Craftable["hut"] = "hut";
    Craftable["lodge"] = "lodge";
    Craftable["trading_post"] = "trading_post";
    Craftable["tannery"] = "tannery";
    Craftable["smokehouse"] = "smokehouse";
    Craftable["workshop"] = "workshop";
    Craftable["steelworks"] = "steelworks";
    Craftable["armoury"] = "armoury";
    Craftable["torch"] = "torch";
    Craftable["waterskin"] = "waterskin";
    Craftable["cask"] = "cask";
    Craftable["water_tank"] = "water_tank";
    Craftable["bone_spear"] = "bone_spear";
    Craftable["rucksack"] = "rucksack";
    Craftable["wagon"] = "wagon";
    Craftable["convoy"] = "convoy";
    Craftable["l_armou"] = "l_armou";
    Craftable["i_armour"] = "i_armour";
    Craftable["s_armour"] = "s_armour";
    Craftable["iron_sword"] = "iron_sword";
    Craftable["steel_sword"] = "steel_sword";
    Craftable["rifle"] = "rifle";
  })(exports.Craftable || (exports.Craftable = {}));

  var NonCraftable;

  (function (NonCraftable) {
    NonCraftable["medicine"] = "medicine";
    NonCraftable["charm"] = "charm";
    NonCraftable["bayonet"] = "bayonet";
    NonCraftable["bolas"] = "bolas";
    NonCraftable["grenade"] = "grenade";
    NonCraftable["bullets"] = "bullets";
    NonCraftable["cured_meat"] = "cured_meat";
    NonCraftable["laser_rifle"] = "laser_rifle";
    NonCraftable["energy_cell"] = "energy_cell";
  })(NonCraftable || (NonCraftable = {}));

  (function (WorkerType) {
    WorkerType["sulphur_miner"] = "sulphur_miner";
    WorkerType["hunter"] = "hunter";
    WorkerType["trapper"] = "trapper";
    WorkerType["charcutier"] = "charcutier";
    WorkerType["iron_miner"] = "iron_miner";
    WorkerType["coal_miner"] = "coal_miner";
    WorkerType["armourer"] = "armourer";
    WorkerType["tanner"] = "tanner";
    WorkerType["steelworker"] = "steelworker";
  })(exports.WorkerType || (exports.WorkerType = {}));

  var incomes = {
    gatherer: {
      name: /*#__PURE__*/translate('gatherer'),
      delay: 10,
      stores: {
        wood: 1
      }
    },
    hunter: {
      name: /*#__PURE__*/translate('hunter'),
      delay: 10,
      stores: {
        fur: 0.5,
        meat: 0.5
      }
    },
    trapper: {
      name: /*#__PURE__*/translate('trapper'),
      delay: 10,
      stores: {
        meat: -1,
        bait: 1
      }
    },
    tanner: {
      name: /*#__PURE__*/translate('tanner'),
      delay: 10,
      stores: {
        fur: -5,
        leather: 1
      }
    },
    charcutier: {
      name: /*#__PURE__*/translate('charcutier'),
      delay: 10,
      stores: {
        meat: -5,
        wood: -5,
        cured_meat: 1
      }
    },
    iron_miner: {
      name: /*#__PURE__*/translate('iron miner'),
      delay: 10,
      stores: {
        cured_meat: -1,
        iron: 1
      }
    },
    coal_miner: {
      name: /*#__PURE__*/translate('coal miner'),
      delay: 10,
      stores: {
        cured_meat: -1,
        coal: 1
      }
    },
    sulphur_miner: {
      name: /*#__PURE__*/translate('sulphur miner'),
      delay: 10,
      stores: {
        cured_meat: -1,
        sulphur: 1
      }
    },
    steelworker: {
      name: /*#__PURE__*/translate('steelworker'),
      delay: 10,
      stores: {
        iron: -1,
        coal: -1,
        steel: 1
      }
    },
    armourer: {
      name: /*#__PURE__*/translate('armourer'),
      delay: 10,
      stores: {
        steel: -1,
        sulphur: -1,
        bullets: 1
      }
    }
  };

  function n(n){for(var t=arguments.length,r=Array(t>1?t-1:0),e=1;e<t;e++)r[e-1]=arguments[e];{var i=Y[n],o=i?"function"==typeof i?i.apply(null,r):i:"unknown error nr: "+n;throw Error("[Immer] "+o)}}function t(n){return !!n&&!!n[Q]}function r(n){return !!n&&(function(n){if(!n||"object"!=typeof n)return !1;var t=Object.getPrototypeOf(n);if(null===t)return !0;var r=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===Z}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s(n)||v(n))}function i(n,t,r){void 0===r&&(r=!1),0===o(n)?(r?Object.keys:nn)(n).forEach((function(e){r&&"symbol"==typeof e||t(e,n[e],n);})):n.forEach((function(r,e){return t(e,r,n)}));}function o(n){var t=n[Q];return t?t.i>3?t.i-4:t.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,t){return 2===o(n)?n.has(t):Object.prototype.hasOwnProperty.call(n,t)}function a(n,t){return 2===o(n)?n.get(t):n[t]}function f(n,t,r){var e=o(n);2===e?n.set(t,r):3===e?(n.delete(t),n.add(r)):n[t]=r;}function c(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var t=tn(n);delete t[Q];for(var r=nn(t),e=0;e<r.length;e++){var i=r[e],o=t[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]});}return Object.create(Object.getPrototypeOf(n),t)}function d(n,e){return void 0===e&&(e=!1),y(n)||t(n)||!r(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,t){return d(t,!0)}),!0),n)}function h(){n(2);}function y(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b(t){var r=rn[t];return r||n(18,t),r}function m(n,t){rn[n]||(rn[n]=t);}function _(){return U||n(0),U}function j(n,t){t&&(b("Patches"),n.u=[],n.s=[],n.v=t);}function O(n){g(n),n.p.forEach(S),n.p=null;}function g(n){n===U&&(U=n.l);}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var t=n[Q];0===t.i||1===t.i?t.j():t.O=!0;}function P(t,e){e._=e.p.length;var i=e.p[0],o=void 0!==t&&t!==i;return e.h.g||b("ES5").S(e,t,o),o?(i[Q].P&&(O(e),n(4)),r(t)&&(t=M(e,t),e.l||x(e,t)),e.u&&b("Patches").M(i[Q],t,e.u,e.s)):t=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),t!==H?t:void 0}function M(n,t,r){if(y(t))return t;var e=t[Q];if(!e)return i(t,(function(i,o){return A(n,e,t,i,o,r)}),!0),t;if(e.A!==n)return t;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o;i(3===e.i?new Set(o):o,(function(t,i){return A(n,e,o,t,i,r)})),x(n,o,!1),r&&n.u&&b("Patches").R(e,r,n.u,n.s);}return e.o}function A(e,i,o,a,c,s){if(c===o&&n(5),t(c)){var v=M(e,c,s&&i&&3!==i.i&&!u(i.D,a)?s.concat(a):void 0);if(f(o,a,v),!t(v))return;e.m=!1;}if(r(c)&&!y(c)){if(!e.h.F&&e._<1)return;M(e,c),i&&i.A.l||x(e,c);}}function x(n,t,r){void 0===r&&(r=!1),n.h.F&&n.m&&d(t,r);}function z(n,t){var r=n[Q];return (r?p(r):n)[t]}function I(n,t){if(t in n)for(var r=Object.getPrototypeOf(n);r;){var e=Object.getOwnPropertyDescriptor(r,t);if(e)return e;r=Object.getPrototypeOf(r);}}function k(n){n.P||(n.P=!0,n.l&&k(n.l));}function E(n){n.o||(n.o=l(n.t));}function R(n,t,r){var e=s(t)?b("MapSet").N(t,r):v(t)?b("MapSet").T(t,r):n.g?function(n,t){var r=Array.isArray(n),e={i:r?1:0,A:t?t.A:_(),P:!1,I:!1,D:{},l:t,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;r&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(t,r):b("ES5").J(t,r);return (r?r.A:_()).p.push(e),e}function D(e){return t(e)||n(22,e),function n(t){if(!r(t))return t;var e,u=t[Q],c=o(t);if(u){if(!u.P&&(u.i<4||!b("ES5").K(u)))return u.t;u.I=!0,e=F(t,c),u.I=!1;}else e=F(t,c);return i(e,(function(t,r){u&&a(u.t,t)===r||f(e,t,n(r));})),3===c?new Set(e):e}(e)}function F(n,t){switch(t){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function N(){function r(n,t){var r=s[n];return r?r.enumerable=t:s[n]=r={configurable:!0,enumerable:t,get:function(){var t=this[Q];return f(t),en.get(t,n)},set:function(t){var r=this[Q];f(r),en.set(r,n,t);}},r}function e(n){for(var t=n.length-1;t>=0;t--){var r=n[t][Q];if(!r.P)switch(r.i){case 5:a(r)&&k(r);break;case 4:o(r)&&k(r);}}}function o(n){for(var t=n.t,r=n.k,e=nn(r),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=t[o];if(void 0===a&&!u(t,o))return !0;var f=r[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return !0}}var v=!!t[Q];return e.length!==nn(t).length+(v?0:1)}function a(n){var t=n.k;if(t.length!==n.t.length)return !0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);return !(!r||r.get)}function f(t){t.O&&n(3,JSON.stringify(p(t)));}var s={};m("ES5",{J:function(n,t){var e=Array.isArray(n),i=function(n,t){if(n){for(var e=Array(t.length),i=0;i<t.length;i++)Object.defineProperty(e,""+i,r(i,!0));return e}var o=tn(t);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=r(f,n||!!o[f].enumerable);}return Object.create(Object.getPrototypeOf(t),o)}(e,n),o={i:e?5:4,A:t?t.A:_(),P:!1,I:!1,D:{},l:t,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,r,o){o?t(r)&&r[Q].A===n&&e(n.p):(n.u&&function n(t){if(t&&"object"==typeof t){var r=t[Q];if(r){var e=r.t,o=r.k,f=r.D,c=r.i;if(4===c)i(o,(function(t){t!==Q&&(void 0!==e[t]||u(e,t)?f[t]||n(o[t]):(f[t]=!0,k(r)));})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(r));}));else if(5===c){if(a(r)&&(k(r),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)void 0===f[l]&&n(o[l]);}}}}(n.p[0]),e(n.p));},K:function(n){return 4===n.i?o(n):a(n)}});}var G,U,W="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W?Symbol.for("immer-state"):"__$immer_state",Y={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(n){return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+n},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(n){return "Cannot apply patch, path doesn't resolve: "+n},16:'Sets cannot have "replace" patches.',17:function(n){return "Unsupported patch operation: "+n},18:function(n){return "The plugin for '"+n+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+n+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(n){return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+n+"'"},22:function(n){return "'current' expects a draft, got: "+n},23:function(n){return "'original' expects a draft, got: "+n},24:"Patching reserved attributes like __proto__, prototype and constructor is not allowed"},Z=""+Object.prototype.constructor,nn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,tn=Object.getOwnPropertyDescriptors||function(n){var t={};return nn(n).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(n,r);})),t},rn={},en={get:function(n,t){if(t===Q)return n;var e=p(n);if(!u(e,t))return function(n,t,r){var e,i=I(t,r);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,t);var i=e[t];return n.I||!r(i)?i:i===z(n.t,t)?(E(n),n.o[t]=R(n.A.h,i,n)):i},has:function(n,t){return t in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,t,r){var e=I(p(n),t);if(null==e?void 0:e.set)return e.set.call(n.k,r),!0;if(!n.P){var i=z(p(n),t),o=null==i?void 0:i[Q];if(o&&o.t===r)return n.o[t]=r,n.D[t]=!1,!0;if(c(r,i)&&(void 0!==r||u(n.t,t)))return !0;E(n),k(n);}return n.o[t]===r&&"number"!=typeof r&&(void 0!==r||t in n.o)||(n.o[t]=r,n.D[t]=!0,!0)},deleteProperty:function(n,t){return void 0!==z(n.t,t)||t in n.t?(n.D[t]=!1,E(n),k(n)):delete n.D[t],n.o&&delete n.o[t],!0},getOwnPropertyDescriptor:function(n,t){var r=p(n),e=Reflect.getOwnPropertyDescriptor(r,t);return e?{writable:!0,configurable:1!==n.i||"length"!==t,enumerable:e.enumerable,value:r[t]}:e},defineProperty:function(){n(11);},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12);}},on={};i(en,(function(n,t){on[n]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)};})),on.deleteProperty=function(t,r){return isNaN(parseInt(r))&&n(13),en.deleteProperty.call(this,t[0],r)},on.set=function(t,r,e){return "length"!==r&&isNaN(parseInt(r))&&n(14),en.set.call(this,t[0],r,e,t[0])};var un=function(){function e(t){var e=this;this.g=B,this.F=!0,this.produce=function(t,i,o){if("function"==typeof t&&"function"!=typeof i){var u=i;i=t;var a=e;return function(n){var t=this;void 0===n&&(n=u);for(var r=arguments.length,e=Array(r>1?r-1:0),o=1;o<r;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var r;return (r=i).call.apply(r,[t,n].concat(e))}))}}var f;if("function"!=typeof i&&n(6),void 0!==o&&"function"!=typeof o&&n(7),r(t)){var c=w(e),s=R(e,t,void 0),v=!0;try{f=i(s),v=!1;}finally{v?O(c):g(c);}return "undefined"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!t||"object"!=typeof t){if((f=i(t))===H)return;return void 0===f&&(f=t),e.F&&d(f,!0),f}n(21,t);},this.produceWithPatches=function(n,t){return "function"==typeof n?function(t){for(var r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];return e.produceWithPatches(t,(function(t){return n.apply(void 0,[t].concat(i))}))}:[e.produce(n,t,(function(n,t){r=n,i=t;})),r,i];var r,i;},"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze);}var i=e.prototype;return i.createDraft=function(e){r(e)||n(8),t(e)&&(e=D(e));var i=w(this),o=R(this,e,void 0);return o[Q].C=!0,g(i),o},i.finishDraft=function(t,r){var e=t&&t[Q];(e&&e.C||n(9),e.I&&n(10));var i=e.A;return j(i,r),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n;},i.setUseProxies=function(t){t&&!B&&n(20),this.g=t;},i.applyPatches=function(n,r){var e;for(e=r.length-1;e>=0;e--){var i=r[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}e>-1&&(r=r.slice(e+1));var o=b("Patches").$;return t(n)?o(n,r):this.produce(n,(function(n){return o(n,r)}))},e}(),an=new un,fn=an.produce,cn=an.produceWithPatches.bind(an),sn=an.setAutoFreeze.bind(an),vn=an.setUseProxies.bind(an),pn=an.applyPatches.bind(an),ln=an.createDraft.bind(an),dn=an.finishDraft.bind(an);//# sourceMappingURL=immer.esm.js.map

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  // Inlined version of the `symbol-observable` polyfill
  var $$observable = (function () {
    return typeof Symbol === 'function' && Symbol.observable || '@@observable';
  })();

  /**
   * These are private action types reserved by Redux.
   * For any unknown actions, you must return the current state.
   * If the current state is undefined, you must return the initial state.
   * Do not reference these action types directly in your code.
   */
  var randomString = function randomString() {
    return Math.random().toString(36).substring(7).split('').join('.');
  };

  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };

  /**
   * @param {any} obj The object to inspect.
   * @returns {boolean} True if the argument appears to be a plain object.
   */
  function isPlainObject(obj) {
    if (typeof obj !== 'object' || obj === null) return false;
    var proto = obj;

    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(obj) === proto;
  }

  // Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
  function miniKindOf(val) {
    if (val === void 0) return 'undefined';
    if (val === null) return 'null';
    var type = typeof val;

    switch (type) {
      case 'boolean':
      case 'string':
      case 'number':
      case 'symbol':
      case 'function':
        {
          return type;
        }
    }

    if (Array.isArray(val)) return 'array';
    if (isDate(val)) return 'date';
    if (isError(val)) return 'error';
    var constructorName = ctorName(val);

    switch (constructorName) {
      case 'Symbol':
      case 'Promise':
      case 'WeakMap':
      case 'WeakSet':
      case 'Map':
      case 'Set':
        return constructorName;
    } // other


    return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
  }

  function ctorName(val) {
    return typeof val.constructor === 'function' ? val.constructor.name : null;
  }

  function isError(val) {
    return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
  }

  function isDate(val) {
    if (val instanceof Date) return true;
    return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
  }

  function kindOf(val) {
    var typeOfVal = typeof val;

    {
      typeOfVal = miniKindOf(val);
    }

    return typeOfVal;
  }

  /**
   * Creates a Redux store that holds the state tree.
   * The only way to change the data in the store is to call `dispatch()` on it.
   *
   * There should only be a single store in your app. To specify how different
   * parts of the state tree respond to actions, you may combine several reducers
   * into a single reducer function by using `combineReducers`.
   *
   * @param {Function} reducer A function that returns the next state tree, given
   * the current state tree and the action to handle.
   *
   * @param {any} [preloadedState] The initial state. You may optionally specify it
   * to hydrate the state from the server in universal apps, or to restore a
   * previously serialized user session.
   * If you use `combineReducers` to produce the root reducer function, this must be
   * an object with the same shape as `combineReducers` keys.
   *
   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
   * to enhance the store with third-party capabilities such as middleware,
   * time travel, persistence, etc. The only store enhancer that ships with Redux
   * is `applyMiddleware()`.
   *
   * @returns {Store} A Redux store that lets you read the state, dispatch actions
   * and subscribe to changes.
   */

  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;

    if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
      throw new Error( 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');
    }

    if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
      enhancer = preloadedState;
      preloadedState = undefined;
    }

    if (typeof enhancer !== 'undefined') {
      if (typeof enhancer !== 'function') {
        throw new Error( "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
      }

      return enhancer(createStore)(reducer, preloadedState);
    }

    if (typeof reducer !== 'function') {
      throw new Error( "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
    }

    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    /**
     * This makes a shallow copy of currentListeners so we can use
     * nextListeners as a temporary list while dispatching.
     *
     * This prevents any bugs around consumers calling
     * subscribe/unsubscribe in the middle of a dispatch.
     */

    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    /**
     * Reads the state tree managed by the store.
     *
     * @returns {any} The current state tree of your application.
     */


    function getState() {
      if (isDispatching) {
        throw new Error( 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
      }

      return currentState;
    }
    /**
     * Adds a change listener. It will be called any time an action is dispatched,
     * and some part of the state tree may potentially have changed. You may then
     * call `getState()` to read the current state tree inside the callback.
     *
     * You may call `dispatch()` from a change listener, with the following
     * caveats:
     *
     * 1. The subscriptions are snapshotted just before every `dispatch()` call.
     * If you subscribe or unsubscribe while the listeners are being invoked, this
     * will not have any effect on the `dispatch()` that is currently in progress.
     * However, the next `dispatch()` call, whether nested or not, will use a more
     * recent snapshot of the subscription list.
     *
     * 2. The listener should not expect to see all state changes, as the state
     * might have been updated multiple times during a nested `dispatch()` before
     * the listener is called. It is, however, guaranteed that all subscribers
     * registered before the `dispatch()` started will be called with the latest
     * state by the time it exits.
     *
     * @param {Function} listener A callback to be invoked on every dispatch.
     * @returns {Function} A function to remove this change listener.
     */


    function subscribe(listener) {
      if (typeof listener !== 'function') {
        throw new Error( "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
      }

      if (isDispatching) {
        throw new Error( 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
      }

      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }

        if (isDispatching) {
          throw new Error( 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
        }

        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
        currentListeners = null;
      };
    }
    /**
     * Dispatches an action. It is the only way to trigger a state change.
     *
     * The `reducer` function, used to create the store, will be called with the
     * current state tree and the given `action`. Its return value will
     * be considered the **next** state of the tree, and the change listeners
     * will be notified.
     *
     * The base implementation only supports plain object actions. If you want to
     * dispatch a Promise, an Observable, a thunk, or something else, you need to
     * wrap your store creating function into the corresponding middleware. For
     * example, see the documentation for the `redux-thunk` package. Even the
     * middleware will eventually dispatch plain object actions using this method.
     *
     * @param {Object} action A plain object representing “what changed”. It is
     * a good idea to keep actions serializable so you can record and replay user
     * sessions, or use the time travelling `redux-devtools`. An action must have
     * a `type` property which may not be `undefined`. It is a good idea to use
     * string constants for action types.
     *
     * @returns {Object} For convenience, the same action object you dispatched.
     *
     * Note that, if you use a custom middleware, it may wrap `dispatch()` to
     * return something else (for example, a Promise you can await).
     */


    function dispatch(action) {
      if (!isPlainObject(action)) {
        throw new Error( "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
      }

      if (typeof action.type === 'undefined') {
        throw new Error( 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }

      if (isDispatching) {
        throw new Error( 'Reducers may not dispatch actions.');
      }

      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }

      var listeners = currentListeners = nextListeners;

      for (var i = 0; i < listeners.length; i++) {
        var listener = listeners[i];
        listener();
      }

      return action;
    }
    /**
     * Replaces the reducer currently used by the store to calculate the state.
     *
     * You might need this if your app implements code splitting and you want to
     * load some of the reducers dynamically. You might also need this if you
     * implement a hot reloading mechanism for Redux.
     *
     * @param {Function} nextReducer The reducer for the store to use instead.
     * @returns {void}
     */


    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== 'function') {
        throw new Error( "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
      }

      currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
      // Any reducers that existed in both the new and old rootReducer
      // will receive the previous state. This effectively populates
      // the new state tree with any relevant data from the old one.

      dispatch({
        type: ActionTypes.REPLACE
      });
    }
    /**
     * Interoperability point for observable/reactive libraries.
     * @returns {observable} A minimal observable of state changes.
     * For more information, see the observable proposal:
     * https://github.com/tc39/proposal-observable
     */


    function observable() {
      var _ref;

      var outerSubscribe = subscribe;
      return _ref = {
        /**
         * The minimal observable subscription method.
         * @param {Object} observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns {subscription} An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe: function subscribe(observer) {
          if (typeof observer !== 'object' || observer === null) {
            throw new Error( "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
          }

          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }

          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe: unsubscribe
          };
        }
      }, _ref[$$observable] = function () {
        return this;
      }, _ref;
    } // When a store is created, an "INIT" action is dispatched so that every
    // reducer returns their initial state. This effectively populates
    // the initial state tree.


    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch: dispatch,
      subscribe: subscribe,
      getState: getState,
      replaceReducer: replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
  }

  /**
   * Prints a warning in the console if it exists.
   *
   * @param {String} message The warning message.
   * @returns {void}
   */
  function warning(message) {
    /* eslint-disable no-console */
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }
    /* eslint-enable no-console */


    try {
      // This error was thrown as a convenience so that if you enable
      // "break on all exceptions" in your console,
      // it would pause the execution at this line.
      throw new Error(message);
    } catch (e) {} // eslint-disable-line no-empty

  }

  function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

    if (reducerKeys.length === 0) {
      return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
    }

    if (!isPlainObject(inputState)) {
      return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
    }

    var unexpectedKeys = Object.keys(inputState).filter(function (key) {
      return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function (key) {
      unexpectedKeyCache[key] = true;
    });
    if (action && action.type === ActionTypes.REPLACE) return;

    if (unexpectedKeys.length > 0) {
      return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
    }
  }

  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function (key) {
      var reducer = reducers[key];
      var initialState = reducer(undefined, {
        type: ActionTypes.INIT
      });

      if (typeof initialState === 'undefined') {
        throw new Error( "The slice reducer for key \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
      }

      if (typeof reducer(undefined, {
        type: ActionTypes.PROBE_UNKNOWN_ACTION()
      }) === 'undefined') {
        throw new Error( "The slice reducer for key \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle '" + ActionTypes.INIT + "' or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
      }
    });
  }
  /**
   * Turns an object whose values are different reducer functions, into a single
   * reducer function. It will call every child reducer, and gather their results
   * into a single state object, whose keys correspond to the keys of the passed
   * reducer functions.
   *
   * @param {Object} reducers An object whose values correspond to different
   * reducer functions that need to be combined into one. One handy way to obtain
   * it is to use ES6 `import * as reducers` syntax. The reducers may never return
   * undefined for any action. Instead, they should return their initial state
   * if the state passed to them was undefined, and the current state for any
   * unrecognized action.
   *
   * @returns {Function} A reducer function that invokes every reducer inside the
   * passed object, and builds a state object with the same shape.
   */


  function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};

    for (var i = 0; i < reducerKeys.length; i++) {
      var key = reducerKeys[i];

      {
        if (typeof reducers[key] === 'undefined') {
          warning("No reducer provided for key \"" + key + "\"");
        }
      }

      if (typeof reducers[key] === 'function') {
        finalReducers[key] = reducers[key];
      }
    }

    var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
    // keys multiple times.

    var unexpectedKeyCache;

    {
      unexpectedKeyCache = {};
    }

    var shapeAssertionError;

    try {
      assertReducerShape(finalReducers);
    } catch (e) {
      shapeAssertionError = e;
    }

    return function combination(state, action) {
      if (state === void 0) {
        state = {};
      }

      if (shapeAssertionError) {
        throw shapeAssertionError;
      }

      {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

        if (warningMessage) {
          warning(warningMessage);
        }
      }

      var hasChanged = false;
      var nextState = {};

      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);

        if (typeof nextStateForKey === 'undefined') {
          var actionType = action && action.type;
          throw new Error( "When called with an action of type " + (actionType ? "\"" + String(actionType) + "\"" : '(unknown type)') + ", the slice reducer for key \"" + _key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.");
        }

        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }

      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }

  /**
   * Composes single-argument functions from right to left. The rightmost
   * function can take multiple arguments as it provides the signature for
   * the resulting composite function.
   *
   * @param {...Function} funcs The functions to compose.
   * @returns {Function} A function obtained by composing the argument functions
   * from right to left. For example, compose(f, g, h) is identical to doing
   * (...args) => f(g(h(...args))).
   */
  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    if (funcs.length === 0) {
      return function (arg) {
        return arg;
      };
    }

    if (funcs.length === 1) {
      return funcs[0];
    }

    return funcs.reduce(function (a, b) {
      return function () {
        return a(b.apply(void 0, arguments));
      };
    });
  }

  /**
   * Creates a store enhancer that applies middleware to the dispatch method
   * of the Redux store. This is handy for a variety of tasks, such as expressing
   * asynchronous actions in a concise manner, or logging every action payload.
   *
   * See `redux-thunk` package as an example of the Redux middleware.
   *
   * Because middleware is potentially asynchronous, this should be the first
   * store enhancer in the composition chain.
   *
   * Note that each middleware will be given the `dispatch` and `getState` functions
   * as named arguments.
   *
   * @param {...Function} middlewares The middleware chain to be applied.
   * @returns {Function} A store enhancer applying the middleware.
   */

  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }

    return function (createStore) {
      return function () {
        var store = createStore.apply(void 0, arguments);

        var _dispatch = function dispatch() {
          throw new Error( 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
        };

        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch() {
            return _dispatch.apply(void 0, arguments);
          }
        };
        var chain = middlewares.map(function (middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(void 0, chain)(store.dispatch);
        return _objectSpread2(_objectSpread2({}, store), {}, {
          dispatch: _dispatch
        });
      };
    };
  }

  /*
   * This is a dummy function to check if the function name has been altered by minification.
   * If the function has been minified and NODE_ENV !== 'production', warn the user.
   */

  function isCrushed() {}

  if ( typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
    warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
  }

  /** A function that accepts a potential "extra argument" value to be injected later,
   * and returns an instance of the thunk middleware that uses that value
   */
  function createThunkMiddleware(extraArgument) {
    // Standard Redux middleware definition pattern:
    // See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware
    var middleware = function middleware(_ref) {
      var dispatch = _ref.dispatch,
          getState = _ref.getState;
      return function (next) {
        return function (action) {
          // The thunk middleware looks for any functions that were passed to `store.dispatch`.
          // If this "action" is really a function, call it and return the result.
          if (typeof action === 'function') {
            // Inject the store's `dispatch` and `getState` methods, as well as any "extra arg"
            return action(dispatch, getState, extraArgument);
          } // Otherwise, pass the action down the middleware chain as usual


          return next(action);
        };
      };
    };

    return middleware;
  }

  var thunk = createThunkMiddleware(); // Attach the factory function so users can create a customized version
  // with whatever "extra arg" they want to inject into their thunks

  thunk.withExtraArgument = createThunkMiddleware;

  var __extends = (undefined && undefined.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          if (typeof b !== "function" && b !== null)
              throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
      return to;
  };
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };
  var __spreadValues = function (a, b) {
      for (var prop in b || (b = {}))
          if (__hasOwnProp.call(b, prop))
              __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
          for (var _i = 0, _b = __getOwnPropSymbols(b); _i < _b.length; _i++) {
              var prop = _b[_i];
              if (__propIsEnum.call(b, prop))
                  __defNormalProp(a, prop, b[prop]);
          }
      return a;
  };
  var __spreadProps = function (a, b) { return __defProps(a, __getOwnPropDescs(b)); };
  var __async = function (__this, __arguments, generator) {
      return new Promise(function (resolve, reject) {
          var fulfilled = function (value) {
              try {
                  step(generator.next(value));
              }
              catch (e) {
                  reject(e);
              }
          };
          var rejected = function (value) {
              try {
                  step(generator.throw(value));
              }
              catch (e) {
                  reject(e);
              }
          };
          var step = function (x) { return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected); };
          step((generator = generator.apply(__this, __arguments)).next());
      });
  };
  var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {
      if (arguments.length === 0)
          return void 0;
      if (typeof arguments[0] === "object")
          return compose;
      return compose.apply(null, arguments);
  };
  // src/isPlainObject.ts
  function isPlainObject$1(value) {
      if (typeof value !== "object" || value === null)
          return false;
      var proto = value;
      while (Object.getPrototypeOf(proto) !== null) {
          proto = Object.getPrototypeOf(proto);
      }
      return Object.getPrototypeOf(value) === proto;
  }
  // src/utils.ts
  function getTimeMeasureUtils(maxDelay, fnName) {
      var elapsed = 0;
      return {
          measureTime: function (fn) {
              var started = Date.now();
              try {
                  return fn();
              }
              finally {
                  var finished = Date.now();
                  elapsed += finished - started;
              }
          },
          warnIfExceeded: function () {
              if (elapsed > maxDelay) {
                  console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
              }
          }
      };
  }
  var MiddlewareArray = /** @class */ (function (_super) {
      __extends(MiddlewareArray, _super);
      function MiddlewareArray() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          var _this = _super.apply(this, args) || this;
          Object.setPrototypeOf(_this, MiddlewareArray.prototype);
          return _this;
      }
      Object.defineProperty(MiddlewareArray, Symbol.species, {
          get: function () {
              return MiddlewareArray;
          },
          enumerable: false,
          configurable: true
      });
      MiddlewareArray.prototype.concat = function () {
          var arr = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              arr[_i] = arguments[_i];
          }
          return _super.prototype.concat.apply(this, arr);
      };
      MiddlewareArray.prototype.prepend = function () {
          var arr = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              arr[_i] = arguments[_i];
          }
          if (arr.length === 1 && Array.isArray(arr[0])) {
              return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();
          }
          return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();
      };
      return MiddlewareArray;
  }(Array));
  var prefix = "Invariant failed";
  function invariant(condition, message) {
      if (condition) {
          return;
      }
      throw new Error(prefix + ": " + (message || ""));
  }
  function stringify(obj, serializer, indent, decycler) {
      return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
  }
  function getSerialize(serializer, decycler) {
      var stack = [], keys = [];
      if (!decycler)
          decycler = function (_, value) {
              if (stack[0] === value)
                  return "[Circular ~]";
              return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
          };
      return function (key, value) {
          if (stack.length > 0) {
              var thisPos = stack.indexOf(this);
              ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
              ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
              if (~stack.indexOf(value))
                  value = decycler.call(this, key, value);
          }
          else
              stack.push(value);
          return serializer == null ? value : serializer.call(this, key, value);
      };
  }
  function isImmutableDefault(value) {
      return typeof value !== "object" || value === null || typeof value === "undefined" || Object.isFrozen(value);
  }
  function trackForMutations(isImmutable, ignorePaths, obj) {
      var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
      return {
          detectMutations: function () {
              return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
          }
      };
  }
  function trackProperties(isImmutable, ignorePaths, obj, path) {
      if (ignorePaths === void 0) { ignorePaths = []; }
      if (path === void 0) { path = ""; }
      var tracked = { value: obj };
      if (!isImmutable(obj)) {
          tracked.children = {};
          for (var key in obj) {
              var childPath = path ? path + "." + key : key;
              if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
                  continue;
              }
              tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
          }
      }
      return tracked;
  }
  function detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {
      if (ignorePaths === void 0) { ignorePaths = []; }
      if (sameParentRef === void 0) { sameParentRef = false; }
      if (path === void 0) { path = ""; }
      var prevObj = trackedProperty ? trackedProperty.value : void 0;
      var sameRef = prevObj === obj;
      if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
          return { wasMutated: true, path: path };
      }
      if (isImmutable(prevObj) || isImmutable(obj)) {
          return { wasMutated: false };
      }
      var keysToDetect = {};
      for (var key in trackedProperty.children) {
          keysToDetect[key] = true;
      }
      for (var key in obj) {
          keysToDetect[key] = true;
      }
      for (var key in keysToDetect) {
          var childPath = path ? path + "." + key : key;
          if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
              continue;
          }
          var result = detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);
          if (result.wasMutated) {
              return result;
          }
      }
      return { wasMutated: false };
  }
  function createImmutableStateInvariantMiddleware(options) {
      if (options === void 0) { options = {}; }
      var _b = options.isImmutable, isImmutable = _b === void 0 ? isImmutableDefault : _b, ignoredPaths = options.ignoredPaths, _c = options.warnAfter, warnAfter = _c === void 0 ? 32 : _c, ignore = options.ignore;
      ignoredPaths = ignoredPaths || ignore;
      var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
      return function (_b) {
          var getState = _b.getState;
          var state = getState();
          var tracker = track(state);
          var result;
          return function (next) { return function (action) {
              var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
              measureUtils.measureTime(function () {
                  state = getState();
                  result = tracker.detectMutations();
                  tracker = track(state);
                  invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
              });
              var dispatchedAction = next(action);
              measureUtils.measureTime(function () {
                  state = getState();
                  result = tracker.detectMutations();
                  tracker = track(state);
                  result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
              });
              measureUtils.warnIfExceeded();
              return dispatchedAction;
          }; };
      };
  }
  // src/serializableStateInvariantMiddleware.ts
  function isPlain(val) {
      var type = typeof val;
      return type === "undefined" || val === null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || isPlainObject$1(val);
  }
  function findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {
      if (path === void 0) { path = ""; }
      if (isSerializable === void 0) { isSerializable = isPlain; }
      if (ignoredPaths === void 0) { ignoredPaths = []; }
      var foundNestedSerializable;
      if (!isSerializable(value)) {
          return {
              keyPath: path || "<root>",
              value: value
          };
      }
      if (typeof value !== "object" || value === null) {
          return false;
      }
      var entries = getEntries != null ? getEntries(value) : Object.entries(value);
      var hasIgnoredPaths = ignoredPaths.length > 0;
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
          var _b = entries_1[_i], key = _b[0], nestedValue = _b[1];
          var nestedPath = path ? path + "." + key : key;
          if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {
              continue;
          }
          if (!isSerializable(nestedValue)) {
              return {
                  keyPath: nestedPath,
                  value: nestedValue
              };
          }
          if (typeof nestedValue === "object") {
              foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);
              if (foundNestedSerializable) {
                  return foundNestedSerializable;
              }
          }
      }
      return false;
  }
  function createSerializableStateInvariantMiddleware(options) {
      if (options === void 0) { options = {}; }
      var _b = options.isSerializable, isSerializable = _b === void 0 ? isPlain : _b, getEntries = options.getEntries, _c = options.ignoredActions, ignoredActions = _c === void 0 ? [] : _c, _d = options.ignoredActionPaths, ignoredActionPaths = _d === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _d, _e = options.ignoredPaths, ignoredPaths = _e === void 0 ? [] : _e, _f = options.warnAfter, warnAfter = _f === void 0 ? 32 : _f, _g = options.ignoreState, ignoreState = _g === void 0 ? false : _g;
      return function (storeAPI) { return function (next) { return function (action) {
          if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {
              return next(action);
          }
          var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
          measureUtils.measureTime(function () {
              var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths);
              if (foundActionNonSerializableValue) {
                  var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;
                  console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
              }
          });
          var result = next(action);
          if (!ignoreState) {
              measureUtils.measureTime(function () {
                  var state = storeAPI.getState();
                  var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths);
                  if (foundStateNonSerializableValue) {
                      var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;
                      console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
                  }
              });
              measureUtils.warnIfExceeded();
          }
          return result;
      }; }; };
  }
  // src/getDefaultMiddleware.ts
  function isBoolean(x) {
      return typeof x === "boolean";
  }
  function curryGetDefaultMiddleware() {
      return function curriedGetDefaultMiddleware(options) {
          return getDefaultMiddleware(options);
      };
  }
  function getDefaultMiddleware(options) {
      if (options === void 0) { options = {}; }
      var _b = options.thunk, thunk$1 = _b === void 0 ? true : _b, _c = options.immutableCheck, immutableCheck = _c === void 0 ? true : _c, _d = options.serializableCheck, serializableCheck = _d === void 0 ? true : _d;
      var middlewareArray = new MiddlewareArray();
      if (thunk$1) {
          if (isBoolean(thunk$1)) {
              middlewareArray.push(thunk);
          }
          else {
              middlewareArray.push(thunk.withExtraArgument(thunk$1.extraArgument));
          }
      }
      {
          if (immutableCheck) {
              var immutableOptions = {};
              if (!isBoolean(immutableCheck)) {
                  immutableOptions = immutableCheck;
              }
              middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
          }
          if (serializableCheck) {
              var serializableOptions = {};
              if (!isBoolean(serializableCheck)) {
                  serializableOptions = serializableCheck;
              }
              middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
          }
      }
      return middlewareArray;
  }
  // src/configureStore.ts
  var IS_PRODUCTION = "development" === "production";
  function configureStore(options) {
      var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
      var _b = options || {}, _c = _b.reducer, reducer = _c === void 0 ? void 0 : _c, _d = _b.middleware, middleware = _d === void 0 ? curriedGetDefaultMiddleware() : _d, _e = _b.devTools, devTools = _e === void 0 ? true : _e, _f = _b.preloadedState, preloadedState = _f === void 0 ? void 0 : _f, _g = _b.enhancers, enhancers = _g === void 0 ? void 0 : _g;
      var rootReducer;
      if (typeof reducer === "function") {
          rootReducer = reducer;
      }
      else if (isPlainObject$1(reducer)) {
          rootReducer = combineReducers(reducer);
      }
      else {
          throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
      }
      var finalMiddleware = middleware;
      if (typeof finalMiddleware === "function") {
          finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
          if ( !Array.isArray(finalMiddleware)) {
              throw new Error("when using a middleware builder function, an array of middleware must be returned");
          }
      }
      if ( finalMiddleware.some(function (item) { return typeof item !== "function"; })) {
          throw new Error("each middleware provided to configureStore must be a function");
      }
      var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
      var finalCompose = compose;
      if (devTools) {
          finalCompose = composeWithDevTools(__spreadValues({
              trace: !IS_PRODUCTION
          }, typeof devTools === "object" && devTools));
      }
      var storeEnhancers = [middlewareEnhancer];
      if (Array.isArray(enhancers)) {
          storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
      }
      else if (typeof enhancers === "function") {
          storeEnhancers = enhancers(storeEnhancers);
      }
      var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
      return createStore(rootReducer, preloadedState, composedEnhancer);
  }
  // src/createAction.ts
  function createAction(type, prepareAction) {
      function actionCreator() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          if (prepareAction) {
              var prepared = prepareAction.apply(void 0, args);
              if (!prepared) {
                  throw new Error("prepareAction did not return an object");
              }
              return __spreadValues(__spreadValues({
                  type: type,
                  payload: prepared.payload
              }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
          }
          return { type: type, payload: args[0] };
      }
      actionCreator.toString = function () { return "" + type; };
      actionCreator.type = type;
      actionCreator.match = function (action) { return action.type === type; };
      return actionCreator;
  }
  // src/mapBuilders.ts
  function executeReducerBuilderCallback(builderCallback) {
      var actionsMap = {};
      var actionMatchers = [];
      var defaultCaseReducer;
      var builder = {
          addCase: function (typeOrActionCreator, reducer) {
              {
                  if (actionMatchers.length > 0) {
                      throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
                  }
                  if (defaultCaseReducer) {
                      throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
                  }
              }
              var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
              if (type in actionsMap) {
                  throw new Error("addCase cannot be called with two reducers for the same action type");
              }
              actionsMap[type] = reducer;
              return builder;
          },
          addMatcher: function (matcher, reducer) {
              {
                  if (defaultCaseReducer) {
                      throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
                  }
              }
              actionMatchers.push({ matcher: matcher, reducer: reducer });
              return builder;
          },
          addDefaultCase: function (reducer) {
              {
                  if (defaultCaseReducer) {
                      throw new Error("`builder.addDefaultCase` can only be called once");
                  }
              }
              defaultCaseReducer = reducer;
              return builder;
          }
      };
      builderCallback(builder);
      return [actionsMap, actionMatchers, defaultCaseReducer];
  }
  // src/createReducer.ts
  function createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
      if (actionMatchers === void 0) { actionMatchers = []; }
      var _b = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _b[0], finalActionMatchers = _b[1], finalDefaultCaseReducer = _b[2];
      var frozenInitialState = fn(initialState, function () {
      });
      return function (state, action) {
          if (state === void 0) { state = frozenInitialState; }
          var caseReducers = __spreadArray([
              actionsMap[action.type]
          ], finalActionMatchers.filter(function (_b) {
              var matcher = _b.matcher;
              return matcher(action);
          }).map(function (_b) {
              var reducer = _b.reducer;
              return reducer;
          }));
          if (caseReducers.filter(function (cr) { return !!cr; }).length === 0) {
              caseReducers = [finalDefaultCaseReducer];
          }
          return caseReducers.reduce(function (previousState, caseReducer) {
              if (caseReducer) {
                  if (t(previousState)) {
                      var draft = previousState;
                      var result = caseReducer(draft, action);
                      if (typeof result === "undefined") {
                          return previousState;
                      }
                      return result;
                  }
                  else if (!r(previousState)) {
                      var result = caseReducer(previousState, action);
                      if (typeof result === "undefined") {
                          if (previousState === null) {
                              return previousState;
                          }
                          throw Error("A case reducer on a non-draftable value must not return undefined");
                      }
                      return result;
                  }
                  else {
                      return fn(previousState, function (draft) {
                          return caseReducer(draft, action);
                      });
                  }
              }
              return previousState;
          }, state);
      };
  }
  // src/createSlice.ts
  function getType2(slice, actionKey) {
      return slice + "/" + actionKey;
  }
  function createSlice(options) {
      var name = options.name, initialState = options.initialState;
      if (!name) {
          throw new Error("`name` is a required option for createSlice");
      }
      var reducers = options.reducers || {};
      var _b = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _c = _b[0], extraReducers = _c === void 0 ? {} : _c, _d = _b[1], actionMatchers = _d === void 0 ? [] : _d, _e = _b[2], defaultCaseReducer = _e === void 0 ? void 0 : _e;
      var reducerNames = Object.keys(reducers);
      var sliceCaseReducersByName = {};
      var sliceCaseReducersByType = {};
      var actionCreators = {};
      reducerNames.forEach(function (reducerName) {
          var maybeReducerWithPrepare = reducers[reducerName];
          var type = getType2(name, reducerName);
          var caseReducer;
          var prepareCallback;
          if ("reducer" in maybeReducerWithPrepare) {
              caseReducer = maybeReducerWithPrepare.reducer;
              prepareCallback = maybeReducerWithPrepare.prepare;
          }
          else {
              caseReducer = maybeReducerWithPrepare;
          }
          sliceCaseReducersByName[reducerName] = caseReducer;
          sliceCaseReducersByType[type] = caseReducer;
          actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
      });
      var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
      var reducer = createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);
      return {
          name: name,
          reducer: reducer,
          actions: actionCreators,
          caseReducers: sliceCaseReducersByName
      };
  }
  // src/nanoid.ts
  var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
  var nanoid = function (size) {
      if (size === void 0) { size = 21; }
      var id = "";
      var i = size;
      while (i--) {
          id += urlAlphabet[Math.random() * 64 | 0];
      }
      return id;
  };
  // src/createAsyncThunk.ts
  var commonProperties = [
      "name",
      "message",
      "stack",
      "code"
  ];
  var RejectWithValue = /** @class */ (function () {
      function RejectWithValue(payload, meta) {
          this.payload = payload;
          this.meta = meta;
      }
      return RejectWithValue;
  }());
  var FulfillWithMeta = /** @class */ (function () {
      function FulfillWithMeta(payload, meta) {
          this.payload = payload;
          this.meta = meta;
      }
      return FulfillWithMeta;
  }());
  var miniSerializeError = function (value) {
      if (typeof value === "object" && value !== null) {
          var simpleError = {};
          for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
              var property = commonProperties_1[_i];
              if (typeof value[property] === "string") {
                  simpleError[property] = value[property];
              }
          }
          return simpleError;
      }
      return { message: String(value) };
  };
  function createAsyncThunk(typePrefix, payloadCreator, options) {
      var fulfilled = createAction(typePrefix + "/fulfilled", function (payload, requestId, arg, meta) { return ({
          payload: payload,
          meta: __spreadProps(__spreadValues({}, meta || {}), {
              arg: arg,
              requestId: requestId,
              requestStatus: "fulfilled"
          })
      }); });
      var pending = createAction(typePrefix + "/pending", function (requestId, arg, meta) { return ({
          payload: void 0,
          meta: __spreadProps(__spreadValues({}, meta || {}), {
              arg: arg,
              requestId: requestId,
              requestStatus: "pending"
          })
      }); });
      var rejected = createAction(typePrefix + "/rejected", function (error, requestId, arg, payload, meta) { return ({
          payload: payload,
          error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
          meta: __spreadProps(__spreadValues({}, meta || {}), {
              arg: arg,
              requestId: requestId,
              rejectedWithValue: !!payload,
              requestStatus: "rejected",
              aborted: (error == null ? void 0 : error.name) === "AbortError",
              condition: (error == null ? void 0 : error.name) === "ConditionError"
          })
      }); });
      var displayedWarning = false;
      var AC = typeof AbortController !== "undefined" ? AbortController : /** @class */ (function () {
          function class_1() {
              this.signal = {
                  aborted: false,
                  addEventListener: function () {
                  },
                  dispatchEvent: function () {
                      return false;
                  },
                  onabort: function () {
                  },
                  removeEventListener: function () {
                  }
              };
          }
          class_1.prototype.abort = function () {
              {
                  if (!displayedWarning) {
                      displayedWarning = true;
                      console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
                  }
              }
          };
          return class_1;
      }());
      function actionCreator(arg) {
          return function (dispatch, getState, extra) {
              var _a;
              var requestId = ((_a = options == null ? void 0 : options.idGenerator) != null ? _a : nanoid)();
              var abortController = new AC();
              var abortReason;
              var abortedPromise = new Promise(function (_, reject) { return abortController.signal.addEventListener("abort", function () { return reject({ name: "AbortError", message: abortReason || "Aborted" }); }); });
              var started = false;
              function abort(reason) {
                  if (started) {
                      abortReason = reason;
                      abortController.abort();
                  }
              }
              var promise = function () {
                  return __async(this, null, function () {
                      var _a2, finalAction, err_1, skipDispatch;
                      return __generator(this, function (_b) {
                          switch (_b.label) {
                              case 0:
                                  _b.trys.push([0, 2, , 3]);
                                  if (options && options.condition && options.condition(arg, { getState: getState, extra: extra }) === false) {
                                      throw {
                                          name: "ConditionError",
                                          message: "Aborted due to condition callback returning false."
                                      };
                                  }
                                  started = true;
                                  dispatch(pending(requestId, arg, (_a2 = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _a2.call(options, { requestId: requestId, arg: arg }, { getState: getState, extra: extra })));
                                  return [4 /*yield*/, Promise.race([
                                          abortedPromise,
                                          Promise.resolve(payloadCreator(arg, {
                                              dispatch: dispatch,
                                              getState: getState,
                                              extra: extra,
                                              requestId: requestId,
                                              signal: abortController.signal,
                                              rejectWithValue: function (value, meta) {
                                                  return new RejectWithValue(value, meta);
                                              },
                                              fulfillWithValue: function (value, meta) {
                                                  return new FulfillWithMeta(value, meta);
                                              }
                                          })).then(function (result) {
                                              if (result instanceof RejectWithValue) {
                                                  throw result;
                                              }
                                              if (result instanceof FulfillWithMeta) {
                                                  return fulfilled(result.payload, requestId, arg, result.meta);
                                              }
                                              return fulfilled(result, requestId, arg);
                                          })
                                      ])];
                              case 1:
                                  finalAction = _b.sent();
                                  return [3 /*break*/, 3];
                              case 2:
                                  err_1 = _b.sent();
                                  finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                                  return [3 /*break*/, 3];
                              case 3:
                                  skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                                  if (!skipDispatch) {
                                      dispatch(finalAction);
                                  }
                                  return [2 /*return*/, finalAction];
                          }
                      });
                  });
              }();
              return Object.assign(promise, {
                  abort: abort,
                  requestId: requestId,
                  arg: arg,
                  unwrap: function () {
                      return promise.then(unwrapResult);
                  }
              });
          };
      }
      return Object.assign(actionCreator, {
          pending: pending,
          rejected: rejected,
          fulfilled: fulfilled,
          typePrefix: typePrefix
      });
  }
  function unwrapResult(action) {
      if (action.meta && action.meta.rejectedWithValue) {
          throw action.payload;
      }
      if (action.error) {
          throw action.error;
      }
      return action.payload;
  }
  // src/index.ts
  N();
  //# sourceMappingURL=redux-toolkit.esm.js.map

  var slice = /*#__PURE__*/createSlice({
    name: 'marketing',
    initialState: {
      penrose: false
    },
    reducers: {
      changePenrose: function changePenrose(state, action) {
        state.penrose = action.payload;
      }
    }
  });
  var actions = slice.actions;
  var marketing = slice.reducer;

  var configSlice = /*#__PURE__*/createSlice({
    name: 'config',
    initialState: {
      hyperMode: false,
      soundOn: false
    },
    reducers: {
      changeHyperMode: function changeHyperMode(state, action) {
        state.hyperMode = action.payload;
      },
      changeSound: function changeSound(state, action) {
        state.soundOn = action.payload;
      }
    }
  });
  var actions$1 = configSlice.actions;
  var config = configSlice.reducer;

  var locationSlice = /*#__PURE__*/createSlice({
    name: 'location',
    initialState: {
      Outside: false,
      Room: false,
      Ship: false,
      World: false,
      Path: false
    },
    reducers: {
      enableOutside: function enableOutside(state) {
        state.Outside = true;
      },
      enableRoom: function enableRoom(state) {
        state.Room = true;
      },
      enableSpaceShip: function enableSpaceShip(state) {
        state.Ship = true;
      },
      enableWorld: function enableWorld(state) {
        state.World = true;
      },
      enablePath: function enablePath(state) {
        state.Path = true;
      }
    }
  });
  var actions$2 = locationSlice.actions;
  var location = locationSlice.reducer;

  var features = /*#__PURE__*/combineReducers({
    location: location
  });
  var actions$3 = {
    location: actions$2
  };

  var lodash = createCommonjsModule(function (module, exports) {
  (function() {

    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined$1;

    /** Used as the semantic version number. */
    var VERSION = '4.17.21';

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function',
        INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG],
      ['bind', WRAP_BIND_FLAG],
      ['bindKey', WRAP_BIND_KEY_FLAG],
      ['curry', WRAP_CURRY_FLAG],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG],
      ['flip', WRAP_FLIP_FLAG],
      ['partial', WRAP_PARTIAL_FLAG],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
      ['rearg', WRAP_REARG_FLAG]
    ];

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /** Used to match a single whitespace character. */
    var reWhitespace = /\s/;

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /**
     * Used to validate the `validate` option in `_.template` variable.
     *
     * Forbids characters which could potentially change the meaning of the function argument definition:
     * - "()," (modification of function parameters)
     * - "=" (default value)
     * - "[]{}" (destructuring of function parameters)
     * - "/" (beginning of a comment)
     * - whitespace
     */
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /** Used to assign default `context` object properties. */
    var contextProps = [
      'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
      'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
      '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    ];

    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports =  exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /*--------------------------------------------------------------------------*/

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined$1) {
          result = result === undefined$1 ? current : (result + current);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
        : string;
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined$1 : object[key];
    }

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    var runInContext = (function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

      /** Built-in constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to detect overreaching core-js shims. */
      var coreJsData = context['__core-js_shared__'];

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? ('Symbol(src)_1.' + uid) : '';
      }());

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);

      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' +
        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
      );

      /** Built-in value references. */
      var Buffer = moduleExports ? context.Buffer : undefined$1,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
          symIterator = Symbol ? Symbol.iterator : undefined$1,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

      var defineProperty = (function() {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }());

      /** Mocked built-ins. */
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');

      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap;

      /** Used to lookup unminified function names. */
      var realNames = {};

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined$1,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
          symbolToString = symbolProto ? symbolProto.toString : undefined$1;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function() {
        function object() {}
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object;
          object.prototype = undefined$1;
          return result;
        };
      }());

      /**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {
        // No operation performed.
      }

      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$1;
      }

      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */
      lodash.templateSettings = {

        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': reEscape,

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': reEvaluate,

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': reInterpolate,

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {

          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': lodash
        }
      };

      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;

      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }

      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];

        outer:
        while (length-- && resIndex < takeCount) {
          index += dir;

          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }

      // Ensure `LazyWrapper` is an instance of `baseLodash`.
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined$1 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
      }

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
      }

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
        return this;
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined$1 : data[index][1];
      }

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash,
          'map': new (Map || ListCache),
          'string': new Hash
        };
      }

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new MapCache;
        while (++index < length) {
          this.add(values[index]);
        }
      }

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache;
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
      }

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) &&
              !(skipIndexes && (
                 // Safari 9 has enumerable `arguments.length` in strict mode.
                 key == 'length' ||
                 // Node.js 0.10 has enumerable non-index properties on buffers.
                 (isBuff && (key == 'offset' || key == 'parent')) ||
                 // PhantomJS 2 has enumerable non-index properties on typed arrays.
                 (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                 // Skip index properties.
                 isIndex(key, length)
              ))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined$1;
      }

      /**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      /**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if ((value !== undefined$1 && !eq(object[key], value)) ||
            (value === undefined$1 && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined$1 && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }

      /**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function(value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      /**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */
      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined$1 : get(object, paths[index]);
        }
        return result;
      }

      /**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined$1) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined$1) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }

      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined$1) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = (isFlat || isFunc) ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat
                ? copySymbolsIn(value, baseAssignIn(result, value))
                : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack);
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
        }

        var keysFunc = isFull
          ? (isFlat ? getAllKeysIn : getAllKeys)
          : (isFlat ? keysIn : keys);

        var props = isArr ? undefined$1 : keysFunc(value);
        arrayEach(props || value, function(subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      /**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }

      /**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function() { func.apply(undefined$1, args); }, wait);
      }

      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        }
        else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          }
          else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      /**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      /**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      /**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined$1
                ? (current === current && !isSymbol(current))
                : comparator(current, computed)
              )) {
            var computed = current,
                result = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;

        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined$1 || end > length) ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }

      /**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;

        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }

      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path) {
        path = castPath(path, object);

        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return (index && index == length) ? object : undefined$1;
      }

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined$1 ? undefinedTag : nullTag;
        }
        return (symToStringTag && symToStringTag in Object(value))
          ? getRawTag(value)
          : objectToString(value);
      }

      /**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */
      function baseGt(value, other) {
        return value > other;
      }

      /**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      /**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
            ? new SetCache(othIndex && array)
            : undefined$1;
        }
        array = arrays[0];

        var index = -1,
            seen = caches[0];

        outer:
        while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (!(seen
                ? cacheHas(seen, computed)
                : includes(result, computed, comparator)
              )) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache
                    ? cacheHas(cache, computed)
                    : includes(arrays[othIndex], computed, comparator))
                  ) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function(value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined$1 : apply(func, object, args);
      }

      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      /**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      /**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;

        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack);
          return (objIsArr || isTypedArray(object))
            ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
            : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
              ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined$1 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack;
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined$1
                  ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                  : result
                )) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      /**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) &&
          isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */
      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value)
            ? baseMatchesProperty(value[0], value[1])
            : baseMatches(value);
        }
        return property(value);
      }

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */
      function baseLt(value, other) {
        return value < other;
      }

      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return (objValue === undefined$1 && objValue === srcValue)
            ? hasIn(object, path)
            : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack);
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          }
          else {
            var newValue = customizer
              ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
              : undefined$1;

            if (newValue === undefined$1) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer
          ? customizer(objValue, srcValue, (key + ''), object, source, stack)
          : undefined$1;

        var isCommon = newValue === undefined$1;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            }
            else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            }
            else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            }
            else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            }
            else {
              newValue = [];
            }
          }
          else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            }
            else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          }
          else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }

      /**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined$1;
      }

      /**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee) {
            if (isArray(iteratee)) {
              return function(value) {
                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
              }
            }
            return iteratee;
          });
        } else {
          iteratees = [identity];
        }

        var index = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

        var result = baseMap(collection, function(value, key, collection) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });

        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      /**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }

      /**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */
      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }
        return result;
      }

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }

      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      /**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */
      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }

      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      /**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */
      function baseSample(collection) {
        return arraySample(values(collection));
      }

      /**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      /**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
            return object;
          }

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
            if (newValue === undefined$1) {
              newValue = isObject(objValue)
                ? objValue
                : (isIndex(path[index + 1]) ? [] : {});
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }

      /**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      /**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : ((end - start) >>> 0);
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      /**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;

        baseEach(collection, function(value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      /**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = (low + high) >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) &&
                (retHighest ? (computed <= value) : (computed < value))) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      /**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        var low = 0,
            high = array == null ? 0 : array.length;
        if (high === 0) {
          return 0;
        }

        value = iteratee(value);
        var valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined$1;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined$1,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? (computed <= value) : (computed < value);
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      /**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        }
        else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache;
        }
        else {
          seen = iteratee ? [] : result;
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          }
          else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      /**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      /**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) &&
          predicate(array[index], index, array)) {}

        return isDrop
          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
      }

      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function(result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */
      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      /**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined$1;
          assignFunc(result, props[index], value);
        }
        return result;
      }

      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      /**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      var castRest = baseRest;

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined$1 ? length : end;
        return (!start && end >= length) ? array : baseSlice(array, start, end);
      }

      /**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */
      var clearTimeout = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };

      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

        buffer.copy(result);
        return result;
      }

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      /**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined$1,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

          var othIsDefined = other !== undefined$1,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive) {
            return 1;
          }
          if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }

      /**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }

      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }

      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];

          var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined$1;

          if (newValue === undefined$1) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }

      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      /**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};

          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined$1,
              guard = length > 2 ? sources[2] : undefined$1;

          customizer = (assigner.length > 3 && typeof customizer == 'function')
            ? (length--, customizer)
            : undefined$1;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined$1 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while ((fromRight ? index-- : ++index < length)) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      /**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);

          var strSymbols = hasUnicode(string)
            ? stringToArray(string)
            : undefined$1;

          var chr = strSymbols
            ? strSymbols[0]
            : string.charAt(0);

          var trailing = strSymbols
            ? castSlice(strSymbols, 1).join('')
            : string.slice(1);

          return chr[methodName]() + trailing;
        };
      }

      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtor(Ctor) {
        return function() {
          // Use a `switch` statement to work with class constructors. See
          // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0: return new Ctor;
            case 1: return new Ctor(args[0]);
            case 2: return new Ctor(args[0], args[1]);
            case 3: return new Ctor(args[0], args[1], args[2]);
            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }

      /**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }
          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
            ? []
            : replaceHolders(args, placeholder);

          length -= holders.length;
          if (length < arity) {
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
              args, holders, undefined$1, undefined$1, arity - length);
          }
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) { return iteratee(iterable[key], key, iterable); };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
        };
      }

      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];

            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined$1;

            if (data && isLaziable(data[0]) &&
                  data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                  !data[4].length && data[9] == 1
                ) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = (func.length == 1 && isLaziable(func))
                ? wrapper[funcName]()
                : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }

      /**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined$1 : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, thisArg,
              args, newHolders, argPos, ary, arity - length
            );
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */
      function createInverter(setter, toIteratee) {
        return function(object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      /**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result;
          if (value === undefined$1 && other === undefined$1) {
            return defaultValue;
          }
          if (value !== undefined$1) {
            result = value;
          }
          if (other !== undefined$1) {
            if (result === undefined$1) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }

      /**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined$1 ? ' ' : baseToString(chars);

        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars)
          ? castSlice(stringToArray(result), 0, length).join('')
          : result.slice(0, length);
      }

      /**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined$1;
          }
          // Ensure the sign of `-0` is preserved.
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      /**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }

      /**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined$1,
            newHoldersRight = isCurry ? undefined$1 : holders,
            newPartials = isCurry ? partials : undefined$1,
            newPartialsRight = isCurry ? undefined$1 : partials;

        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
          newHoldersRight, argPos, ary, arity
        ];

        var result = wrapFunc.apply(undefined$1, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      /**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));

            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }

      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
        return new Set(values);
      };

      /**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }

      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$1;
        }
        ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined$1 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;

          partials = holders = undefined$1;
        }
        var data = isBindKey ? undefined$1 : getData(func);

        var newData = [
          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
          argPos, ary, arity
        ];

        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$1
          ? (isBindKey ? 0 : func.length)
          : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined$1, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      /**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined$1 ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          return srcValue;
        }
        return objValue;
      }

      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }

      /**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined$1 : value;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Check that cyclic values are equal.
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined$1) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                  if (!cacheHas(seen, othIndex) &&
                      (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
              result = false;
              break;
            }
          } else if (!(
                arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if ((object.byteLength != other.byteLength) ||
                (object.byteOffset != other.byteOffset)) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if ((object.byteLength != other.byteLength) ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == (other + '');

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Check that cyclic values are equal.
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key, other, object, stack)
              : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined$1
                ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                : compared
              )) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      function flatRest(func) {
        return setToString(overRest(func, undefined$1, flatten), func + '');
      }

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };

      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = (func.name + ''),
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }

      /**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      /**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
          ? data[typeof key == 'string' ? 'string' : 'hash']
          : data.map;
      }

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];

          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined$1;
      }

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined$1;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };

      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;

      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set) != setTag) ||
          (WeakMap && getTag(new WeakMap) != weakMapTag)) {
        getTag = function(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined$1,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString: return dataViewTag;
              case mapCtorString: return mapTag;
              case promiseCtorString: return promiseTag;
              case setCtorString: return setTag;
              case weakMapCtorString: return weakMapTag;
            }
          }
          return result;
        };
      }

      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':      start += size; break;
            case 'dropRight': end -= size; break;
            case 'take':      end = nativeMin(end, start + size); break;
            case 'takeRight': start = nativeMax(start, end - size); break;
          }
        }
        return { 'start': start, 'end': end };
      }

      /**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) &&
          (isArray(object) || isArguments(object));
      }

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return (typeof object.constructor == 'function' && !isPrototype(object))
          ? baseCreate(getPrototype(object))
          : {};
      }

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag: case float64Tag:
          case int8Tag: case int16Tag: case int32Tag:
          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor;

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor;

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      /**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) ||
          !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;

        return !!length &&
          (type == 'number' ||
            (type != 'symbol' && reIsUint.test(value))) &&
              (value > -1 && value % 1 == 0 && value < length);
      }

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number'
              ? (isArrayLike(object) && isIndex(index, object.length))
              : (type == 'string' && index in object)
            ) {
          return eq(object[index], value);
        }
        return false;
      }

      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object));
      }

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
          ? (value !== '__proto__')
          : (value === null);
      }

      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && (maskSrcKey in func);
      }

      /**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */
      var isMaskable = coreJsData ? isFunction : stubFalse;

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

        return value === proto;
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue &&
            (srcValue !== undefined$1 || (key in Object(object)));
        };
      }

      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });

        var cache = result.cache;
        return result;
      }

      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

        var isCombo =
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
          ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = value;
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;

        return data;
      }

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
        return function() {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      /**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
        }
        return array;
      }

      /**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function safeGet(object, key) {
        if (key === 'constructor' && typeof object[key] === 'function') {
          return;
        }

        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = shortOut(baseSetData);

      /**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      var setTimeout = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);

      /**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */
      function setWrapToString(wrapper, reference, bitmask) {
        var source = (reference + '');
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;

        return function() {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$1, arguments);
        };
      }

      /**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */
      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;

        size = size === undefined$1 ? length : size;
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];

          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }

      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46 /* . */) {
          result.push('');
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
      });

      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return (func + '');
          } catch (e) {}
        }
        return '';
      }

      /**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = '_.' + pair[0];
          if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__  = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, (index += size));
        }
        return result;
      }

      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      /**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */
      var difference = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var differenceBy = baseRest(function(array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */
      var differenceWith = baseRest(function(array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$1;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
          : [];
      });

      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true, true)
          : [];
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true)
          : [];
      }

      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }

      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = fromIndex < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      /**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      /**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      /**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      /**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */
      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }

      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */
      function head(array) {
        return (array && array.length) ? array[0] : undefined$1;
      }

      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }

      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped)
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */
      var intersectionBy = baseRest(function(arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined$1;
        } else {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        if (comparator) {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, undefined$1, comparator)
          : [];
      });

      /**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */
      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined$1;
      }

      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value
          ? strictLastIndexOf(array, value, index)
          : baseFindIndex(array, baseIsNaN, index, true);
      }

      /**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */
      function nth(array, n) {
        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
      }

      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);

      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values)
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */
      function pullAllBy(array, values, iteratee) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, getIteratee(iteratee, 2))
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */
      function pullAllWith(array, values, comparator) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, undefined$1, comparator)
          : array;
      }

      /**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);

        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));

        return result;
      });

      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;

        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }

      /**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        }
        else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined$1 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }

      /**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      /**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      /**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      /**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      /**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */
      function sortedUniq(array) {
        return (array && array.length)
          ? baseSortedUniq(array)
          : [];
      }

      /**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */
      function sortedUniqBy(array, iteratee) {
        return (array && array.length)
          ? baseSortedUniq(array, getIteratee(iteratee, 2))
          : [];
      }

      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */
      function takeRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), false, true)
          : [];
      }

      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */
      function takeWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3))
          : [];
      }

      /**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });

      /**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      var unionBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
      });

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return (array && array.length) ? baseUniq(array) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniqBy(array, iteratee) {
        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */
      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
      }

      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      /**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function(group) {
          return apply(iteratee, undefined$1, group);
        });
      }

      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */
      var without = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, values)
          : [];
      });

      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });

      /**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var xorBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
      });

      /**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */
      var zip = baseRest(unzip);

      /**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      /**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      /**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined$1;

        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
        return unzipWith(arrays, iteratee);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      /**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor) {
        return interceptor(value);
      }

      /**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function(object) { return baseAt(object, paths); };

        if (length > 1 || this.__actions__.length ||
            !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined$1
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined$1);
          }
          return array;
        });
      });

      /**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }

      /**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      /**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */
      function wrapperNext() {
        if (this.__values__ === undefined$1) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined$1 : this.__values__[this.__index__++];

        return { 'done': done, 'value': value };
      }

      /**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */
      function wrapperToIterator() {
        return this;
      }

      /**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined$1;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }

      /**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined$1
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }

      /**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       *
       * // Combining several predicates using `_.overEvery` or `_.overSome`.
       * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
       * // => objects for ['fred', 'barney']
       */
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */
      var find = createFind(findIndex);

      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(findLastIndex);

      /**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      /**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection)
          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
      }

      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */
      var keyBy = createAggregator(function(result, value, key) {
        baseAssignValue(result, key, value);
      });

      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$1 : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }

      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() { return [[], []]; });

      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      /**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      /**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */
      function sampleSize(collection, n, guard) {
        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }

      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 30 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
       */
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */
      var now = ctxNow || function() {
        return root.Date.now();
      };

      /*------------------------------------------------------------------------*/

      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      /**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        n = guard ? undefined$1 : n;
        n = (func && n == null) ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
      }

      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined$1;
          }
          return result;
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });

      /**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });

      /**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      function curry(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;

          lastArgs = lastThis = undefined$1;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;

          return maxing
            ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;

          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
        }

        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined$1;

          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined$1;
          return result;
        }

        function cancel() {
          if (timerId !== undefined$1) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$1;
        }

        function flush() {
          return timerId === undefined$1 ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);

          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined$1) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$1) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });

      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      /**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
      }

      // Expose `MapCache`.
      memoize.Cache = MapCache;

      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0: return !predicate.call(this);
            case 1: return !predicate.call(this, args[0]);
            case 2: return !predicate.call(this, args[0], args[1]);
            case 3: return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }

      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */
      function once(func) {
        return before(2, func);
      }

      /**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */
      var overArgs = castRest(function(func, transforms) {
        transforms = (transforms.length == 1 && isArray(transforms[0]))
          ? arrayMap(transforms[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });

      /**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
      });

      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
      });

      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined$1 ? start : toInteger(start);
        return baseRest(func, start);
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }

      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      /**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */
      function unary(func) {
        return ary(func, 1);
      }

      /**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */
      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other);
      }

      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      var gt = createRelationalOperation(baseGt);

      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
          !propertyIsEnumerable.call(value, 'callee');
      };

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;

      /**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false ||
          (isObjectLike(value) && baseGetTag(value) == boolTag);
      }

      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse;

      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      /**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) &&
            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
              isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      /**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        var result = customizer ? customizer(value, other) : undefined$1;
        return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
      }

      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag ||
          (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
      }

      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      /**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' &&
          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      /**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some
        // ActiveX objects in IE.
        return isNumber(value) && value != +value;
      }

      /**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }

      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }

      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' ||
          (isObjectLike(value) && baseGetTag(value) == numberTag);
      }

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString;
      }

      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      /**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' ||
          (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
      }

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == 'symbol' ||
          (isObjectLike(value) && baseGetTag(value) == symbolTag);
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined$1;
      }

      /**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      /**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      var lt = createRelationalOperation(baseLt);

      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });

      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

        return func(value);
      }

      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = (value < 0 ? -1 : 1);
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }

      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;

        return result === result ? (remainder ? result - remainder : result) : 0;
      }

      /**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : (reIsBadHex.test(value) ? NAN : +value);
      }

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      /**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */
      function toSafeInteger(value) {
        return value
          ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
          : (value === 0 ? value : 0);
      }

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });

      /**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });

      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });

      /**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });

      /**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */
      var at = flatRest(baseAt);

      /**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      /**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var defaults = baseRest(function(object, sources) {
        object = Object(object);

        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined$1;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined$1 ||
                (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });

      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined$1, customDefaultsMerge);
        return apply(mergeWith, undefined$1, args);
      });

      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      /**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */
      function forIn(object, iteratee) {
        return object == null
          ? object
          : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */
      function forInRight(object, iteratee) {
        return object == null
          ? object
          : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      /**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      /**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined$1 : baseGet(object, path);
        return result === undefined$1 ? defaultValue : result;
      }

      /**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */
      var invert = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));

      /**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */
      var invertBy = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);

      /**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */
      var invoke = baseRest(baseInvoke);

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      /**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });

      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });

      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */
      var omit = flatRest(function(object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);
        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result, paths[length]);
        }
        return result;
      });

      /**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      /**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      /**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }

      /**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        path = castPath(path, object);

        var index = -1,
            length = path.length;

        // Ensure the loop is entered when path is empty.
        if (!length) {
          length = 1;
          object = undefined$1;
        }
        while (++index < length) {
          var value = object == null ? undefined$1 : object[toKey(path[index])];
          if (value === undefined$1) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }

      /**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      /**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      /**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */
      var toPairs = createToPairs(keys);

      /**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */
      var toPairsIn = createToPairs(keysIn);

      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

        iteratee = getIteratee(iteratee, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor : [];
          }
          else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
          else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      /**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      /**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      /**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      /**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */
      function clamp(number, lower, upper) {
        if (upper === undefined$1) {
          upper = lower;
          lower = undefined$1;
        }
        if (upper !== undefined$1) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$1) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }

      /**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      /**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$1;
        }
        if (floating === undefined$1) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined$1;
          }
          else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined$1;
          }
        }
        if (lower === undefined$1 && upper === undefined$1) {
          lower = 0;
          upper = 1;
        }
        else {
          lower = toFinite(lower);
          if (upper === undefined$1) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
        }
        return baseRandom(lower, upper);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);

        var length = string.length;
        position = position === undefined$1
          ? length
          : baseClamp(toInteger(position), 0, length);

        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        string = toString(string);
        return (string && reHasUnescapedHtml.test(string))
          ? string.replace(reUnescapedHtml, escapeHtmlChar)
          : string;
      }

      /**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */
      function escapeRegExp(string) {
        string = toString(string);
        return (string && reHasRegExpChar.test(string))
          ? string.replace(reRegExpChar, '\\$&')
          : string;
      }

      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function(result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });

      /**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */
      var lowerCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });

      /**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */
      var lowerFirst = createCaseFirst('toLowerCase');

      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return (
          createPadding(nativeFloor(mid), chars) +
          string +
          createPadding(nativeCeil(mid), chars)
        );
      }

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (string + createPadding(length - strLength, chars))
          : string;
      }

      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (createPadding(length - strLength, chars) + string)
          : string;
      }

      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n, guard) {
        if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }

      /**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */
      function replace() {
        var args = arguments,
            string = toString(args[0]);

        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      /**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined$1;
        }
        limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (
              typeof separator == 'string' ||
              (separator != null && !isRegExp(separator))
            )) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }

      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null
          ? 0
          : baseClamp(toInteger(position), 0, string.length);

        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined$1;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);

        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp(
          (options.escape || reNoMatch).source + '|' +
          interpolate.source + '|' +
          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
          (options.evaluate || reNoMatch).source + '|$'
        , 'g');

        // Use a sourceURL for easier debugging.
        // The sourceURL gets injected into the source that's eval-ed, so be careful
        // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
        // and escape the comment, thus injecting code that gets evaled.
        var sourceURL = '//# sourceURL=' +
          (hasOwnProperty.call(options, 'sourceURL')
            ? (options.sourceURL + '').replace(/\s/g, ' ')
            : ('lodash.templateSources[' + (++templateCounter) + ']')
          ) + '\n';

        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);

          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;

          // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.
          return match;
        });

        source += "';\n";

        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        var variable = hasOwnProperty.call(options, 'variable') && options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Throw an error if a forbidden character was found in `variable`, to prevent
        // potential command injection attacks.
        else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
        }

        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
          .replace(reEmptyStringMiddle, '$1')
          .replace(reEmptyStringTrailing, '$1;');

        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' +
          (variable
            ? ''
            : 'obj || (obj = {});\n'
          ) +
          "var __t, __p = ''" +
          (isEscaping
             ? ', __e = _.escape'
             : ''
          ) +
          (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
          ) +
          source +
          'return __p\n}';

        var result = attempt(function() {
          return Function(importsKeys, sourceURL + 'return ' + source)
            .apply(undefined$1, importsValues);
        });

        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }

      /**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */
      function toLower(value) {
        return toString(value).toLowerCase();
      }

      /**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */
      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return baseTrim(string);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;

        return castSlice(strSymbols, start, end).join('');
      }

      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.slice(0, trimmedEndIndex(string) + 1);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

        return castSlice(strSymbols, 0, end).join('');
      }

      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));

        return castSlice(strSymbols, start).join('');
      }

      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);

        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols
          ? castSlice(strSymbols, 0, end).join('')
          : string.slice(0, end);

        if (separator === undefined$1) {
          return result + omission;
        }
        if (strSymbols) {
          end += (result.length - end);
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while ((match = separator.exec(substring))) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }

      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = toString(string);
        return (string && reHasEscapedHtml.test(string))
          ? string.replace(reEscapedHtml, unescapeHtmlChar)
          : string;
      }

      /**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */
      var upperCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined$1 : pattern;

        if (pattern === undefined$1) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }

      /*------------------------------------------------------------------------*/

      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined$1, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });

      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      /**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();

        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });

        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      /**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function() {
          return value;
        };
      }

      /**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */
      function defaultTo(value, defaultValue) {
        return (value == null || value !== value) ? defaultValue : value;
      }

      /**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();

      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      /**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null &&
            !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);

        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });

        return object;
      }

      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }

      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {
        // No operation performed.
      }

      /**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }

      /**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */
      var over = createOver(arrayMap);

      /**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */
      var overEvery = createOver(arrayEvery);

      /**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       *
       * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
       * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
       */
      var overSome = createOver(arraySome);

      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined$1 : baseGet(object, path);
        };
      }

      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      var range = createRange();

      /**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */
      var rangeRight = createRange(true);

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      /**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */
      function stubObject() {
        return {};
      }

      /**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */
      function stubString() {
        return '';
      }

      /**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */
      function stubTrue() {
        return true;
      }

      /**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);

        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;

        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }

      /**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);

      /**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');

      /**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);

      /**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');

      /**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */
      function max(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseGt)
          : undefined$1;
      }

      /**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */
      function maxBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
          : undefined$1;
      }

      /**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */
      function mean(array) {
        return baseMean(array, identity);
      }

      /**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      /**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */
      function min(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseLt)
          : undefined$1;
      }

      /**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */
      function minBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
          : undefined$1;
      }

      /**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);

      /**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');

      /**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      /**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */
      function sum(array) {
        return (array && array.length)
          ? baseSum(array, identity)
          : 0;
      }

      /**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */
      function sumBy(array, iteratee) {
        return (array && array.length)
          ? baseSum(array, getIteratee(iteratee, 2))
          : 0;
      }

      /*------------------------------------------------------------------------*/

      // Add methods that return wrapped values in chain sequences.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;

      // Add aliases.
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;

      // Add methods to `lodash.prototype`.
      mixin(lodash, lodash);

      /*------------------------------------------------------------------------*/

      // Add methods that return unwrapped values in chain sequences.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;

      // Add aliases.
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;

      mixin(lodash, (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }()), { 'chain': false });

      /*------------------------------------------------------------------------*/

      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */
      lodash.VERSION = VERSION;

      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });

      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

          var result = (this.__filtered__ && !index)
            ? new LazyWrapper(this)
            : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });

      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function(iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });

      // Add `LazyWrapper` methods for `_.head` and `_.last`.
      arrayEach(['head', 'last'], function(methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });

      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
      arrayEach(['initial', 'tail'], function(methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);

        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined$1) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };

      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return (isTaker && chainAll) ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
        };
      });

      // Add `Array` methods to `lodash.prototype`.
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });

      // Map minified method names to their real names.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + '';
          if (!hasOwnProperty.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({ 'name': methodName, 'func': lodashFunc });
        }
      });

      realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined$1
      }];

      // Add methods to `LazyWrapper`.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;

      // Add chain sequence methods to the `lodash` wrapper.
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      // Add lazy aliases.
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    });

    /*--------------------------------------------------------------------------*/

    // Export lodash.
    var _ = runInContext();

    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    }
    else {
      // Export to the global object.
      root._ = _;
    }
  }.call(commonjsGlobal));
  });

  var _TILE_PROBS, _LANDMARKS, _stores, _stores2, _stores3, _stores4, _stores5, _stores6, _stores7, _stores8, _stores9, _stores10;
  var MEDS_HEAL = 20;
  var MEAT_HEAL = 8;
  var items = {
    trap: {
      name: /*#__PURE__*/translate('trap'),
      type: 'building',
      craft: {
        maximum: 10,
        availableMsg: /*#__PURE__*/translate('builder says she can make traps to catch any creatures might still be alive out there'),
        buildMsg: /*#__PURE__*/translate('more traps to catch more creatures'),
        maxMsg: /*#__PURE__*/translate("more traps won't help now"),
        type: 'building',
        cost: function cost(state) {
          var n = state.game.buildings.trap || 0;
          return {
            wood: 10 + n * 10
          };
        }
      }
    },
    cart: {
      name: /*#__PURE__*/translate('cart'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate('builder says she can make a cart for carrying wood'),
        buildMsg: /*#__PURE__*/translate('the rickety cart will carry more wood from the forest'),
        type: 'building',
        cost: function cost() {
          return {
            wood: 30
          };
        }
      }
    },
    hut: {
      name: /*#__PURE__*/translate('hut'),
      type: 'building',
      craft: {
        maximum: 20,
        availableMsg: /*#__PURE__*/translate("builder says there are more wanderers. says they'll work, too."),
        buildMsg: /*#__PURE__*/translate('builder puts up a hut, out in the forest. says word will get around.'),
        maxMsg: /*#__PURE__*/translate('no more room for huts.'),
        type: 'building',
        cost: function cost(state) {
          var n = state.game.buildings.hut || 0;
          return {
            wood: 100 + n * 50
          };
        }
      }
    },
    lodge: {
      name: /*#__PURE__*/translate('lodge'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate('villagers could help hunt, given the means'),
        buildMsg: /*#__PURE__*/translate('the hunting lodge stands in the forest, a ways out of town'),
        type: 'building',
        cost: function cost() {
          return {
            wood: 200,
            fur: 10,
            meat: 5
          };
        }
      }
    },
    trading_post: {
      name: /*#__PURE__*/translate('trading post'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate('a trading post would make commerce easier'),
        buildMsg: /*#__PURE__*/translate('now the nomads have a place to set up shop, they might stick around a while'),
        type: 'building',
        cost: function cost() {
          return {
            wood: 400,
            fur: 100
          };
        }
      }
    },
    tannery: {
      name: /*#__PURE__*/translate('tannery'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate('builder says leather could be useful. says the villagers could make it.'),
        buildMsg: /*#__PURE__*/translate('tannery goes up quick, on the edge of the village'),
        type: 'building',
        cost: function cost() {
          return {
            wood: 500,
            fur: 50
          };
        }
      }
    },
    smokehouse: {
      name: /*#__PURE__*/translate('smokehouse'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate("should cure the meat, or it'll spoil. builder says she can fix something up."),
        buildMsg: /*#__PURE__*/translate('builder finishes the smokehouse. she looks hungry.'),
        type: 'building',
        cost: function cost() {
          return {
            wood: 600,
            meat: 50
          };
        }
      }
    },
    workshop: {
      name: /*#__PURE__*/translate('workshop'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate('builder says she could make finer things, if she had the tools'),
        buildMsg: /*#__PURE__*/translate("workshop's finally ready. builder's excited to get to it"),
        type: 'building',
        cost: function cost() {
          return {
            wood: 800,
            leather: 100,
            scales: 10
          };
        }
      }
    },
    steelworks: {
      name: /*#__PURE__*/translate('steelworks'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate('builder says the villagers could make steel, given the tools'),
        buildMsg: /*#__PURE__*/translate('a haze falls over the village as the steelworks fires up'),
        type: 'building',
        cost: function cost() {
          return {
            wood: 1500,
            iron: 100,
            coal: 100
          };
        }
      }
    },
    armoury: {
      name: /*#__PURE__*/translate('armoury'),
      type: 'building',
      craft: {
        maximum: 1,
        availableMsg: /*#__PURE__*/translate("builder says it'd be useful to have a steady source of bullets"),
        buildMsg: /*#__PURE__*/translate("armoury's done, welcoming back the weapons of the past."),
        type: 'building',
        cost: function cost() {
          return {
            wood: 3000,
            steel: 100,
            sulphur: 50
          };
        }
      }
    },
    torch: {
      name: /*#__PURE__*/translate('torch'),
      type: 'tool',
      craft: {
        type: 'tool',
        buildMsg: /*#__PURE__*/translate('a torch to keep the dark away'),
        cost: function cost() {
          return {
            wood: 1,
            cloth: 1
          };
        }
      }
    },
    waterskin: {
      name: /*#__PURE__*/translate('waterskin'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate("this waterskin'll hold a bit of water, at least"),
        cost: function cost() {
          return {
            leather: 50
          };
        }
      }
    },
    cask: {
      name: /*#__PURE__*/translate('cask'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate('the cask holds enough water for longer expeditions'),
        cost: function cost() {
          return {
            leather: 100,
            iron: 20
          };
        }
      }
    },
    water_tank: {
      name: /*#__PURE__*/translate('water tank'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate('never go thirsty again'),
        cost: function cost() {
          return {
            iron: 100,
            steel: 50
          };
        }
      }
    },
    bone_spear: {
      name: /*#__PURE__*/translate('bone spear'),
      type: 'weapon',
      craft: {
        type: 'weapon',
        buildMsg: /*#__PURE__*/translate("this spear's not elegant, but it's pretty good at stabbing"),
        cost: function cost() {
          return {
            wood: 100,
            teeth: 5
          };
        }
      },
      weapon: {
        verb: /*#__PURE__*/translate('stab'),
        type: 'melee',
        damage: 2,
        cooldown: 2
      }
    },
    rucksack: {
      name: /*#__PURE__*/translate('rucksack'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate('carrying more means longer expeditions to the wilds'),
        cost: function cost() {
          return {
            leather: 200
          };
        }
      }
    },
    wagon: {
      name: /*#__PURE__*/translate('wagon'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate('the wagon can carry a lot of supplies'),
        cost: function cost() {
          return {
            wood: 500,
            iron: 100
          };
        }
      }
    },
    convoy: {
      name: /*#__PURE__*/translate('convoy'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate('the convoy can haul mostly everything'),
        cost: function cost() {
          return {
            wood: 1000,
            iron: 200,
            steel: 100
          };
        }
      }
    },
    l_armour: {
      name: /*#__PURE__*/translate('l armour'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate("leather's not strong. better than rags, though."),
        cost: function cost() {
          return {
            leather: 200,
            scales: 20
          };
        }
      }
    },
    i_armour: {
      name: /*#__PURE__*/translate('i armour'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate("iron's stronger than leather"),
        cost: function cost() {
          return {
            leather: 200,
            iron: 100
          };
        }
      }
    },
    s_armour: {
      name: /*#__PURE__*/translate('s armour'),
      type: 'upgrade',
      craft: {
        type: 'upgrade',
        maximum: 1,
        buildMsg: /*#__PURE__*/translate("steel's stronger than iron"),
        cost: function cost() {
          return {
            leather: 200,
            steel: 100
          };
        }
      }
    },
    iron_sword: {
      name: /*#__PURE__*/translate('iron sword'),
      type: 'weapon',
      craft: {
        type: 'weapon',
        buildMsg: /*#__PURE__*/translate('sword is sharp. good protection out in the wilds.'),
        cost: function cost() {
          return {
            wood: 200,
            leather: 50,
            iron: 20
          };
        }
      },
      weapon: {
        verb: /*#__PURE__*/translate('swing'),
        type: 'melee',
        damage: 4,
        cooldown: 2
      }
    },
    steel_sword: {
      name: /*#__PURE__*/translate('steel sword'),
      type: 'weapon',
      craft: {
        type: 'weapon',
        buildMsg: /*#__PURE__*/translate('the steel is strong, and the blade true.'),
        cost: function cost() {
          return {
            wood: 500,
            leather: 100,
            steel: 20
          };
        }
      },
      weapon: {
        verb: /*#__PURE__*/translate('slash'),
        type: 'melee',
        damage: 6,
        cooldown: 2
      }
    },
    rifle: {
      name: /*#__PURE__*/translate('rifle'),
      type: 'weapon',
      craft: {
        type: 'weapon',
        buildMsg: /*#__PURE__*/translate('black powder and bullets, like the old days.'),
        cost: function cost() {
          return {
            wood: 200,
            steel: 50,
            sulphur: 50
          };
        }
      },
      weapon: {
        verb: /*#__PURE__*/translate('shoot'),
        type: 'ranged',
        damage: 5,
        cooldown: 1,
        cost: {
          bullets: 1
        }
      }
    },
    cured_meat: {
      name: /*#__PURE__*/translate('cured meat'),
      type: 'tool',
      desc: /*#__PURE__*/translate('restores') + ' ' + MEAT_HEAL + ' ' + /*#__PURE__*/translate('hp')
    },
    bullets: {
      name: /*#__PURE__*/translate('bullets'),
      type: 'tool',
      desc: /*#__PURE__*/translate('use with rifle'),
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            scales: 10
          };
        }
      }
    },
    grenade: {
      name: /*#__PURE__*/translate('grenade'),
      type: 'weapon',
      weapon: {
        verb: /*#__PURE__*/translate('lob'),
        type: 'ranged',
        damage: 15,
        cooldown: 5,
        cost: {
          grenade: 1
        }
      },
      trade: {
        type: 'weapon',
        cost: function cost() {
          return {
            scales: 100,
            teeth: 50
          };
        }
      }
    },
    bolas: {
      name: /*#__PURE__*/translate('bolas'),
      type: 'weapon',
      weapon: {
        verb: /*#__PURE__*/translate('tangle'),
        type: 'ranged',
        damage: 'stun',
        cooldown: 15,
        cost: {
          bolas: 1
        }
      },
      trade: {
        type: 'weapon',
        cost: function cost() {
          return {
            teeth: 10
          };
        }
      }
    },
    laser_rifle: {
      name: /*#__PURE__*/translate('laser rifle'),
      type: 'weapon',
      weapon: {
        verb: /*#__PURE__*/translate('blast'),
        type: 'ranged',
        damage: 8,
        cooldown: 1,
        cost: {
          energy_cell: 1
        }
      }
    },
    energy_cell: {
      name: /*#__PURE__*/translate('energy cell'),
      type: 'tool',
      desc: /*#__PURE__*/translate('emits a soft red glow'),
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            scales: 10,
            teeth: 10
          };
        }
      }
    },
    bayonet: {
      name: /*#__PURE__*/translate('bayonet'),
      type: 'weapon',
      weapon: {
        verb: /*#__PURE__*/translate('thrust'),
        type: 'melee',
        damage: 8,
        cooldown: 2
      },
      trade: {
        type: 'weapon',
        cost: function cost() {
          return {
            scales: 500,
            teeth: 250
          };
        }
      }
    },
    charm: {
      name: /*#__PURE__*/translate('charm'),
      type: 'tool'
    },
    medicine: {
      name: /*#__PURE__*/translate('medicine'),
      type: 'tool',
      desc: /*#__PURE__*/translate('restores') + ' ' + MEDS_HEAL + ' ' + /*#__PURE__*/translate('hp'),
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            scales: 50,
            teeth: 30
          };
        }
      }
    },
    wood: {
      name: /*#__PURE__*/translate('wood'),
      type: 'resouce'
    },
    fur: {
      name: /*#__PURE__*/translate('fur'),
      type: 'resouce'
    },
    meat: {
      name: /*#__PURE__*/translate('meat'),
      type: 'resouce'
    },
    iron: {
      name: /*#__PURE__*/translate('iron'),
      type: 'resouce',
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            fur: 150,
            scales: 50
          };
        }
      }
    },
    coal: {
      name: /*#__PURE__*/translate('coal'),
      type: 'resouce',
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            fur: 200,
            teeth: 50
          };
        }
      }
    },
    sulphur: {
      name: /*#__PURE__*/translate('sulphur'),
      type: 'resouce'
    },
    steel: {
      name: /*#__PURE__*/translate('steel'),
      type: 'resouce',
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            fur: 300,
            scales: 50,
            teeth: 50
          };
        }
      }
    },
    scales: {
      name: /*#__PURE__*/translate('scales'),
      type: 'resouce',
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            fur: 150
          };
        }
      }
    },
    teeth: {
      name: /*#__PURE__*/translate('teeth'),
      type: 'resouce',
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            fur: 300
          };
        }
      }
    },
    leather: {
      name: /*#__PURE__*/translate('leather'),
      type: 'resouce'
    },
    bait: {
      name: /*#__PURE__*/translate('bait'),
      type: 'resouce'
    },
    cloth: {
      name: /*#__PURE__*/translate('cloth'),
      type: 'resouce'
    },
    alien_alloy: {
      name: /*#__PURE__*/translate('alien alloy'),
      type: 'resouce',
      trade: {
        type: 'good',
        cost: function cost() {
          return {
            fur: 1500,
            scales: 750,
            teeth: 300
          };
        }
      }
    },
    compass: {
      name: /*#__PURE__*/translate('compass'),
      type: 'prop',
      trade: {
        type: 'special',
        maximum: 1,
        cost: function cost() {
          return {
            fur: 400,
            scales: 20,
            teeth: 10
          };
        }
      }
    },
    fists: {
      name: /*#__PURE__*/translate('fists'),
      type: 'weapon',
      weapon: {
        verb: /*#__PURE__*/translate('punch'),
        type: 'unarmed',
        damage: 1,
        cooldown: 2
      }
    }
  };

  (function (CraftableCategory) {
    CraftableCategory["trap"] = "trap";
    CraftableCategory["cart"] = "cart";
    CraftableCategory["hut"] = "hut";
    CraftableCategory["lodge"] = "lodge";
    CraftableCategory["trading_post"] = "trading_post";
    CraftableCategory["tannery"] = "tannery";
    CraftableCategory["smokehouse"] = "smokehouse";
    CraftableCategory["workshop"] = "workshop";
    CraftableCategory["steelworks"] = "steelworks";
    CraftableCategory["armoury"] = "armoury";
    CraftableCategory["torch"] = "torch";
    CraftableCategory["waterskin"] = "waterskin";
    CraftableCategory["cask"] = "cask";
    CraftableCategory["water_tank"] = "water_tank";
    CraftableCategory["bone_spear"] = "bone_spear";
    CraftableCategory["rucksack"] = "rucksack";
    CraftableCategory["wagon"] = "wagon";
    CraftableCategory["convoy"] = "convoy";
    CraftableCategory["l_armour"] = "l_armour";
    CraftableCategory["i_armour"] = "i_armour";
    CraftableCategory["s_armour"] = "s_armour";
    CraftableCategory["iron_sword"] = "iron_sword";
    CraftableCategory["steel_sword"] = "steel_sword";
    CraftableCategory["rifle"] = "rifle";
  })(exports.CraftableCategory || (exports.CraftableCategory = {}));

  (function (TradeCategory) {
    TradeCategory["scales"] = "scales";
    TradeCategory["teeth"] = "teeth";
    TradeCategory["iron"] = "iron";
    TradeCategory["coal"] = "coal";
    TradeCategory["steel"] = "steel";
    TradeCategory["medicine"] = "medicine";
    TradeCategory["bullets"] = "bullets";
    TradeCategory["energy_cell"] = "energy_cell";
    TradeCategory["bolas"] = "bolas";
    TradeCategory["grenade"] = "grenade";
    TradeCategory["bayonet"] = "bayonet";
    TradeCategory["alien_alloy"] = "alien_alloy";
    TradeCategory["compass"] = "compass";
  })(exports.TradeCategory || (exports.TradeCategory = {}));

  var NonCraftableCategory;

  (function (NonCraftableCategory) {
    NonCraftableCategory["cured_meat"] = "cured_meat";
    NonCraftableCategory["bullets"] = "bullets";
    NonCraftableCategory["grenade"] = "grenade";
    NonCraftableCategory["bolas"] = "bolas";
    NonCraftableCategory["laser_rifle"] = "laser_rifle";
    NonCraftableCategory["energy_cell"] = "energy_cell";
    NonCraftableCategory["bayonet"] = "bayonet";
    NonCraftableCategory["charm"] = "charm";
    NonCraftableCategory["medicine"] = "medicine";
  })(NonCraftableCategory || (NonCraftableCategory = {}));

  (function (WeaponCategory) {
    WeaponCategory["fists"] = "fists";
    WeaponCategory["bone_spear"] = "bone_spear";
    WeaponCategory["iron_sword"] = "iron_sword";
    WeaponCategory["steel_sword"] = "steel_sword";
    WeaponCategory["bayonet"] = "bayonet";
    WeaponCategory["rifle"] = "rifle";
    WeaponCategory["laser_rifle"] = "laser_rifle";
    WeaponCategory["grenade"] = "grenade";
    WeaponCategory["bolas"] = "bolas";
  })(exports.WeaponCategory || (exports.WeaponCategory = {}));

  var Outfits = /*#__PURE__*/Object.keys(_extends({}, NonCraftableCategory, exports.CraftableCategory)).filter(function (key) {
    var item = items[key];
    return item.type === 'tool' || item.type === 'weapon';
  });
  var World_RADIUS = 30;
  var WorldTile = {
    VILLAGE: 'A',
    IRON_MINE: 'I',
    COAL_MINE: 'C',
    SULPHUR_MINE: 'S',
    FOREST: ';',
    FIELD: ',',
    BARRENS: '.',
    ROAD: '#',
    HOUSE: 'H',
    CAVE: 'V',
    TOWN: 'O',
    CITY: 'Y',
    OUTPOST: 'P',
    SHIP: 'W',
    BOREHOLE: 'B',
    BATTLEFIELD: 'F',
    SWAMP: 'M',
    CACHE: 'U'
  };
  var config$1 = {
    items: items,
    Engine: {
      VERSION: 1.3,
      MAX_STORE: 99999999999999,
      SAVE_DISPLAY: 30 * 1000
    },
    World: {
      name: 'World',
      RADIUS: World_RADIUS,
      VILLAGE_POS: [30, 30],
      TILE: WorldTile,
      TILE_PROBS: (_TILE_PROBS = {}, _TILE_PROBS[WorldTile.FOREST] = 0.15, _TILE_PROBS[WorldTile.FIELD] = 0.35, _TILE_PROBS[WorldTile.BARRENS] = 0.5, _TILE_PROBS),
      LANDMARKS: (_LANDMARKS = {}, _LANDMARKS[WorldTile.OUTPOST] = {
        num: 0,
        minRadius: 0,
        maxRadius: 0,
        scene: 'outpost',
        label: /*#__PURE__*/translate('An&nbsp;Outpost')
      }, _LANDMARKS[WorldTile.IRON_MINE] = {
        num: 1,
        minRadius: 5,
        maxRadius: 5,
        scene: 'ironmine',
        label: /*#__PURE__*/translate('Iron&nbsp;Mine')
      }, _LANDMARKS[WorldTile.COAL_MINE] = {
        num: 1,
        minRadius: 10,
        maxRadius: 10,
        scene: 'coalmine',
        label: /*#__PURE__*/translate('Coal&nbsp;Mine')
      }, _LANDMARKS[WorldTile.SULPHUR_MINE] = {
        num: 1,
        minRadius: 20,
        maxRadius: 20,
        scene: 'sulphurmine',
        label: /*#__PURE__*/translate('Sulphur&nbsp;Mine')
      }, _LANDMARKS[WorldTile.HOUSE] = {
        num: 10,
        minRadius: 0,
        maxRadius: World_RADIUS * 1.5,
        scene: 'house',
        label: /*#__PURE__*/translate('An&nbsp;Old&nbsp;House')
      }, _LANDMARKS[WorldTile.CAVE] = {
        num: 5,
        minRadius: 3,
        maxRadius: 10,
        scene: 'cave',
        label: /*#__PURE__*/translate('A&nbsp;Damp&nbsp;Cave')
      }, _LANDMARKS[WorldTile.TOWN] = {
        num: 10,
        minRadius: 10,
        maxRadius: 20,
        scene: 'town',
        label: /*#__PURE__*/translate('An&nbsp;Abandoned&nbsp;Town')
      }, _LANDMARKS[WorldTile.CITY] = {
        num: 20,
        minRadius: 20,
        maxRadius: World_RADIUS * 1.5,
        scene: 'city',
        label: /*#__PURE__*/translate('A&nbsp;Ruined&nbsp;City')
      }, _LANDMARKS[WorldTile.SHIP] = {
        num: 1,
        minRadius: 28,
        maxRadius: 28,
        scene: 'ship',
        label: /*#__PURE__*/translate('A&nbsp;Crashed&nbsp;Starship')
      }, _LANDMARKS[WorldTile.BOREHOLE] = {
        num: 10,
        minRadius: 15,
        maxRadius: World_RADIUS * 1.5,
        scene: 'borehole',
        label: /*#__PURE__*/translate('A&nbsp;Borehole')
      }, _LANDMARKS[WorldTile.BATTLEFIELD] = {
        num: 5,
        minRadius: 18,
        maxRadius: World_RADIUS * 1.5,
        scene: 'battlefield',
        label: /*#__PURE__*/translate('A&nbsp;Battlefield')
      }, _LANDMARKS[WorldTile.SWAMP] = {
        num: 1,
        minRadius: 15,
        maxRadius: World_RADIUS * 1.5,
        scene: 'swamp',
        label: /*#__PURE__*/translate('A&nbsp;Murky&nbsp;Swamp')
      }, _LANDMARKS),
      STICKINESS: 0.5,
      LIGHT_RADIUS: 2,
      BASE_WATER: 10,
      MOVES_PER_FOOD: 2,
      MOVES_PER_WATER: 1,
      DEATH_COOLDOWN: 120,
      FIGHT_CHANCE: 0.2,
      BASE_HEALTH: 10,
      BASE_HIT_CHANCE: 0.8,
      MEAT_HEAL: MEAT_HEAL,
      MEDS_HEAL: MEDS_HEAL,
      FIGHT_DELAY: 3,
      NORTH: [0, -1],
      SOUTH: [0, 1],
      WEST: [-1, 0],
      EAST: [1, 0]
    },
    Room: {
      name: "Room",
      FIRE_COOL_DELAY: 5 * 60 * 1000,
      ROOM_WARM_DELAY: 30 * 1000,
      BUILDER_STATE_DELAY: 0.5 * 60 * 1000,
      STOKE_COOLDOWN: 10,
      NEED_WOOD_DELAY: 15 * 1000,
      MiscItems: ['laser_rifle'],
      FireStatus: {
        Dead: {
          status: 'Dead',
          value: 0,
          text: /*#__PURE__*/translate('dead')
        },
        Smoldering: {
          status: 'Smoldering',
          value: 1,
          text: /*#__PURE__*/translate('smoldering')
        },
        Flickering: {
          status: 'Flickering',
          value: 2,
          text: /*#__PURE__*/translate('flickering')
        },
        Burning: {
          status: 'Burning',
          value: 3,
          text: /*#__PURE__*/translate('burning')
        },
        Roaring: {
          status: 'Roaring',
          value: 4,
          text: /*#__PURE__*/translate('roaring')
        }
      },
      TemperatureStatus: {
        Freezing: {
          value: 0,
          text: /*#__PURE__*/translate('freezing')
        },
        Cold: {
          value: 1,
          text: /*#__PURE__*/translate('cold')
        },
        Mild: {
          value: 2,
          text: /*#__PURE__*/translate('mild')
        },
        Warm: {
          value: 3,
          text: /*#__PURE__*/translate('warm')
        },
        Hot: {
          value: 4,
          text: /*#__PURE__*/translate('hot')
        }
      }
    },
    Event: {
      EVENT_TIME_RANGE: [3, 6],
      PANEL_FADE: 200,
      FIGHT_SPEED: 100,
      EAT_COOLDOWN: 5,
      MEDS_COOLDOWN: 7,
      LEAVE_COOLDOWN: 1,
      STUN_DURATION: 4000
    },
    Outside: {
      name: /*#__PURE__*/translate('Outside'),
      STORES_OFFSET: 0,
      GATHER_DELAY: 60,
      TRAPS_DELAY: 90,
      POP_DELAY: [0.5, 3],
      HUT_ROOM: 4,
      INCOME: {
        gatherer: {
          name: /*#__PURE__*/translate('gatherer'),
          delay: 10,
          stores: (_stores = {}, _stores[exports.StoreCategory.wood] = 1, _stores)
        },
        hunter: {
          name: /*#__PURE__*/translate('hunter'),
          delay: 10,
          stores: (_stores2 = {}, _stores2[exports.StoreCategory.fur] = 0.5, _stores2[exports.StoreCategory.meat] = 0.5, _stores2)
        },
        trapper: {
          name: /*#__PURE__*/translate('trapper'),
          delay: 10,
          stores: (_stores3 = {}, _stores3[exports.StoreCategory.meat] = -1, _stores3[exports.StoreCategory.bait] = 1, _stores3)
        },
        tanner: {
          name: /*#__PURE__*/translate('tanner'),
          delay: 10,
          stores: (_stores4 = {}, _stores4[exports.StoreCategory.fur] = -5, _stores4[exports.StoreCategory.leather] = 1, _stores4)
        },
        charcutier: {
          name: /*#__PURE__*/translate('charcutier'),
          delay: 10,
          stores: (_stores5 = {}, _stores5[exports.StoreCategory.meat] = -5, _stores5[exports.StoreCategory.wood] = -5, _stores5[exports.StoreCategory.cured_meat] = 1, _stores5)
        },
        iron_miner: {
          name: /*#__PURE__*/translate('iron miner'),
          delay: 10,
          stores: (_stores6 = {}, _stores6[exports.StoreCategory.cured_meat] = -1, _stores6[exports.StoreCategory.iron] = 1, _stores6)
        },
        coal_miner: {
          name: /*#__PURE__*/translate('coal miner'),
          delay: 10,
          stores: (_stores7 = {}, _stores7[exports.StoreCategory.cured_meat] = -1, _stores7[exports.StoreCategory.coal] = 1, _stores7)
        },
        sulphur_miner: {
          name: /*#__PURE__*/translate('sulphur miner'),
          delay: 10,
          stores: (_stores8 = {}, _stores8[exports.StoreCategory.cured_meat] = -1, _stores8[exports.StoreCategory.sulphur] = 1, _stores8)
        },
        steelworker: {
          name: /*#__PURE__*/translate('steelworker'),
          delay: 10,
          stores: (_stores9 = {}, _stores9[exports.StoreCategory.iron] = -1, _stores9[exports.StoreCategory.coal] = -1, _stores9[exports.StoreCategory.steel] = 1, _stores9)
        },
        armourer: {
          name: /*#__PURE__*/translate('armourer'),
          delay: 10,
          stores: (_stores10 = {}, _stores10[exports.StoreCategory.steel] = -1, _stores10[exports.StoreCategory.sulphur] = -1, _stores10[exports.StoreCategory.bullets] = 1, _stores10)
        }
      },
      TrapDrops: [{
        rollUnder: 0.5,
        name: 'fur',
        message: /*#__PURE__*/translate('scraps of fur')
      }, {
        rollUnder: 0.75,
        name: 'meat',
        message: /*#__PURE__*/translate('bits of meat')
      }, {
        rollUnder: 0.85,
        name: 'scales',
        message: /*#__PURE__*/translate('strange scales')
      }, {
        rollUnder: 0.93,
        name: 'teeth',
        message: /*#__PURE__*/translate('scattered teeth')
      }, {
        rollUnder: 0.995,
        name: 'cloth',
        message: /*#__PURE__*/translate('tattered cloth')
      }, {
        rollUnder: 1.0,
        name: 'charm',
        message: /*#__PURE__*/translate('a crudely made charm')
      }]
    },
    Path: {
      DEFAULT_BAG_SPACE: 10,
      STORES_OFFSET: 0,
      // Everything not in this list weighs 1
      Weight: {
        bone_spear: 2,
        iron_sword: 3,
        steel_sword: 5,
        rifle: 5,
        bullets: 0.1,
        energy_cell: 0.2,
        laser_rifle: 5,
        bolas: 0.5
      },
      name: /*#__PURE__*/translate('A Dusty Path'),
      Outfit: Outfits
    },
    Ship: {
      LIFTOFF_COOLDOWN: 120,
      ALLOY_PER_HULL: 1,
      ALLOY_PER_THRUSTER: 1,
      BASE_HULL: 0,
      BASE_THRUSTERS: 1,
      name: /*#__PURE__*/translate('Ship')
    },
    Space: {
      SHIP_SPEED: 3,
      BASE_ASTEROID_DELAY: 500,
      BASE_ASTEROID_SPEED: 1500,
      FTB_SPEED: 60000,
      STAR_WIDTH: 3000,
      STAR_HEIGHT: 3000,
      NUM_STARS: 200,
      STAR_SPEED: 60000,
      FRAME_DELAY: 100
    },
    Prestige: {
      storesMap: [{
        store: exports.StoreCategory.wood,
        type: 'g'
      }, {
        store: exports.StoreCategory.fur,
        type: 'g'
      }, {
        store: exports.StoreCategory.meat,
        type: 'g'
      }, {
        store: exports.StoreCategory.iron,
        type: 'g'
      }, {
        store: exports.StoreCategory.coal,
        type: 'g'
      }, {
        store: exports.StoreCategory.sulphur,
        type: 'g'
      }, {
        store: exports.StoreCategory.steel,
        type: 'g'
      }, {
        store: exports.StoreCategory.cured_meat,
        type: 'g'
      }, {
        store: exports.StoreCategory.scales,
        type: 'g'
      }, {
        store: exports.StoreCategory.teeth,
        type: 'g'
      }, {
        store: exports.StoreCategory.leather,
        type: 'g'
      }, {
        store: exports.StoreCategory.bait,
        type: 'g'
      }, {
        store: exports.StoreCategory.torch,
        type: 'g'
      }, {
        store: exports.StoreCategory.cloth,
        type: 'g'
      }, {
        store: exports.StoreCategory.bone_spear,
        type: 'w'
      }, {
        store: exports.StoreCategory.iron_sword,
        type: 'w'
      }, {
        store: exports.StoreCategory.steel_sword,
        type: 'w'
      }, {
        store: exports.StoreCategory.bayonet,
        type: 'w'
      }, {
        store: exports.StoreCategory.rifle,
        type: 'w'
      }, {
        store: exports.StoreCategory.laser_rifle,
        type: 'w'
      }, {
        store: exports.StoreCategory.bullets,
        type: 'a'
      }, {
        store: exports.StoreCategory.energy_cell,
        type: 'a'
      }, {
        store: exports.StoreCategory.grenade,
        type: 'a'
      }, {
        store: exports.StoreCategory.bolas,
        type: 'a'
      }]
    }
  };

  function getDefaultValue(v) {
    var defaultValue = 0;

    if (typeof v === 'boolean') {
      defaultValue = false;
    } else if (typeof v === 'string') {
      defaultValue = '';
    } else if (v === null) {
      defaultValue = null;
    }

    return defaultValue;
  }

  function _clean(obj, prop) {
    if (!prop) {
      return Object.keys(obj).forEach(function (key) {
        _clean(obj, key);
      });
    }

    var value = lodash.get(obj, prop);

    if (lodash.isObject(value)) {
      if (lodash.isEmpty(value)) {
        delete obj[prop];
      }

      for (var i in value) {
        _clean(value[i], i);
      }
    }
  }

  var numberValueModify = {
    clean: function clean(state, action) {
      _clean(state, action.payload);
    },
    removeM: function removeM(state, action) {
      action.payload.forEach(function (key) {
        lodash.unset(state, key);
      });
    },
    set: function set(_, action) {
      var defaultValue = getDefaultValue(action.payload);
      return action.payload || defaultValue;
    },
    setM: function setM(state, action) {
      for (var key in action.payload) {
        if (typeof action.payload[key] === 'undefined') {
          lodash.set(state, key, undefined);
        } else {
          var defaultValue = getDefaultValue(action.payload[key]);

          lodash.set(state, key, action.payload[key] || defaultValue);
        }
      }
    },
    addM: function addM(state, action) {
      for (var key in action.payload) {
        lodash.set(state, key, Math.min(Math.max(lodash.get(state, key, 0) + (action.payload[key] || 0), 0), config$1.Engine.MAX_STORE));
      }
    }
  };

  function getInitialState() {
    var rtn = Object.values(exports.StoreCategory).reduce(function (p, c) {
      p[c] = undefined;
      return p;
    }, {});
    return rtn;
  }
  var storesSlice = /*#__PURE__*/createSlice({
    name: 'stores',
    initialState: /*#__PURE__*/getInitialState(),
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$4 = storesSlice.actions;
  var stores = storesSlice.reducer;

  var slice$1 = /*#__PURE__*/createSlice({
    name: 'fire',
    initialState: {
      status: config$1.Room.FireStatus.Dead
    },
    reducers: {
      changeFire: function changeFire(state, action) {
        state.status = action.payload;
      }
    }
  });
  var actions$5 = /*#__PURE__*/_extends({}, slice$1.actions);
  var fire = slice$1.reducer;

  var slice$2 = /*#__PURE__*/createSlice({
    name: 'builder',
    initialState: {
      level: -1
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$6 = slice$2.actions;
  var builder = slice$2.reducer;

  var slice$3 = /*#__PURE__*/createSlice({
    name: 'temperature',
    initialState: {
      status: config$1.Room.TemperatureStatus.Freezing
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify, {
      change: function change(state, action) {
        state.status = action.payload;
      }
    })
  });
  var actions$7 = slice$3.actions;
  var temperature = slice$3.reducer;

  var slice$4 = /*#__PURE__*/createSlice({
    name: 'thieves',
    initialState: 0,
    reducers: /*#__PURE__*/_extends({}, numberValueModify, {
      change: function change(_, action) {
        return action.payload;
      }
    })
  });
  var actions$8 = slice$4.actions;
  var thieves = slice$4.reducer;

  var slice$5 = /*#__PURE__*/createSlice({
    name: 'stolen',
    initialState: /*#__PURE__*/getInitialState(),
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$9 = slice$5.actions;
  var stolen = slice$5.reducer;

  var slice$6 = /*#__PURE__*/createSlice({
    name: 'stores',
    initialState: {},
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$a = slice$6.actions;
  var buildings = slice$6.reducer;

  var slice$7 = /*#__PURE__*/createSlice({
    name: 'population',
    initialState: {
      value: 0
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$b = slice$7.actions;
  var population = slice$7.reducer;

  var slice$8 = /*#__PURE__*/createSlice({
    name: 'workers',
    initialState: {},
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$c = slice$8.actions;
  var workers = slice$8.reducer;

  var slice$9 = /*#__PURE__*/createSlice({
    name: 'city',
    initialState: {
      cleared: false
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$d = slice$9.actions;
  var city = slice$9.reducer;

  var slice$a = /*#__PURE__*/createSlice({
    name: 'world',
    initialState: {
      seenAll: false,
      mask: [],
      map: [],
      enableShip: false,
      ship: [0, 0],
      dir: '',
      sulphurmine: false,
      ironmine: false,
      coalmine: false,
      water: 0,
      danger: false,
      foodMove: 0,
      waterMove: 0,
      starvation: false,
      thirst: false,
      usedOutposts: {},
      curPos: /*#__PURE__*/lodash.cloneDeep(config$1.World.VILLAGE_POS),
      health: 0,
      dead: false,
      fightMove: 0,
      outfit: {},
      stunned: 0
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify, {
      seeAll: function seeAll(state, action) {
        state.seenAll = action.payload;
      },
      visit: function visit(state, action) {
        var _action$payload = action.payload,
            x = _action$payload.x,
            y = _action$payload.y;
        state.map[x][y] = state.map[x][y].replace('!') + '!';
      },
      useOutpost: function useOutpost(state) {
        state.usedOutposts[state.curPos[0] + ',' + state.curPos[1]] = true;
      },
      setMap: function setMap(state, action) {
        var _action$payload2 = action.payload,
            pos = _action$payload2.pos,
            value = _action$payload2.value;
        state.map[pos[0]][pos[1]] = value;
      }
    })
  });
  var actions$e = /*#__PURE__*/_extends({}, slice$a.actions);
  var world = slice$a.reducer;

  var slice$b = /*#__PURE__*/createSlice({
    name: 'space_ship',
    initialState: {
      hull: 0,
      thrusters: 1,
      seenShip: false,
      seenWarning: false
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$f = slice$b.actions;
  var spaceShip = slice$b.reducer;

  var slice$c = /*#__PURE__*/createSlice({
    name: 'outside',
    initialState: {
      seenForest: false
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$g = slice$c.actions;
  var outside = slice$c.reducer;

  var game = /*#__PURE__*/combineReducers({
    fire: fire,
    builder: builder,
    temperature: temperature,
    thieves: thieves,
    stolen: stolen,
    buildings: buildings,
    population: population,
    workers: workers,
    city: city,
    world: world,
    spaceShip: spaceShip,
    outside: outside
  });
  var actions$h = {
    fire: actions$5,
    builder: actions$6,
    temperature: actions$7,
    thieves: actions$8,
    stolen: actions$9,
    buildings: actions$a,
    population: actions$b,
    workers: actions$c,
    city: actions$d,
    world: actions$e,
    spaceShip: actions$f,
    outside: actions$g
  };

  var notify = /*#__PURE__*/createAsyncThunk('notifications/notify', /*#__PURE__*/function () {
    var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data, _ref) {
      var getState, appState, _data$message, text, module;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              getState = _ref.getState;
              appState = getState();
              _data$message = data.message, text = _data$message.text, module = _data$message.module;

              if (text.slice(-1) != '.') {
                text += '.';
              }

              if (!(module && appState.engine.activeSpace != module)) {
                _context.next = 9;
                break;
              }

              if (data.noQueue) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", data.message);

            case 7:
              _context.next = 10;
              break;

            case 9:
              return _context.abrupt("return", _extends({}, data.message, {
                _module: data.message.module,
                module: 'global'
              }));

            case 10:
              return _context.abrupt("return", null);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  var storesSlice$1 = /*#__PURE__*/createSlice({
    name: 'notifications',
    initialState: {
      notifyQueue: {
        global: []
      }
    },
    reducers: {
      spaceNotify: function spaceNotify(state, action) {
        var queue = state.notifyQueue[action.payload] || [];
        state.notifyQueue[action.payload] = [];
        queue.forEach(function (message) {
          message._module = message.module;
          message.module = 'global';
        });
        state.notifyQueue['global'] = [].concat(state.notifyQueue['global'], queue);
      }
    },
    extraReducers: function extraReducers(builder) {
      builder.addCase(notify.fulfilled, function (state, action) {
        var message = action.payload;

        if (message) {
          var module = message.module || 'global';

          if (!state.notifyQueue[module]) {
            state.notifyQueue[module] = [];
          }

          state.notifyQueue[module].push(message);
        }
      });
    }
  });
  var actions$i = /*#__PURE__*/_extends({}, storesSlice$1.actions, {
    notify: notify
  });
  var notifications = storesSlice$1.reducer;

  var changeSpace = /*#__PURE__*/createAsyncThunk('engine/changeSapce', /*#__PURE__*/function () {
    var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(space, _ref) {
      var getState, dispatch, appState, prevSpace;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              getState = _ref.getState, dispatch = _ref.dispatch;
              appState = getState();
              prevSpace = appState.engine.activeSpace;

              if (prevSpace !== space) {
                dispatch(actions$i.spaceNotify(space));
              }

              return _context.abrupt("return", space);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  var configSlice$1 = /*#__PURE__*/createSlice({
    name: 'engine',
    initialState: {
      activeSubSpace: ''
    },
    reducers: {
      changeSubSpace: function changeSubSpace(state, action) {
        state.activeSubSpace = action.payload;
      }
    },
    extraReducers: function extraReducers(builder) {
      builder.addCase(changeSpace.fulfilled, function (state, action) {
        state.activeSpace = action.payload;
      });
    }
  });
  var actions$j = /*#__PURE__*/_extends({}, configSlice$1.actions, {
    changeSpace: changeSpace
  });
  var engine = configSlice$1.reducer;

  var slice$d = /*#__PURE__*/createSlice({
    name: 'income',
    initialState: {},
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$k = slice$d.actions;
  var income = slice$d.reducer;

  function getInitialState$1() {
    return Object.keys(Perks).reduce(function (accumulator, current) {
      accumulator[current] = false;
      return accumulator;
    }, {});
  }
  var addPerk = /*#__PURE__*/createAsyncThunk('character/perks/add', /*#__PURE__*/function () {
    var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(category, _ref) {
      var dispatch, perk;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              dispatch = _ref.dispatch;
              perk = Perks[category];
              dispatch(actions$i.notify({
                message: {
                  text: perk.notify
                }
              }));
              return _context.abrupt("return", category);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  var slice$e = /*#__PURE__*/createSlice({
    name: 'perks',
    initialState: /*#__PURE__*/getInitialState$1(),
    reducers: {},
    extraReducers: function extraReducers(builder) {
      builder.addCase(addPerk.fulfilled, function (state, action) {
        state[action.payload] = true;
      });
    }
  });
  var actions$l = /*#__PURE__*/_extends({}, slice$e.actions, {
    addPerk: addPerk
  });
  var perks = slice$e.reducer;

  var slice$f = /*#__PURE__*/createSlice({
    name: 'statistics',
    initialState: {
      punches: 0,
      starved: 0,
      dehydrated: 0,
      cityCleared: false
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$m = /*#__PURE__*/_extends({}, slice$f.actions);
  var statistics = slice$f.reducer;

  var character = /*#__PURE__*/combineReducers({
    perks: perks,
    statistics: statistics
  });
  var actions$n = {
    perks: actions$l,
    statistics: actions$m
  };

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  var storesSlice$2 = /*#__PURE__*/createSlice({
    name: 'events',
    initialState: {
      eventStack: [],
      activeScene: '',
      delay: {},
      loot: {},
      enemys: [],
      won: false,
      fightEvents: []
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify, {
      end: function end(state, _) {
        state.eventStack.shift();
        state.activeScene = '';
        state.enemys = [];
        state.won = false;
        state.fightEvents = [];
      },
      cleanEnemys: function cleanEnemys(state) {
        state.enemys = [];
        state.won = false;
        state.fightEvents = [];
      },
      logFight: function logFight(state, action) {
        if (!state.fightEvents) {
          state.fightEvents = [];
        }

        state.fightEvents.push(_extends({}, action.payload, {
          id: uuidv4()
        }));
      },
      push: function push(state, action) {
        state.eventStack.unshift(action.payload);
      },
      setSceneEnemy: function setSceneEnemy(state, action) {
        var scene = action.payload;
        state.enemys = [{
          chara: scene.chara,
          health: scene.health,
          maxHealth: scene.health,
          stunned: 0
        }];
        state.fightEvents = [];
        state.won = false;
      },
      winFight: function winFight(state) {
        state.won = true;
      }
    })
  });
  var actions$o = /*#__PURE__*/_extends({}, storesSlice$2.actions);
  var events = storesSlice$2.reducer;

  var storesSlice$3 = /*#__PURE__*/createSlice({
    name: 'previous',
    initialState: {
      stores: [],
      score: 0
    },
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$p = /*#__PURE__*/_extends({}, storesSlice$3.actions);
  var previous = storesSlice$3.reducer;

  var slice$g = /*#__PURE__*/createSlice({
    name: 'room',
    initialState: {
      changed: true,
      crafts: {},
      buys: {}
    },
    reducers: {
      setChanged: function setChanged(state, action) {
        state.changed = action.payload;
      },
      addCraft: function addCraft(state, action) {
        var name = action.payload.name;
        state.crafts[name] = true;
      },
      addBuy: function addBuy(state, action) {
        var name = action.payload.name;
        state.buys[name] = true;
      }
    }
  });
  var actions$q = slice$g.actions;
  var room = slice$g.reducer;

  var slice$h = /*#__PURE__*/createSlice({
    name: 'outfit',
    initialState: {},
    reducers: /*#__PURE__*/_extends({}, numberValueModify, {
      empty: function empty() {
        return {};
      }
    })
  });
  var actions$r = slice$h.actions;
  var outfit = slice$h.reducer;

  var path = /*#__PURE__*/combineReducers({
    outfit: outfit
  });
  var actions$s = {
    outfit: actions$r
  };

  var slice$i = /*#__PURE__*/createSlice({
    name: 'delay',
    initialState: {},
    reducers: /*#__PURE__*/_extends({}, numberValueModify)
  });
  var actions$t = /*#__PURE__*/_extends({}, slice$i.actions);
  var delay = slice$i.reducer;

  var record = /*#__PURE__*/createAsyncThunk('operation/record', /*#__PURE__*/function () {
    var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(opt, _ref) {
      var extra, now, cooldown;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              extra = _ref.extra;
              now = Date.now();
              cooldown = opt.cooldown ? opt.cooldown(extra.engine, opt) : 0;
              return _context.abrupt("return", {
                lastExecTime: now,
                id: opt.id,
                cooldown: cooldown,
                cooldownAt: now + cooldown * 1000
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  var slice$j = /*#__PURE__*/createSlice({
    name: 'operation',
    initialState: {},
    reducers: {
      clearCooldown: function clearCooldown(state, action) {
        var id = action.payload;
        var history = state[id];

        if (history) {
          state[id].cooldownAt = 0;
        }
      }
    },
    extraReducers: function extraReducers(builder) {
      builder.addCase(record.fulfilled, function (state, action) {
        var history = action.payload;
        state[history.id] = history;
      });
    }
  });
  var actions$u = /*#__PURE__*/_extends({}, slice$j.actions, {
    record: record
  });
  var operation = slice$j.reducer;

  var reducer = /*#__PURE__*/combineReducers({
    room: room,
    marketing: marketing,
    config: config,
    features: features,
    stores: stores,
    game: game,
    engine: engine,
    income: income,
    character: character,
    events: events,
    notifications: notifications,
    previous: previous,
    path: path,
    delay: delay,
    operation: operation
  });
  var actions$v = {
    config: actions$1,
    stores: actions$4,
    game: actions$h,
    engine: actions$j,
    income: actions$k,
    character: actions$n,
    marketing: actions,
    events: actions$o,
    notifications: actions$i,
    previous: actions$p,
    features: actions$3,
    room: actions$q,
    path: actions$s,
    delay: actions$t,
    operation: actions$u
  };

  var reduxLogger = createCommonjsModule(function (module, exports) {
  !function(e,t){t(exports);}(commonjsGlobal,function(e){function t(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}});}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0});}function n(e,t,r){n.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:r,enumerable:!0});}function o(e,t){o.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0});}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0});}function a(e,t,r){a.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:r,enumerable:!0});}function f(e,t,r){var n=e.slice((r||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,n),e}function u(e){var t="undefined"==typeof e?"undefined":N(e);return "object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,r,c,s,d,p){s=s||[],p=p||[];var g=s.slice(0);if("undefined"!=typeof d){if(c){if("function"==typeof c&&c(g,d))return;if("object"===("undefined"==typeof c?"undefined":N(c))){if(c.prefilter&&c.prefilter(g,d))return;if(c.normalize){var h=c.normalize(g,d,e,t);h&&(e=h[0],t=h[1]);}}}g.push(d);}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var y="undefined"==typeof e?"undefined":N(e),v="undefined"==typeof t?"undefined":N(t),b="undefined"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),m="undefined"!==v||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!b&&m)r(new o(g,t));else if(!m&&b)r(new i(g,e));else if(u(e)!==u(t))r(new n(g,e,t));else if("date"===u(e)&&e-t!==0)r(new n(g,e,t));else if("object"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&r(new n(g,e,t));else {if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;for(w=0;w<e.length;w++)w>=t.length?r(new a(g,w,new i(void 0,e[w]))):l(e[w],t[w],r,c,g,w,p);for(;w<t.length;)r(new a(g,w,new o(void 0,t[w++])));}else {var x=Object.keys(e),S=Object.keys(t);x.forEach(function(n,o){var i=S.indexOf(n);i>=0?(l(e[n],t[n],r,c,g,n,p),S=f(S,i)):l(e[n],void 0,r,c,g,n,p);}),S.forEach(function(e){l(void 0,t[e],r,c,g,e,p);});}p.length=p.length-1;}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||r(new n(g,e,t)));}function c(e,t,r,n){return n=n||[],l(e,t,function(e){e&&n.push(e);},r),n.length?n:void 0}function s(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":s(o[r.path[n]],r.index,r.item);break;case"D":delete o[r.path[n]];break;case"E":case"N":o[r.path[n]]=r.rhs;}}else switch(r.kind){case"A":s(e[t],r.index,r.item);break;case"D":e=f(e,t);break;case"E":case"N":e[t]=r.rhs;}return e}function d(e,t,r){if(e&&t&&r&&r.kind){for(var n=e,o=-1,i=r.path?r.path.length-1:0;++o<i;)"undefined"==typeof n[r.path[o]]&&(n[r.path[o]]="number"==typeof r.path[o]?[]:{}),n=n[r.path[o]];switch(r.kind){case"A":s(r.path?n[r.path[o]]:n,r.index,r.item);break;case"D":delete n[r.path[o]];break;case"E":case"N":n[r.path[o]]=r.rhs;}}}function p(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":p(o[r.path[n]],r.index,r.item);break;case"D":o[r.path[n]]=r.lhs;break;case"E":o[r.path[n]]=r.lhs;break;case"N":delete o[r.path[n]];}}else switch(r.kind){case"A":p(e[t],r.index,r.item);break;case"D":e[t]=r.lhs;break;case"E":e[t]=r.lhs;break;case"N":e=f(e,t);}return e}function g(e,t,r){if(e&&t&&r&&r.kind){var n,o,i=e;for(o=r.path.length-1,n=0;n<o;n++)"undefined"==typeof i[r.path[n]]&&(i[r.path[n]]={}),i=i[r.path[n]];switch(r.kind){case"A":p(i[r.path[n]],r.index,r.item);break;case"D":i[r.path[n]]=r.lhs;break;case"E":i[r.path[n]]=r.lhs;break;case"N":delete i[r.path[n]];}}}function h(e,t,r){if(e&&t){var n=function(n){r&&!r(e,t,n)||d(e,t,n);};l(e,t,n);}}function y(e){return "color: "+F[e].color+"; font-weight: bold"}function v(e){var t=e.kind,r=e.path,n=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return [r.join("."),n,"→",o];case"N":return [r.join("."),o];case"D":return [r.join(".")];case"A":return [r.join(".")+"["+i+"]",a];default:return []}}function b(e,t,r,n){var o=c(e,t);try{n?r.groupCollapsed("diff"):r.group("diff");}catch(e){r.log("diff");}o?o.forEach(function(e){var t=e.kind,n=v(e);r.log.apply(r,["%c "+F[t].text,y(t)].concat(P(n)));}):r.log("—— no diff ——");try{r.groupEnd();}catch(e){r.log("—— diff end —— ");}}function m(e,t,r,n){switch("undefined"==typeof e?"undefined":N(e)){case"object":return "function"==typeof e[n]?e[n].apply(e,P(r)):e[n];case"function":return e(t);default:return e}}function w(e){var t=e.timestamp,r=e.duration;return function(e,n,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+n),r&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}function x(e,t){var r=t.logger,n=t.actionTransformer,o=t.titleFormatter,i=void 0===o?w(t):o,a=t.collapsed,f=t.colors,u=t.level,l=t.diff,c="undefined"==typeof t.titleFormatter;e.forEach(function(o,s){var d=o.started,p=o.startedTime,g=o.action,h=o.prevState,y=o.error,v=o.took,w=o.nextState,x=e[s+1];x&&(w=x.prevState,v=x.started-d);var S=n(g),k="function"==typeof a?a(function(){return w},g,o):a,j=D(p),E=f.title?"color: "+f.title(S)+";":"",A=["color: gray; font-weight: lighter;"];A.push(E),t.timestamp&&A.push("color: gray; font-weight: lighter;"),t.duration&&A.push("color: gray; font-weight: lighter;");var O=i(S,j,v);try{k?f.title&&c?r.groupCollapsed.apply(r,["%c "+O].concat(A)):r.groupCollapsed(O):f.title&&c?r.group.apply(r,["%c "+O].concat(A)):r.group(O);}catch(e){r.log(O);}var N=m(u,S,[h],"prevState"),P=m(u,S,[S],"action"),C=m(u,S,[y,h],"error"),F=m(u,S,[w],"nextState");if(N)if(f.prevState){var L="color: "+f.prevState(h)+"; font-weight: bold";r[N]("%c prev state",L,h);}else r[N]("prev state",h);if(P)if(f.action){var T="color: "+f.action(S)+"; font-weight: bold";r[P]("%c action    ",T,S);}else r[P]("action    ",S);if(y&&C)if(f.error){var M="color: "+f.error(y,h)+"; font-weight: bold;";r[C]("%c error     ",M,y);}else r[C]("error     ",y);if(F)if(f.nextState){var _="color: "+f.nextState(w)+"; font-weight: bold";r[F]("%c next state",_,w);}else r[F]("next state",w);l&&b(h,w,r,k);try{r.groupEnd();}catch(e){r.log("—— log end ——");}});}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},L,e),r=t.logger,n=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,f=t.diffPredicate;if("undefined"==typeof r)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var u=[];return function(e){var r=e.getState;return function(e){return function(l){if("function"==typeof i&&!i(r,l))return e(l);var c={};u.push(c),c.started=O.now(),c.startedTime=new Date,c.prevState=n(r()),c.action=l;var s=void 0;if(a)try{s=e(l);}catch(e){c.error=o(e);}else s=e(l);c.took=O.now()-c.started,c.nextState=n(r());var d=t.diff&&"function"==typeof f?f(r,l):t.diff;if(x(u,Object.assign({},t,{diff:d})),u.length=0,c.error)throw c.error;return s}}}}var k,j,E=function(e,t){return new Array(t+1).join(e)},A=function(e,t){return E("0",t-e.toString().length)+e},D=function(e){return A(e.getHours(),2)+":"+A(e.getMinutes(),2)+":"+A(e.getSeconds(),2)+"."+A(e.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},C=[];k="object"===("undefined"==typeof commonjsGlobal?"undefined":N(commonjsGlobal))&&commonjsGlobal?commonjsGlobal:"undefined"!=typeof window?window:{},j=k.DeepDiff,j&&C.push(function(){"undefined"!=typeof j&&k.DeepDiff===c&&(k.DeepDiff=j,j=void 0);}),t(n,r),t(o,r),t(i,r),t(a,r),Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:h,enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:g,enumerable:!0},isConflict:{value:function(){return "undefined"!=typeof j},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e();}),C=null),c},enumerable:!0}});var F={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},L={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return "inherit"},prevState:function(){return "#9E9E9E"},action:function(){return "#03A9F4"},nextState:function(){return "#4CAF50"},error:function(){return "#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,r=e.getState;return "function"==typeof t||"function"==typeof r?S()({dispatch:t,getState:r}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=L,e.createLogger=S,e.logger=T,e.default=T,Object.defineProperty(e,"__esModule",{value:!0});});
  });

  var logger = unwrapExports(reduxLogger);

  var moddles = [];

  {
    moddles.push(logger);
  }

  function createState(engine, state) {
    var store = configureStore({
      reducer: reducer,
      preloadedState: state,
      middleware: function middleware(getDefaultMiddleware) {
        return getDefaultMiddleware({
          thunk: {
            extraArgument: {
              engine: engine
            }
          }
        }).concat(moddles);
      }
    });
    return store;
  }

  var enable = false;
  function config$2(options) {
    enable = options.enable || false;
  }
  function log() {
    var _console;

    if (!enable) {
      return;
    }

    (_console = console).log.apply(_console, arguments);
  }

  var events$1 = [{
    title: /*#__PURE__*/translate('The Thief'),
    isAvailable: function isAvailable(state) {
      return (state.engine.activeSpace === exports.GameSpace.Room || state.engine.activeSpace === exports.GameSpace.Outside) && state.game.thieves === 1;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('the villagers haul a filthy man out of the store room.'), /*#__PURE__*/translate('say his folk have been skimming the supplies.'), /*#__PURE__*/translate('say he should be strung up as an example.')],
        notification: /*#__PURE__*/translate('a thief is caught'),
        blink: true,
        buttons: {
          kill: {
            text: /*#__PURE__*/translate('hang him'),
            nextScene: {
              1: 'hang'
            }
          },
          spare: {
            text: /*#__PURE__*/translate('spare him'),
            nextScene: {
              1: 'spare'
            }
          }
        }
      },
      hang: {
        text: [/*#__PURE__*/translate('the villagers hang the thief high in front of the store room.'), /*#__PURE__*/translate('the point is made. in the next few days, the missing supplies are returned.')],
        onLoad: function onLoad(engine) {
          var _engine$store, _engine$store2, _engine$store3, _engine$store4;

          (_engine$store = engine.store) == null ? void 0 : _engine$store.dispatch(engine.actions.game.thieves.set(2));
          (_engine$store2 = engine.store) == null ? void 0 : _engine$store2.dispatch(engine.actions.income.setM({
            thieves: 0
          }));
          (_engine$store3 = engine.store) == null ? void 0 : _engine$store3.dispatch(engine.actions.stores.addM((_engine$store4 = engine.store) == null ? void 0 : _engine$store4.getState().game.stolen));
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('leave'),
            nextScene: 'end'
          }
        }
      },
      spare: {
        text: [/*#__PURE__*/translate("the man says he's grateful. says he won't come around any more."), /*#__PURE__*/translate('shares what he knows about sneaking before he goes.')],
        onLoad: function onLoad(engine) {
          var _engine$store5, _engine$store6, _engine$store7;

          (_engine$store5 = engine.store) == null ? void 0 : _engine$store5.dispatch(engine.actions.game.thieves.set(2));
          (_engine$store6 = engine.store) == null ? void 0 : _engine$store6.dispatch(engine.actions.income.setM({
            thieves: 0
          }));
          (_engine$store7 = engine.store) == null ? void 0 : _engine$store7.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.stealthy));
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('leave'),
            nextScene: 'end'
          }
        }
      }
    }
  }];

  var events$2 = [{
    /* The Nomad  --  Merchant */
    title: /*#__PURE__*/translate('The Nomad'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && !!state.stores.fur;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a nomad shuffles into view, laden with makeshift bags bound with rough twine.'), /*#__PURE__*/translate("won't say from where he came, but it's clear that he's not staying.")],
        notification: /*#__PURE__*/translate('a nomad arrives, looking to trade'),
        blink: true,
        buttons: {
          buyScales: {
            text: /*#__PURE__*/translate('buy scales'),
            cost: {
              fur: 100
            },
            reward: {
              scales: 1
            }
          },
          buyTeeth: {
            text: /*#__PURE__*/translate('buy teeth'),
            cost: {
              fur: 200
            },
            reward: {
              teeth: 1
            }
          },
          buyBait: {
            text: /*#__PURE__*/translate('buy bait'),
            cost: {
              fur: 5
            },
            reward: {
              bait: 1
            },
            notification: /*#__PURE__*/translate('traps are more effective with bait.')
          },
          buyCompass: {
            available: function available(state) {
              return !!state.stores.compass;
            },
            text: /*#__PURE__*/translate('buy compass'),
            cost: {
              fur: 300,
              scales: 15,
              teeth: 5
            },
            reward: {
              compass: 1
            },
            notification: /*#__PURE__*/translate('the old compass is dented and dusty, but it looks to work.')
          },
          goodbye: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* Noises Outside  --  gain wood/fur */
    title: /*#__PURE__*/translate('Noises'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && !!state.stores.wood;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('through the walls, shuffling noises can be heard.'), /*#__PURE__*/translate("can't tell what they're up to.")],
        notification: /*#__PURE__*/translate('strange noises can be heard through the walls'),
        blink: true,
        buttons: {
          investigate: {
            text: /*#__PURE__*/translate('investigate'),
            nextScene: {
              0.3: 'stuff',
              1: 'nothing'
            }
          },
          ignore: {
            text: /*#__PURE__*/translate('ignore them'),
            nextScene: 'end'
          }
        }
      },
      nothing: {
        text: [/*#__PURE__*/translate('vague shapes move, just out of sight.'), /*#__PURE__*/translate('the sounds stop.')],
        buttons: {
          backinside: {
            text: /*#__PURE__*/translate('go back inside'),
            nextScene: 'end'
          }
        }
      },
      stuff: {
        reward: {
          wood: 100,
          fur: 10
        },
        text: [/*#__PURE__*/translate('a bundle of sticks lies just beyond the threshold, wrapped in coarse furs.'), /*#__PURE__*/translate('the night is silent.')],
        buttons: {
          backinside: {
            text: /*#__PURE__*/translate('go back inside'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* Noises Inside  --  trade wood for better good */
    title: /*#__PURE__*/translate('Noises'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && !!state.stores.wood;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('scratching noises can be heard from the store room.'), /*#__PURE__*/translate("something's in there.")],
        notification: /*#__PURE__*/translate("something's in the store room"),
        blink: true,
        buttons: {
          investigate: {
            text: /*#__PURE__*/translate('investigate'),
            nextScene: {
              0.5: 'scales',
              0.8: 'teeth',
              1: 'cloth'
            }
          },
          ignore: {
            text: /*#__PURE__*/translate('ignore them'),
            nextScene: 'end'
          }
        }
      },
      scales: {
        text: [/*#__PURE__*/translate('some wood is missing.'), /*#__PURE__*/translate('the ground is littered with small scales')],
        onLoad: function onLoad(engine) {
          var _engine$store, _engine$store2;

          var state = (_engine$store = engine.store) == null ? void 0 : _engine$store.getState();
          var numWood = (state == null ? void 0 : state.stores.wood) || 0;
          numWood = Math.floor(numWood * 0.1);
          if (numWood === 0) numWood = 1;
          var numScales = Math.floor(numWood / 5);
          if (numScales === 0) numScales = 1;
          (_engine$store2 = engine.store) == null ? void 0 : _engine$store2.dispatch(engine.actions.stores.addM({
            wood: -numWood,
            scales: numScales
          }));
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('leave'),
            nextScene: 'end'
          }
        }
      },
      teeth: {
        text: [/*#__PURE__*/translate('some wood is missing.'), /*#__PURE__*/translate('the ground is littered with small teeth')],
        onLoad: function onLoad(engine) {
          var _engine$store3, _engine$store4;

          var state = (_engine$store3 = engine.store) == null ? void 0 : _engine$store3.getState();
          var numWood = (state == null ? void 0 : state.stores.wood) || 0;
          numWood = Math.floor(numWood * 0.1);
          if (numWood === 0) numWood = 1;
          var numTeeth = Math.floor(numWood / 5);
          if (numTeeth === 0) numTeeth = 1;
          (_engine$store4 = engine.store) == null ? void 0 : _engine$store4.dispatch(engine.actions.stores.addM({
            wood: -numWood,
            teeth: numTeeth
          }));
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('leave'),
            nextScene: 'end'
          }
        }
      },
      cloth: {
        text: [/*#__PURE__*/translate('some wood is missing.'), /*#__PURE__*/translate('the ground is littered with scraps of cloth')],
        onLoad: function onLoad(engine) {
          var _engine$store5, _engine$store6;

          var state = (_engine$store5 = engine.store) == null ? void 0 : _engine$store5.getState();
          var numWood = (state == null ? void 0 : state.stores.wood) || 0;
          numWood = Math.floor(numWood * 0.1);
          if (numWood === 0) numWood = 1;
          var numCloth = Math.floor(numWood / 5);
          if (numCloth === 0) numCloth = 1;
          (_engine$store6 = engine.store) == null ? void 0 : _engine$store6.dispatch(engine.actions.stores.addM({
            wood: -numWood,
            cloth: numCloth
          }));
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('leave'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* The Beggar  --  trade fur for better good */
    title: /*#__PURE__*/translate('The Beggar'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && !!state.stores.fur;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a beggar arrives.'), /*#__PURE__*/translate('asks for any spare furs to keep him warm at night.')],
        notification: /*#__PURE__*/translate('a beggar arrives'),
        blink: true,
        buttons: {
          '50furs': {
            text: /*#__PURE__*/translate('give 50'),
            cost: {
              fur: 50
            },
            nextScene: {
              0.5: 'scales',
              0.8: 'teeth',
              1: 'cloth'
            }
          },
          '100furs': {
            text: /*#__PURE__*/translate('give 100'),
            cost: {
              fur: 100
            },
            nextScene: {
              0.5: 'teeth',
              0.8: 'scales',
              1: 'cloth'
            }
          },
          deny: {
            text: /*#__PURE__*/translate('turn him away'),
            nextScene: 'end'
          }
        }
      },
      scales: {
        reward: {
          scales: 20
        },
        text: [/*#__PURE__*/translate('the beggar expresses his thanks.'), /*#__PURE__*/translate('leaves a pile of small scales behind.')],
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      teeth: {
        reward: {
          teeth: 20
        },
        text: [/*#__PURE__*/translate('the beggar expresses his thanks.'), /*#__PURE__*/translate('leaves a pile of small teeth behind.')],
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      cloth: {
        reward: {
          cloth: 20
        },
        text: [/*#__PURE__*/translate('the beggar expresses his thanks.'), /*#__PURE__*/translate('leaves some scraps of cloth behind.')],
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* The Shady Builder */
    title: /*#__PURE__*/translate('The Shady Builder'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && state.game.buildings.hut >= 5 && state.game.buildings.hut < 20;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a shady builder passes through'), /*#__PURE__*/translate('says he can build you a hut for less wood')],
        notification: /*#__PURE__*/translate('a shady builder passes through'),
        buttons: {
          build: {
            text: /*#__PURE__*/translate('300 wood'),
            cost: {
              wood: 300
            },
            nextScene: {
              0.6: 'steal',
              1: 'build'
            }
          },
          deny: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      steal: {
        text: [/*#__PURE__*/translate('the shady builder has made off with your wood')],
        notification: /*#__PURE__*/translate('the shady builder has made off with your wood'),
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      },
      build: {
        text: [/*#__PURE__*/translate('the shady builder builds a hut')],
        notification: /*#__PURE__*/translate('the shady builder builds a hut'),
        onLoad: function onLoad(engine) {
          var _engine$store7;

          var state = (_engine$store7 = engine.store) == null ? void 0 : _engine$store7.getState();
          var n = state.game.buildings.hut;

          if (n < 20) {
            var _engine$store8;

            (_engine$store8 = engine.store) == null ? void 0 : _engine$store8.dispatch(engine.actions.game.buildings.setM({
              hut: n + 1
            }));
          }
        },
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* Mysterious Wanderer  --  wood gambling */
    title: /*#__PURE__*/translate('The Mysterious Wanderer'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && !!state.stores.wood;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate("a wanderer arrives with an empty cart. says if he leaves with wood, he'll be back with more."), /*#__PURE__*/translate("builder's not sure he's to be trusted.")],
        notification: /*#__PURE__*/translate('a mysterious wanderer arrives'),
        blink: true,
        buttons: {
          wood100: {
            text: /*#__PURE__*/translate('give 100'),
            cost: {
              wood: 100
            },
            nextScene: {
              1: 'wood100'
            }
          },
          wood500: {
            text: /*#__PURE__*/translate('give 500'),
            cost: {
              wood: 500
            },
            nextScene: {
              1: 'wood500'
            }
          },
          deny: {
            text: /*#__PURE__*/translate('turn him away'),
            nextScene: 'end'
          }
        }
      },
      wood100: {
        text: [/*#__PURE__*/translate('the wanderer leaves, cart loaded with wood')],
        action: function action(inputDelay, engine) {
          engine.events.saveDelay(function (engine) {
            var _engine$store9;

            (_engine$store9 = engine.store) == null ? void 0 : _engine$store9.dispatch(engine.actions.stores.addM({
              wood: 300
            }));
            engine.notify(translate('the mysterious wanderer returns, cart piled high with wood.'), exports.GameSpace.Room);
          }, exports.GameSpace.Room + "[4].scenes.wood100.action", inputDelay);
        },
        onLoad: function onLoad(engine) {
          if (Math.random() < 0.5) {
            this.action(60, engine);
          }
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      wood500: {
        text: [/*#__PURE__*/translate('the wanderer leaves, cart loaded with wood')],
        action: function action(inputDelay, engine) {
          engine.events.saveDelay(function (engine) {
            var _engine$store10;

            (_engine$store10 = engine.store) == null ? void 0 : _engine$store10.dispatch(engine.actions.stores.addM({
              wood: 1500
            }));
            engine.notify(translate('the mysterious wanderer returns, cart piled high with wood.'), exports.GameSpace.Room);
          }, exports.GameSpace.Room + "[4].scenes.wood500.action", inputDelay);
        },
        onLoad: function onLoad(engine) {
          if (Math.random() < 0.3) {
            this.action(60, engine);
          }
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* Mysterious Wanderer  --  fur gambling */
    title: /*#__PURE__*/translate('The Mysterious Wanderer'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && !!state.stores.fur;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate("a wanderer arrives with an empty cart. says if she leaves with furs, she'll be back with more."), /*#__PURE__*/translate("builder's not sure she's to be trusted.")],
        notification: /*#__PURE__*/translate('a mysterious wanderer arrives'),
        blink: true,
        buttons: {
          fur100: {
            text: /*#__PURE__*/translate('give 100'),
            cost: {
              fur: 100
            },
            nextScene: {
              1: 'fur100'
            }
          },
          fur500: {
            text: /*#__PURE__*/translate('give 500'),
            cost: {
              fur: 500
            },
            nextScene: {
              1: 'fur500'
            }
          },
          deny: {
            text: /*#__PURE__*/translate('turn her away'),
            nextScene: 'end'
          }
        }
      },
      fur100: {
        text: [/*#__PURE__*/translate('the wanderer leaves, cart loaded with furs')],
        action: function action(inputDelay, engine) {
          engine.events.saveDelay(function (engine) {
            var _engine$store11;

            (_engine$store11 = engine.store) == null ? void 0 : _engine$store11.dispatch(engine.actions.stores.addM({
              fur: 300
            }));
            engine.notify(translate('the mysterious wanderer returns, cart piled high with furs.'), exports.GameSpace.Room);
          }, exports.GameSpace.Room + "[5].scenes.fur100.action", inputDelay);
        },
        onLoad: function onLoad(engine) {
          if (Math.random() < 0.5) {
            this.action(60, engine);
          }
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      fur500: {
        text: [/*#__PURE__*/translate('the wanderer leaves, cart loaded with furs')],
        action: function action(inputDelay, engine) {
          engine.events.saveDelay(function (engine) {
            var _engine$store12;

            (_engine$store12 = engine.store) == null ? void 0 : _engine$store12.dispatch(engine.actions.stores.addM({
              fur: 1500
            }));
            engine.notify(translate('the mysterious wanderer returns, cart piled high with furs.'), exports.GameSpace.Room);
          }, exports.GameSpace.Room + "[5].scenes.fur500.action", inputDelay);
        },
        onLoad: function onLoad(engine) {
          if (Math.random() < 0.3) {
            this.action(60, engine);
          }
        },
        buttons: {
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* The Scout  --  Map Merchant */
    title: /*#__PURE__*/translate('The Scout'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && state.features.location.World;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate("the scout says she's been all over."), /*#__PURE__*/translate('willing to talk about it, for a price.')],
        notification: /*#__PURE__*/translate('a scout stops for the night'),
        blink: true,
        buttons: {
          buyMap: {
            text: /*#__PURE__*/translate('buy map'),
            cost: {
              fur: 200,
              scales: 10
            },
            available: function available(state) {
              return !state.game.world.seenAll;
            },
            notification: /*#__PURE__*/translate('the map uncovers a bit of the world'),
            onChoose: function onChoose(engine) {
              engine.spaces[exports.GameSpace.World].applyMap();
            }
          },
          learn: {
            text: /*#__PURE__*/translate('learn scouting'),
            cost: {
              fur: 1000,
              scales: 50,
              teeth: 20
            },
            available: function available(state) {
              return !state.character.perks.scout;
            },
            onChoose: function onChoose(engine) {
              var _engine$store13;

              (_engine$store13 = engine.store) == null ? void 0 : _engine$store13.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.scout));
            }
          },
          leave: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* The Wandering Master */
    title: /*#__PURE__*/translate('The Master'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && state.features.location.World;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('an old wanderer arrives.'), /*#__PURE__*/translate('he smiles warmly and asks for lodgings for the night.')],
        notification: /*#__PURE__*/translate('an old wanderer arrives'),
        blink: true,
        buttons: {
          agree: {
            text: /*#__PURE__*/translate('agree'),
            cost: {
              cured_meat: 100,
              fur: 100,
              torch: 1
            },
            nextScene: {
              1: 'agree'
            }
          },
          deny: {
            text: /*#__PURE__*/translate('turn him away'),
            nextScene: 'end'
          }
        }
      },
      agree: {
        text: [/*#__PURE__*/translate('in exchange, the wanderer offers his wisdom.')],
        buttons: {
          evasion: {
            text: /*#__PURE__*/translate('evasion'),
            available: function available(state) {
              return !state.character.perks.evasive;
            },
            onChoose: function onChoose(engine) {
              var _engine$store14;

              (_engine$store14 = engine.store) == null ? void 0 : _engine$store14.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.evasive));
            },
            nextScene: 'end'
          },
          precision: {
            text: /*#__PURE__*/translate('precision'),
            available: function available(state) {
              return !state.character.perks.precise;
            },
            onChoose: function onChoose(engine) {
              var _engine$store15;

              (_engine$store15 = engine.store) == null ? void 0 : _engine$store15.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.precise));
            },
            nextScene: 'end'
          },
          force: {
            text: /*#__PURE__*/translate('force'),
            available: function available(state) {
              return !state.character.perks.barbarian;
            },
            onChoose: function onChoose(engine) {
              var _engine$store16;

              (_engine$store16 = engine.store) == null ? void 0 : _engine$store16.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.barbarian));
            },
            nextScene: 'end'
          },
          nothing: {
            text: /*#__PURE__*/translate('nothing'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    /* The Sick Man */
    title: /*#__PURE__*/translate('The Sick Man'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Room && !!state.stores.medicine;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a man hobbles up, coughing.'), /*#__PURE__*/translate('he begs for medicine.')],
        notification: /*#__PURE__*/translate('a sick man hobbles up'),
        blink: true,
        buttons: {
          help: {
            text: /*#__PURE__*/translate('give 1 medicine'),
            cost: {
              medicine: 1
            },
            notification: /*#__PURE__*/translate('the man swallows the medicine eagerly'),
            nextScene: {
              0.1: 'alloy',
              0.3: 'cells',
              0.5: 'scales',
              1.0: 'nothing'
            }
          },
          ignore: {
            text: /*#__PURE__*/translate('tell him to leave'),
            nextScene: 'end'
          }
        }
      },
      alloy: {
        text: [/*#__PURE__*/translate('the man is thankful.'), /*#__PURE__*/translate('he leaves a reward.'), /*#__PURE__*/translate('some weird metal he picked up on his travels.')],
        onLoad: function onLoad(engine) {
          var _engine$store17, _engine$actions$store;

          (_engine$store17 = engine.store) == null ? void 0 : _engine$store17.dispatch(engine.actions.stores.addM((_engine$actions$store = {}, _engine$actions$store[exports.StoreCategory.alien_alloy] = 1, _engine$actions$store)));
        },
        buttons: {
          bye: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      cells: {
        text: [/*#__PURE__*/translate('the man is thankful.'), /*#__PURE__*/translate('he leaves a reward.'), /*#__PURE__*/translate('some weird glowing boxes he picked up on his travels.')],
        onLoad: function onLoad(engine) {
          var _engine$store18, _engine$actions$store2;

          (_engine$store18 = engine.store) == null ? void 0 : _engine$store18.dispatch(engine.actions.stores.addM((_engine$actions$store2 = {}, _engine$actions$store2[exports.StoreCategory.energy_cell] = 3, _engine$actions$store2)));
        },
        buttons: {
          bye: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      scales: {
        text: [/*#__PURE__*/translate('the man is thankful.'), /*#__PURE__*/translate('he leaves a reward.'), /*#__PURE__*/translate('all he has are some scales.')],
        onLoad: function onLoad(engine) {
          var _engine$store19, _engine$actions$store3;

          (_engine$store19 = engine.store) == null ? void 0 : _engine$store19.dispatch(engine.actions.stores.addM((_engine$actions$store3 = {}, _engine$actions$store3[exports.StoreCategory.scales] = 5, _engine$actions$store3)));
        },
        buttons: {
          bye: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      },
      nothing: {
        text: [/*#__PURE__*/translate('the man expresses his thanks and hobbles off.')],
        buttons: {
          bye: {
            text: /*#__PURE__*/translate('say goodbye'),
            nextScene: 'end'
          }
        }
      }
    }
  }];

  var _reward;
  var events$3 = [{
    title: /*#__PURE__*/translate('A Ruined Trap'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace === exports.GameSpace.Outside && state.game.buildings.trap > 0;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('some of the traps have been torn apart.'), /*#__PURE__*/translate('large prints lead away, into the forest.')],
        onLoad: function onLoad(engine) {
          var _engine$store, _engine$store2;

          var state = (_engine$store = engine.store) == null ? void 0 : _engine$store.getState();
          var numWrecked = Math.floor(Math.random() * state.game.buildings.trap) + 1;
          (_engine$store2 = engine.store) == null ? void 0 : _engine$store2.dispatch(engine.actions.game.buildings.addM({
            trap: -numWrecked
          }));
        },
        notification: /*#__PURE__*/translate('some traps have been destroyed'),
        blink: true,
        buttons: {
          track: {
            text: /*#__PURE__*/translate('track them'),
            nextScene: {
              0.5: 'nothing',
              1: 'catch'
            }
          },
          ignore: {
            text: /*#__PURE__*/translate('ignore them'),
            nextScene: 'end'
          }
        }
      },
      nothing: {
        text: [/*#__PURE__*/translate('the tracks disappear after just a few minutes.'), /*#__PURE__*/translate('the forest is silent.')],
        notification: /*#__PURE__*/translate('nothing was found'),
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      },
      "catch": {
        text: [/*#__PURE__*/translate('not far from the village lies a large beast, its fur matted with blood.'), /*#__PURE__*/translate('it puts up little resistance before the knife.')],
        notification: /*#__PURE__*/translate("there was a beast. it's dead now"),
        reward: {
          fur: 100,
          meat: 100,
          teeth: 10
        },
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    title: /*#__PURE__*/translate('Fire'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace == exports.GameSpace.Outside && state.game.buildings.hut > 0 && state.game.population.value > 50;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a fire rampages through one of the huts, destroying it.'), /*#__PURE__*/translate('all residents in the hut perished in the fire.')],
        notification: /*#__PURE__*/translate('a fire has started'),
        blink: true,
        onLoad: function onLoad(engine) {
          engine.spaces.Outside.destroyHuts(1);
        },
        buttons: {
          mourn: {
            text: /*#__PURE__*/translate('mourn'),
            notification: /*#__PURE__*/translate('some villagers have died'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    title: /*#__PURE__*/translate('Sickness'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace == exports.GameSpace.Outside && state.game.population.value > 10 && state.game.population.value < 50 && !!state.stores.medicine;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a sickness is spreading through the village.'), /*#__PURE__*/translate('medicine is needed immediately.')],
        notification: /*#__PURE__*/translate('some villagers are ill'),
        blink: true,
        buttons: {
          heal: {
            text: /*#__PURE__*/translate('1 medicine'),
            cost: {
              medicine: 1
            },
            nextScene: {
              1: 'healed'
            }
          },
          ignore: {
            text: /*#__PURE__*/translate('ignore it'),
            nextScene: {
              1: 'death'
            }
          }
        }
      },
      healed: {
        text: [/*#__PURE__*/translate('the sickness is cured in time.')],
        notification: /*#__PURE__*/translate('sufferers are healed'),
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      },
      death: {
        text: [/*#__PURE__*/translate('the sickness spreads through the village.'), /*#__PURE__*/translate('the days are spent with burials.'), /*#__PURE__*/translate('the nights are rent with screams.')],
        notification: /*#__PURE__*/translate('sufferers are left to die'),
        onLoad: function onLoad(engine) {
          var _engine$store3;

          var state = (_engine$store3 = engine.store) == null ? void 0 : _engine$store3.getState();
          var numKilled = Math.floor(Math.random() * Math.floor(state.game.population.value / 2)) + 1;
          engine.spaces.Outside.killVillagers(numKilled);
        },
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    title: /*#__PURE__*/translate('Plague'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace == exports.GameSpace.Outside && state.game.population.value > 50 && !!state.stores.medicine;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a terrible plague is fast spreading through the village.'), /*#__PURE__*/translate('medicine is needed immediately.')],
        notification: /*#__PURE__*/translate('a plague afflicts the village'),
        blink: true,
        buttons: {
          buyMedicine: {
            text: /*#__PURE__*/translate('buy medicine'),
            cost: {
              scales: 70,
              teeth: 50
            },
            reward: {
              medicine: 1
            }
          },
          heal: {
            text: /*#__PURE__*/translate('5 medicine'),
            cost: {
              medicine: 5
            },
            nextScene: {
              1: 'healed'
            }
          },
          ignore: {
            text: /*#__PURE__*/translate('do nothing'),
            nextScene: {
              1: 'death'
            }
          }
        }
      },
      healed: {
        text: [/*#__PURE__*/translate('the plague is kept from spreading.'), /*#__PURE__*/translate('only a few die.'), /*#__PURE__*/translate('the rest bury them.')],
        notification: /*#__PURE__*/translate('epidemic is eradicated eventually'),
        onLoad: function onLoad(engine) {
          var numKilled = Math.floor(Math.random() * 5) + 2;
          engine.spaces.Outside.killVillagers(numKilled);
        },
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      },
      death: {
        text: [/*#__PURE__*/translate('the plague rips through the village.'), /*#__PURE__*/translate('the nights are rent with screams.'), /*#__PURE__*/translate('the only hope is a quick death.')],
        notification: /*#__PURE__*/translate('population is almost exterminated'),
        onLoad: function onLoad(engine) {
          var numKilled = Math.floor(Math.random() * 80) + 10;
          engine.spaces.Outside.killVillagers(numKilled);
        },
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Beast Attack'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace == exports.GameSpace.Outside && state.game.population.value > 0;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a pack of snarling beasts pours out of the trees.'), /*#__PURE__*/translate('the fight is short and bloody, but the beasts are repelled.'), /*#__PURE__*/translate('the villagers retreat to mourn the dead.')],
        notification: /*#__PURE__*/translate('wild beasts attack the villagers'),
        onLoad: function onLoad(engine) {
          var numKilled = Math.floor(Math.random() * 10) + 1;
          engine.spaces.Outside.killVillagers(numKilled);
        },
        reward: {
          fur: 100,
          meat: 100,
          teeth: 10
        },
        blink: true,
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            notification: /*#__PURE__*/translate('predators become prey. price is unfair'),
            nextScene: 'end'
          }
        }
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Military Raid'),
    isAvailable: function isAvailable(state) {
      return state.engine.activeSpace == exports.GameSpace.Outside && state.game.population.value > 0 && state.game.city.cleared;
    },
    scenes: {
      start: {
        text: [/*#__PURE__*/translate('a gunshot rings through the trees.'), /*#__PURE__*/translate('well armed men charge out of the forest, firing into the crowd.'), /*#__PURE__*/translate('after a skirmish they are driven away, but not without losses.')],
        notification: /*#__PURE__*/translate('troops storm the village'),
        onLoad: function onLoad(engine) {
          var numKilled = Math.floor(Math.random() * 40) + 1;
          engine.spaces.Outside.killVillagers(numKilled);
        },
        reward: (_reward = {}, _reward[exports.StoreCategory.bullets] = 10, _reward[exports.StoreCategory.cured_meat] = 50, _reward),
        blink: true,
        buttons: {
          end: {
            text: /*#__PURE__*/translate('go home'),
            notification: /*#__PURE__*/translate('warfare is bloodthirsty'),
            nextScene: 'end'
          }
        }
      }
    }
  }];

  var events$4 = [// {
    //   title: translate('Penrose'),
    //   isAvailable: state => {
    //     return !state.marketing.penrose;
    //   },
    //   scenes: {
    //     start: {
    //       text: [
    //         translate(
    //           'a strange thrumming, pounding and crashing. visions of people and places, of a huge machine and twisting curves.'
    //         ),
    //         translate('inviting. it would be so easy to give in, completely.'),
    //       ],
    //       notification: translate('a strange thrumming, pounding and crashing. and then gone.'),
    //       blink: true,
    //       buttons: {
    //         'give in': {
    //           text: translate('give in'),
    //           onClick: engine => {
    //             engine.store?.dispatch(
    //               engine.actions.marketing.changePenrose(true)
    //             );
    //           },
    //           nextScene: 'end',
    //         },
    //         ignore: {
    //           text: translate('ignore it'),
    //           nextScene: 'end',
    //         },
    //       },
    //     },
    //   },
    // },
  ];

  var events$5 = {
    outpost: {
      /* Friendly Outpost */
      title: /*#__PURE__*/translate('An Outpost'),
      id: 'outpost',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('a safe place in the wilds.')],
          notification: /*#__PURE__*/translate('a safe place in the wilds.'),
          loot: {
            cured_meat: {
              min: 5,
              max: 10,
              chance: 1
            }
          },
          onLoad: function onLoad(engine) {
            engine.spaces.World.useOutpost();
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        }
      }
    },
    swamp: {
      /* Swamp */
      title: /*#__PURE__*/translate('A Murky Swamp'),
      id: 'swamp',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('rotting reeds rise out of the swampy earth.'), /*#__PURE__*/translate('a lone frog sits in the muck, silently.')],
          notification: /*#__PURE__*/translate('a swamp festers in the stagnant air.'),
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('enter'),
              nextScene: {
                1: 'cabin'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        cabin: {
          text: [/*#__PURE__*/translate('deep in the swamp is a moss-covered cabin.'), /*#__PURE__*/translate('an old wanderer sits inside, in a seeming trance.')],
          buttons: {
            talk: {
              cost: {
                charm: 1
              },
              text: /*#__PURE__*/translate('talk'),
              nextScene: {
                1: 'talk'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        talk: {
          text: [/*#__PURE__*/translate('the wanderer takes the charm and nods slowly.'), /*#__PURE__*/translate('he speaks of once leading the great fleets to fresh worlds.'), /*#__PURE__*/translate('unfathomable destruction to fuel wanderer hungers.'), /*#__PURE__*/translate('his time here, now, is his penance.')],
          onLoad: function onLoad(engine) {
            var state = engine.store.getState();
            engine.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.gastronome));
            engine.spaces.World.markVisited(state == null ? void 0 : state.game.world.curPos[0], state == null ? void 0 : state.game.world.curPos[1]);
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        }
      }
    },
    cave: {
      /* Cave */
      title: /*#__PURE__*/translate('A Damp Cave'),
      id: 'cave',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('the mouth of the cave is wide and dark.'), /*#__PURE__*/translate("can't see what's inside.")],
          notification: /*#__PURE__*/translate('the earth here is split, as if bearing an ancient wound'),
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('go inside'),
              cost: {
                torch: 1
              },
              nextScene: {
                0.3: 'a1',
                0.6: 'a2',
                1: 'a3'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        a1: {
          combat: true,
          enemy: 'beast',
          chara: 'R',
          damage: 1,
          hit: 0.8,
          attackDelay: 1,
          health: 5,
          notification: /*#__PURE__*/translate('a startled beast defends its home'),
          loot: {
            fur: {
              min: 1,
              max: 10,
              chance: 1
            },
            teeth: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'b1',
                1: 'b2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        a2: {
          text: [/*#__PURE__*/translate('the cave narrows a few feet in.'), /*#__PURE__*/translate('the walls are moist and moss-covered')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('squeeze'),
              nextScene: {
                0.5: 'b2',
                1: 'b3'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              nextScene: 'end'
            }
          }
        },
        a3: {
          text: [/*#__PURE__*/translate('the remains of an old camp sits just inside the cave.'), /*#__PURE__*/translate('bedrolls, torn and blackened, lay beneath a thin layer of dust.')],
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 1
            },
            torch: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            leather: {
              min: 1,
              max: 5,
              chance: 0.3
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'b3',
                1: 'b4'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b1: {
          text: [/*#__PURE__*/translate('the body of a wanderer lies in a small cavern.'), /*#__PURE__*/translate("rot's been to work on it, and some of the pieces are missing."),
          /*#__PURE__*/
          /// TRANSLATORS : 'it' is a rotting wanderer's body
          translate("can't tell what left it here.")],
          loot: {
            iron_sword: {
              min: 1,
              max: 1,
              chance: 1
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            torch: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            medicine: {
              min: 1,
              max: 2,
              chance: 0.1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'c1'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b2: {
          text: [/*#__PURE__*/translate('the torch sputters and dies in the damp air'), /*#__PURE__*/translate('the darkness is absolute')],
          notification: /*#__PURE__*/translate('the torch goes out'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cost: {
                torch: 1
              },
              nextScene: {
                1: 'c1'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              nextScene: 'end'
            }
          }
        },
        b3: {
          combat: true,
          enemy: 'beast',
          chara: 'R',
          damage: 1,
          hit: 0.8,
          attackDelay: 1,
          health: 5,
          notification: /*#__PURE__*/translate('a startled beast defends its home'),
          loot: {
            fur: {
              min: 1,
              max: 3,
              chance: 1
            },
            teeth: {
              min: 1,
              max: 2,
              chance: 0.8
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'c2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b4: {
          combat: true,
          enemy: 'cave lizard',
          chara: 'R',
          damage: 3,
          hit: 0.8,
          attackDelay: 2,
          health: 6,
          notification: /*#__PURE__*/translate('a cave lizard attacks'),
          loot: {
            scales: {
              min: 1,
              max: 3,
              chance: 1
            },
            teeth: {
              min: 1,
              max: 2,
              chance: 0.8
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'c2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c1: {
          combat: true,
          enemy: 'beast',
          chara: 'R',
          damage: 3,
          hit: 0.8,
          attackDelay: 2,
          health: 10,
          notification: /*#__PURE__*/translate('a large beast charges out of the dark'),
          loot: {
            fur: {
              min: 1,
              max: 3,
              chance: 1
            },
            teeth: {
              min: 1,
              max: 3,
              chance: 1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end1',
                1: 'end2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c2: {
          combat: true,
          enemy: 'lizard',
          chara: 'T',
          damage: 4,
          hit: 0.8,
          attackDelay: 2,
          health: 10,
          notification: /*#__PURE__*/translate('a giant lizard shambles forward'),
          loot: {
            scales: {
              min: 1,
              max: 3,
              chance: 1
            },
            teeth: {
              min: 1,
              max: 3,
              chance: 1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.7: 'end2',
                1: 'end3'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end1: {
          text: [/*#__PURE__*/translate('the nest of a large animal lies at the back of the cave.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          loot: {
            meat: {
              min: 5,
              max: 10,
              chance: 1
            },
            fur: {
              min: 5,
              max: 10,
              chance: 1
            },
            scales: {
              min: 5,
              max: 10,
              chance: 1
            },
            teeth: {
              min: 5,
              max: 10,
              chance: 1
            },
            cloth: {
              min: 5,
              max: 10,
              chance: 0.5
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end2: {
          text: [/*#__PURE__*/translate('a small supply cache is hidden at the back of the cave.')],
          loot: {
            cloth: {
              min: 5,
              max: 10,
              chance: 1
            },
            leather: {
              min: 5,
              max: 10,
              chance: 1
            },
            iron: {
              min: 5,
              max: 10,
              chance: 1
            },
            cured_meat: {
              min: 5,
              max: 10,
              chance: 1
            },
            steel: {
              min: 5,
              max: 10,
              chance: 0.5
            },
            bolas: {
              min: 1,
              max: 3,
              chance: 0.3
            },
            medicine: {
              min: 1,
              max: 4,
              chance: 0.15
            }
          },
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end3: {
          text: [/*#__PURE__*/translate('an old case is wedged behind a rock, covered in a thick layer of dust.')],
          loot: {
            steel_sword: {
              min: 1,
              max: 1,
              chance: 1
            },
            bolas: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            medicine: {
              min: 1,
              max: 3,
              chance: 0.3
            }
          },
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave cave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        }
      }
    },
    town: {
      /* Town */
      title: /*#__PURE__*/translate('A Deserted Town'),
      id: 'town',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('a small suburb lays ahead, empty houses scorched and peeling.'), /*#__PURE__*/translate("broken streetlights stand, rusting. light hasn't graced this place in a long time.")],
          notification: /*#__PURE__*/translate('the town lies abandoned, its citizens long dead'),
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('explore'),
              nextScene: {
                0.3: 'a1',
                0.7: 'a3',
                1: 'a2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        a1: {
          text: [/*#__PURE__*/translate("where the windows of the schoolhouse aren't shattered, they're blackened with soot."), /*#__PURE__*/translate('the double doors creak endlessly in the wind.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('enter'),
              nextScene: {
                0.5: 'b1',
                1: 'b2'
              },
              cost: {
                torch: 1
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              nextScene: 'end'
            }
          }
        },
        a2: {
          combat: true,
          enemy: 'thug',
          chara: 'E',
          damage: 4,
          hit: 0.8,
          attackDelay: 2,
          health: 30,
          loot: {
            cloth: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            leather: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          notification: /*#__PURE__*/translate('ambushed on the street.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'b3',
                1: 'b4'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        a3: {
          text: [/*#__PURE__*/translate('a squat building up ahead.'), /*#__PURE__*/translate('a green cross barely visible behind grimy windows.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('enter'),
              nextScene: {
                0.5: 'b5',
                1: 'end5'
              },
              cost: {
                torch: 1
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              nextScene: 'end'
            }
          }
        },
        b1: {
          text: [/*#__PURE__*/translate('a small cache of supplies is tucked inside a rusting locker.')],
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 1
            },
            torch: {
              min: 1,
              max: 3,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.3
            },
            medicine: {
              min: 1,
              max: 3,
              chance: 0.05
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c1',
                1: 'c2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b2: {
          combat: true,
          enemy: 'scavenger',
          chara: 'E',
          damage: 4,
          hit: 0.8,
          attackDelay: 2,
          health: 30,
          loot: {
            cloth: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            leather: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          notification: /*#__PURE__*/translate('a scavenger waits just inside the door.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c2',
                1: 'c3'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b3: {
          combat: true,
          enemy: 'beast',
          chara: 'R',
          damage: 3,
          hit: 0.8,
          attackDelay: 1,
          health: 25,
          loot: {
            teeth: {
              min: 1,
              max: 5,
              chance: 1
            },
            fur: {
              min: 5,
              max: 10,
              chance: 1
            }
          },
          notification: /*#__PURE__*/translate('a beast stands alone in an overgrown park.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c4',
                1: 'c5'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b4: {
          text: [/*#__PURE__*/translate('an overturned caravan is spread across the pockmarked street.'), /*#__PURE__*/translate("it's been picked over by scavengers, but there's still some things worth taking.")],
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            torch: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.3
            },
            medicine: {
              min: 1,
              max: 3,
              chance: 0.1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c5',
                1: 'c6'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b5: {
          combat: true,
          enemy: 'madman',
          chara: 'E',
          damage: 6,
          hit: 0.3,
          attackDelay: 1,
          health: 10,
          loot: {
            cloth: {
              min: 2,
              max: 4,
              chance: 0.3
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.9
            },
            medicine: {
              min: 1,
              max: 2,
              chance: 0.4
            }
          },
          notification: /*#__PURE__*/translate('a madman attacks, screeching.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.3: 'end5',
                1: 'end6'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c1: {
          combat: true,
          enemy: 'thug',
          chara: 'E',
          damage: 4,
          hit: 0.8,
          attackDelay: 2,
          health: 30,
          loot: {
            cloth: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            leather: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          notification: /*#__PURE__*/translate('a thug moves out of the shadows.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'd1'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c2: {
          combat: true,
          enemy: 'beast',
          chara: 'R',
          damage: 3,
          hit: 0.8,
          attackDelay: 1,
          health: 25,
          loot: {
            teeth: {
              min: 1,
              max: 5,
              chance: 1
            },
            fur: {
              min: 5,
              max: 10,
              chance: 1
            }
          },
          notification: /*#__PURE__*/translate('a beast charges out of a ransacked classroom.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'd1'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c3: {
          text: [/*#__PURE__*/translate('through the large gymnasium doors, footsteps can be heard.'), /*#__PURE__*/translate('the torchlight casts a flickering glow down the hallway.'), /*#__PURE__*/translate('the footsteps stop.')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('enter'),
              nextScene: {
                1: 'd1'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              nextScene: 'end'
            }
          }
        },
        c4: {
          combat: true,
          enemy: 'beast',
          chara: 'R',
          damage: 4,
          hit: 0.8,
          attackDelay: 1,
          health: 25,
          loot: {
            teeth: {
              min: 1,
              max: 5,
              chance: 1
            },
            fur: {
              min: 5,
              max: 10,
              chance: 1
            }
          },
          notification: /*#__PURE__*/translate('another beast, draw by the noise, leaps out of a copse of trees.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'd2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c5: {
          text: [/*#__PURE__*/translate("something's causing a commotion a ways down the road."), /*#__PURE__*/translate('a fight, maybe.')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                1: 'd2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              nextScene: 'end'
            }
          }
        },
        c6: {
          text: [/*#__PURE__*/translate('a small basket of food is hidden under a park bench, with a note attached.'), /*#__PURE__*/translate("can't read the words.")],
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'd2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d1: {
          combat: true,
          enemy: 'scavenger',
          chara: 'E',
          damage: 5,
          hit: 0.8,
          attackDelay: 2,
          health: 30,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 1
            },
            leather: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            steel_sword: {
              min: 1,
              max: 1,
              chance: 0.5
            }
          },
          notification: /*#__PURE__*/translate('a panicked scavenger bursts through the door, screaming.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end1',
                1: 'end2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d2: {
          combat: true,
          enemy: 'vigilante',
          chara: 'D',
          damage: 6,
          hit: 0.8,
          attackDelay: 2,
          health: 30,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 1
            },
            leather: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            steel_sword: {
              min: 1,
              max: 1,
              chance: 0.5
            }
          },
          notification: /*#__PURE__*/translate("a man stands over a dead wanderer. notices he's not alone."),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end3',
                1: 'end4'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end1: {
          text: [/*#__PURE__*/translate('scavenger had a small camp in the school.'), /*#__PURE__*/translate('collected scraps spread across the floor like they fell from heaven.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          loot: {
            steel_sword: {
              min: 1,
              max: 1,
              chance: 1
            },
            steel: {
              min: 5,
              max: 10,
              chance: 1
            },
            cured_meat: {
              min: 5,
              max: 10,
              chance: 1
            },
            bolas: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            medicine: {
              min: 1,
              max: 2,
              chance: 0.3
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end2: {
          text: [/*#__PURE__*/translate("scavenger'd been looking for supplies in here, it seems."), /*#__PURE__*/translate("a shame to let what he'd found go to waste.")],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          loot: {
            coal: {
              min: 5,
              max: 10,
              chance: 1
            },
            cured_meat: {
              min: 5,
              max: 10,
              chance: 1
            },
            leather: {
              min: 5,
              max: 10,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end3: {
          text: [/*#__PURE__*/translate("beneath the wanderer's rags, clutched in one of its many hands, a glint of steel."), /*#__PURE__*/translate('worth killing for, it seems.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          loot: {
            rifle: {
              min: 1,
              max: 1,
              chance: 1
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end4: {
          text: [/*#__PURE__*/translate('eye for an eye seems fair.'), /*#__PURE__*/translate('always worked before, at least.'), /*#__PURE__*/translate('picking the bones finds some useful trinkets.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          loot: {
            cured_meat: {
              min: 5,
              max: 10,
              chance: 1
            },
            iron: {
              min: 5,
              max: 10,
              chance: 1
            },
            torch: {
              min: 1,
              max: 5,
              chance: 1
            },
            bolas: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            medicine: {
              min: 1,
              max: 2,
              chance: 0.1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end5: {
          text: [/*#__PURE__*/translate('some medicine abandoned in the drawers.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          loot: {
            medicine: {
              min: 2,
              max: 5,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end6: {
          text: [/*#__PURE__*/translate('the clinic has been ransacked.'), /*#__PURE__*/translate('only dust and stains remain.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave town'),
              nextScene: 'end'
            }
          }
        }
      }
    },
    city: {
      /* City */
      title: /*#__PURE__*/translate('A Ruined City'),
      id: 'city',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('a battered highway sign stands guard at the entrance to this once-great city.'), /*#__PURE__*/translate("the towers that haven't crumbled jut from the landscape like the ribcage of some ancient beast."), /*#__PURE__*/translate('might be things worth having still inside.')],
          notification: /*#__PURE__*/translate('the towers of a decaying city dominate the skyline'),
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('explore'),
              nextScene: {
                0.2: 'a1',
                0.5: 'a2',
                0.8: 'a3',
                1: 'a4'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        a1: {
          text: [/*#__PURE__*/translate('the streets are empty.'), /*#__PURE__*/translate('the air is filled with dust, driven relentlessly by the hard winds.')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.5: 'b1',
                1: 'b2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        a2: {
          text: [/*#__PURE__*/translate('orange traffic cones are set across the street, faded and cracked.'), /*#__PURE__*/translate('lights flash through the alleys between buildings.')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.5: 'b3',
                1: 'b4'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        a3: {
          text: [/*#__PURE__*/translate('a large shanty town sprawls across the streets.'), /*#__PURE__*/translate('faces, darkened by soot and blood, stare out from crooked huts.')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.5: 'b5',
                1: 'b6'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        a4: {
          text: [/*#__PURE__*/translate('the shell of an abandoned hospital looms ahead.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('enter'),
              cost: {
                torch: 1
              },
              nextScene: {
                0.5: 'b7',
                1: 'b8'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        b1: {
          text: [/*#__PURE__*/translate('the old tower seems mostly intact.'), /*#__PURE__*/translate('the shell of a burned out car blocks the entrance.'), /*#__PURE__*/translate('most of the windows at ground level are busted anyway.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('enter'),
              nextScene: {
                0.5: 'c1',
                1: 'c2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        b2: {
          combat: true,
          notification: /*#__PURE__*/translate('a huge lizard scrambles up out of the darkness of an old metro station.'),
          enemy: 'lizard',
          chara: 'R',
          damage: 5,
          hit: 0.8,
          attackDelay: 2,
          health: 20,
          loot: {
            scales: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            teeth: {
              min: 5,
              max: 10,
              chance: 0.5
            },
            meat: {
              min: 5,
              max: 10,
              chance: 0.8
            }
          },
          buttons: {
            descend: {
              text: /*#__PURE__*/translate('descend'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c2',
                1: 'c3'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b3: {
          notification: /*#__PURE__*/translate('the shot echoes in the empty street.'),
          combat: true,
          enemy: 'sniper',
          chara: 'D',
          damage: 15,
          hit: 0.8,
          attackDelay: 4,
          health: 30,
          ranged: true,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            rifle: {
              min: 1,
              max: 1,
              chance: 0.2
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c4',
                1: 'c5'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b4: {
          notification: /*#__PURE__*/translate('the soldier steps out from between the buildings, rifle raised.'),
          combat: true,
          enemy: 'soldier',
          ranged: true,
          chara: 'D',
          damage: 8,
          hit: 0.8,
          attackDelay: 2,
          health: 50,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            rifle: {
              min: 1,
              max: 1,
              chance: 0.2
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c5',
                1: 'c6'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b5: {
          notification: /*#__PURE__*/translate('a frail man stands defiantly, blocking the path.'),
          combat: true,
          enemy: 'frail man',
          chara: 'E',
          damage: 1,
          hit: 0.8,
          attackDelay: 2,
          health: 10,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            cloth: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            leather: {
              min: 1,
              max: 1,
              chance: 0.2
            },
            medicine: {
              min: 1,
              max: 3,
              chance: 0.05
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'c7',
                1: 'c8'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        b6: {
          text: [/*#__PURE__*/translate('nothing but downcast eyes.'), /*#__PURE__*/translate('the people here were broken a long time ago.')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.5: 'c8',
                1: 'c9'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        b7: {
          text: [/*#__PURE__*/translate('empty corridors.'), /*#__PURE__*/translate('the place has been swept clean by scavengers.')],
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.3: 'c12',
                0.7: 'c10',
                1: 'c11'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        b8: {
          notification: /*#__PURE__*/translate('an old man bursts through a door, wielding a scalpel.'),
          combat: true,
          enemy: 'old man',
          chara: 'E',
          damage: 3,
          hit: 0.5,
          attackDelay: 2,
          health: 10,
          loot: {
            cured_meat: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            medicine: {
              min: 1,
              max: 2,
              chance: 0.5
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.3: 'c13',
                0.7: 'c11',
                1: 'end15'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c1: {
          notification: /*#__PURE__*/translate('a thug is waiting on the other side of the wall.'),
          combat: true,
          enemy: 'thug',
          chara: 'E',
          damage: 3,
          hit: 0.8,
          attackDelay: 2,
          health: 30,
          loot: {
            steel_sword: {
              min: 1,
              max: 1,
              chance: 0.5
            },
            cured_meat: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'd1',
                1: 'd2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c2: {
          notification: /*#__PURE__*/translate('a snarling beast jumps out from behind a car.'),
          combat: true,
          enemy: 'beast',
          chara: 'R',
          damage: 2,
          hit: 0.8,
          attackDelay: 1,
          health: 30,
          loot: {
            meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            fur: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            teeth: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'd2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c3: {
          text: [/*#__PURE__*/translate('street above the subway platform is blown away.'), /*#__PURE__*/translate('lets some light down into the dusty haze.'), /*#__PURE__*/translate('a sound comes from the tunnel, just ahead.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('investigate'),
              cost: {
                torch: 1
              },
              nextScene: {
                0.5: 'd2',
                1: 'd3'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        c4: {
          text: [/*#__PURE__*/translate('looks like a camp of sorts up ahead.'),
          /*#__PURE__*/
          /// TRANSLATORS : chainlink is a type of metal fence.
          translate('rusted chainlink is pulled across an alleyway.'), /*#__PURE__*/translate('fires burn in the courtyard beyond.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.5: 'd4',
                1: 'd5'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        c5: {
          text: [/*#__PURE__*/translate('more voices can be heard ahead.'), /*#__PURE__*/translate('they must be here for a reason.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                1: 'd5'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        c6: {
          text: [/*#__PURE__*/translate('the sound of gunfire carries on the wind.'), /*#__PURE__*/translate('the street ahead glows with firelight.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.5: 'd5',
                1: 'd6'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        c7: {
          text: [
          /*#__PURE__*/
          /// TRANSLATORS : squatters occupy abandoned dwellings they don't own.
          translate('more squatters are crowding around now.'), /*#__PURE__*/translate('someone throws a stone.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.5: 'd7',
                1: 'd8'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        c8: {
          text: [/*#__PURE__*/translate('an improvised shop is set up on the sidewalk.'), /*#__PURE__*/translate('the owner stands by, stoic.')],
          loot: {
            steel_sword: {
              min: 1,
              max: 1,
              chance: 0.8
            },
            rifle: {
              min: 1,
              max: 1,
              chance: 0.5
            },
            bullets: {
              min: 1,
              max: 8,
              chance: 0.25
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.01
            },
            medicine: {
              min: 1,
              max: 4,
              chance: 0.5
            }
          },
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'd8'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c9: {
          text: [/*#__PURE__*/translate('strips of meat hang drying by the side of the street.'), /*#__PURE__*/translate('the people back away, avoiding eye contact.')],
          loot: {
            cured_meat: {
              min: 5,
              max: 10,
              chance: 1
            }
          },
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'd8',
                1: 'd9'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c10: {
          text: [/*#__PURE__*/translate('someone has locked and barricaded the door to this operating theatre.')],
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('continue'),
              nextScene: {
                0.2: 'end12',
                0.6: 'd10',
                1: 'd11'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              nextScene: 'end'
            }
          }
        },
        c11: {
          notification: /*#__PURE__*/translate('a tribe of elderly squatters is camped out in this ward.'),
          combat: true,
          enemy: 'squatters',
          plural: true,
          chara: 'EEE',
          damage: 2,
          hit: 0.7,
          attackDelay: 0.5,
          health: 40,
          loot: {
            cured_meat: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            cloth: {
              min: 3,
              max: 8,
              chance: 0.8
            },
            medicine: {
              min: 1,
              max: 3,
              chance: 0.3
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'end10'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c12: {
          notification: /*#__PURE__*/translate('a pack of lizards rounds the corner.'),
          combat: true,
          enemy: 'lizards',
          plural: true,
          chara: 'RRR',
          damage: 4,
          hit: 0.7,
          attackDelay: 0.7,
          health: 30,
          loot: {
            meat: {
              min: 3,
              max: 8,
              chance: 1
            },
            teeth: {
              min: 2,
              max: 4,
              chance: 1
            },
            scales: {
              min: 3,
              max: 5,
              chance: 1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'end10'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        c13: {
          text: [/*#__PURE__*/translate('strips of meat are hung up to dry in this ward.')],
          loot: {
            cured_meat: {
              min: 3,
              max: 10,
              chance: 1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end10',
                1: 'end11'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d1: {
          notification: /*#__PURE__*/translate('a large bird nests at the top of the stairs.'),
          combat: true,
          enemy: 'bird',
          chara: 'R',
          damage: 5,
          hit: 0.7,
          attackDelay: 1,
          health: 45,
          loot: {
            meat: {
              min: 5,
              max: 10,
              chance: 0.8
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end1',
                1: 'end2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d2: {
          text: [/*#__PURE__*/translate('the debris is denser here.'), /*#__PURE__*/translate('maybe some useful stuff in the rubble.')],
          loot: {
            bullets: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            steel: {
              min: 1,
              max: 10,
              chance: 0.8
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.01
            },
            cloth: {
              min: 1,
              max: 10,
              chance: 1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'end2'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d3: {
          notification: /*#__PURE__*/translate('a swarm of rats rushes up the tunnel.'),
          combat: true,
          enemy: 'rats',
          plural: true,
          chara: 'RRR',
          damage: 1,
          hit: 0.8,
          attackDelay: 0.25,
          health: 60,
          loot: {
            fur: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            teeth: {
              min: 5,
              max: 10,
              chance: 0.5
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end2',
                1: 'end3'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d4: {
          notification: /*#__PURE__*/translate('a large man attacks, waving a bayonet.'),
          combat: true,
          enemy: 'veteran',
          chara: 'D',
          damage: 6,
          hit: 0.8,
          attackDelay: 2,
          health: 45,
          loot: {
            bayonet: {
              min: 1,
              max: 1,
              chance: 0.5
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end4',
                1: 'end5'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d5: {
          notification: /*#__PURE__*/translate('a second soldier opens fire.'),
          combat: true,
          enemy: 'soldier',
          ranged: true,
          chara: 'D',
          damage: 8,
          hit: 0.8,
          attackDelay: 2,
          health: 50,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            rifle: {
              min: 1,
              max: 1,
              chance: 0.2
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'end5'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d6: {
          notification: /*#__PURE__*/translate('a masked soldier rounds the corner, gun drawn'),
          combat: true,
          enemy: 'commando',
          chara: 'D',
          ranged: true,
          damage: 3,
          hit: 0.9,
          attackDelay: 2,
          health: 55,
          loot: {
            rifle: {
              min: 1,
              max: 1,
              chance: 0.5
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end5',
                1: 'end6'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d7: {
          notification: /*#__PURE__*/translate('the crowd surges forward.'),
          combat: true,
          enemy: 'squatters',
          plural: true,
          chara: 'EEE',
          damage: 2,
          hit: 0.7,
          attackDelay: 0.5,
          health: 40,
          loot: {
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            teeth: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end7',
                1: 'end8'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d8: {
          notification: /*#__PURE__*/translate('a youth lashes out with a tree branch.'),
          combat: true,
          enemy: 'youth',
          chara: 'E',
          damage: 2,
          hit: 0.7,
          attackDelay: 1,
          health: 45,
          loot: {
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            teeth: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'end8'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d9: {
          notification: /*#__PURE__*/translate('a squatter stands firmly in the doorway of a small hut.'),
          combat: true,
          enemy: 'squatter',
          chara: 'E',
          damage: 3,
          hit: 0.8,
          attackDelay: 2,
          health: 20,
          loot: {
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            teeth: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                0.5: 'end8',
                1: 'end9'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        d10: {
          notification: /*#__PURE__*/translate('behind the door, a deformed figure awakes and attacks.'),
          combat: true,
          enemy: 'deformed',
          chara: 'T',
          damage: 8,
          hit: 0.6,
          attackDelay: 2,
          health: 40,
          loot: {
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            teeth: {
              min: 2,
              max: 2,
              chance: 1
            },
            steel: {
              min: 1,
              max: 3,
              chance: 0.6
            },
            scales: {
              min: 2,
              max: 3,
              chance: 0.1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'end14'
              }
            }
          }
        },
        d11: {
          notification: /*#__PURE__*/translate('as soon as the door is open a little bit, hundreds of tentacles erupt.'),
          combat: true,
          enemy: 'tentacles',
          plural: true,
          chara: 'TTT',
          damage: 2,
          hit: 0.6,
          attackDelay: 0.5,
          health: 60,
          loot: {
            meat: {
              min: 10,
              max: 20,
              chance: 1
            }
          },
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'end13'
              }
            }
          }
        },
        end1: {
          text: [/*#__PURE__*/translate('bird must have liked shiney things.'), /*#__PURE__*/translate('some good stuff woven into its nest.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            bullets: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            bolas: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.5
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end2: {
          text: [/*#__PURE__*/translate('not much here.'), /*#__PURE__*/translate('scavengers must have gotten to this place already.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            torch: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.5
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end3: {
          text: [
          /*#__PURE__*/
          /// TRANSLATORS : a platform in the subway
          translate('the tunnel opens up at another platform.'), /*#__PURE__*/translate('the walls are scorched from an old battle.'), /*#__PURE__*/translate('bodies and supplies from both sides litter the ground.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            rifle: {
              min: 1,
              max: 1,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            laser_rifle: {
              min: 1,
              max: 1,
              chance: 0.3
            },
            energy_cell: {
              min: 1,
              max: 5,
              chance: 0.3
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.3
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end4: {
          text: [/*#__PURE__*/translate('the small military outpost is well supplied.'), /*#__PURE__*/translate('arms and munitions, relics from the war, are neatly arranged on the store-room floor.'), /*#__PURE__*/translate('just as deadly now as they were then.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            rifle: {
              min: 1,
              max: 1,
              chance: 1
            },
            bullets: {
              min: 1,
              max: 10,
              chance: 1
            },
            grenade: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end5: {
          text: [/*#__PURE__*/translate('searching the bodies yields a few supplies.'), /*#__PURE__*/translate('more soldiers will be on their way.'), /*#__PURE__*/translate('time to move on.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            rifle: {
              min: 1,
              max: 1,
              chance: 1
            },
            bullets: {
              min: 1,
              max: 10,
              chance: 1
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            medicine: {
              min: 1,
              max: 4,
              chance: 0.1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end6: {
          text: [/*#__PURE__*/translate('the small settlement has clearly been burning a while.'), /*#__PURE__*/translate('the bodies of the wanderers that lived here are still visible in the flames.'), /*#__PURE__*/translate('still time to rescue a few supplies.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            laser_rifle: {
              min: 1,
              max: 1,
              chance: 0.5
            },
            energy_cell: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            cured_meat: {
              min: 1,
              max: 10,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end7: {
          text: [/*#__PURE__*/translate('the remaining settlers flee from the violence, their belongings forgotten.'), /*#__PURE__*/translate("there's not much, but some useful things can still be found.")],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            steel_sword: {
              min: 1,
              max: 1,
              chance: 0.8
            },
            energy_cell: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            cured_meat: {
              min: 1,
              max: 10,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end8: {
          text: [/*#__PURE__*/translate('the young settler was carrying a canvas sack.'), /*#__PURE__*/translate('it contains travelling gear, and a few trinkets.'), /*#__PURE__*/translate("there's nothing else here.")],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            steel_sword: {
              min: 1,
              max: 1,
              chance: 0.8
            },
            bolas: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            cured_meat: {
              min: 1,
              max: 10,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end9: {
          text: [/*#__PURE__*/translate('inside the hut, a child cries.'), /*#__PURE__*/translate('a few belongings rest against the walls.'), /*#__PURE__*/translate("there's nothing else here.")],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            rifle: {
              min: 1,
              max: 1,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            bolas: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.2
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end10: {
          text: [/*#__PURE__*/translate('the stench of rot and death fills the operating theatres.'), /*#__PURE__*/translate('a few items are scattered on the ground.'), /*#__PURE__*/translate('there is nothing else here.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            energy_cell: {
              min: 1,
              max: 1,
              chance: 0.3
            },
            medicine: {
              min: 1,
              max: 5,
              chance: 0.3
            },
            teeth: {
              min: 3,
              max: 8,
              chance: 1
            },
            scales: {
              min: 4,
              max: 7,
              chance: 0.9
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end11: {
          text: [/*#__PURE__*/translate('a pristine medicine cabinet at the end of a hallway.'), /*#__PURE__*/translate('the rest of the hospital is empty.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            energy_cell: {
              min: 1,
              max: 1,
              chance: 0.2
            },
            medicine: {
              min: 3,
              max: 10,
              chance: 1
            },
            teeth: {
              min: 1,
              max: 2,
              chance: 0.2
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end12: {
          text: [/*#__PURE__*/translate('someone had been stockpiling loot here.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            energy_cell: {
              min: 1,
              max: 3,
              chance: 0.2
            },
            medicine: {
              min: 3,
              max: 10,
              chance: 0.5
            },
            bullets: {
              min: 2,
              max: 8,
              chance: 1
            },
            torch: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            grenade: {
              min: 1,
              max: 1,
              chance: 0.5
            },
            alien_alloy: {
              min: 1,
              max: 2,
              chance: 0.8
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end13: {
          text: [/*#__PURE__*/translate('the tentacular horror is defeated.'), /*#__PURE__*/translate('inside, the remains of its victims are everywhere.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            steel_sword: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            rifle: {
              min: 1,
              max: 2,
              chance: 0.3
            },
            teeth: {
              min: 2,
              max: 8,
              chance: 1
            },
            cloth: {
              min: 3,
              max: 6,
              chance: 0.5
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end14: {
          text: [
          /*#__PURE__*/
          /// TRANSLATORS : warped means extremely disfigured.
          translate('the warped man lies dead.'), /*#__PURE__*/translate('the operating theatre has a lot of curious equipment.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            energy_cell: {
              min: 2,
              max: 5,
              chance: 0.8
            },
            medicine: {
              min: 3,
              max: 12,
              chance: 1
            },
            cloth: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            steel: {
              min: 2,
              max: 3,
              chance: 0.3
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.3
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        end15: {
          text: [/*#__PURE__*/translate('the old man had a small cache of interesting items.')],
          onLoad: function onLoad(engine) {
            engine.spaces.World.clearDungeon();
            engine.dispatch(engine.actions.game.city.setM({
              cleared: true
            }));
          },
          loot: {
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.8
            },
            medicine: {
              min: 1,
              max: 4,
              chance: 1
            },
            cured_meat: {
              min: 3,
              max: 7,
              chance: 1
            },
            bolas: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            fur: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave city'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        }
      }
    },
    house: {
      /* Abandoned House */
      title: /*#__PURE__*/translate('An Old House'),
      id: 'house',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('an old house remains here, once white siding yellowed and peeling.'), /*#__PURE__*/translate('the door hangs open.')],
          notification: /*#__PURE__*/translate('the remains of an old house stand as a monument to simpler times'),
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('go inside'),
              nextScene: {
                0.25: 'medicine',
                0.5: 'supplies',
                1: 'occupied'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        supplies: {
          text: [/*#__PURE__*/translate('the house is abandoned, but not yet picked over.'), /*#__PURE__*/translate('still a few drops of water in the old well.')],
          onLoad: function onLoad(engine) {
            var state = engine.getState();
            var curPos = state.game.world.curPos;
            engine.spaces.World.markVisited(curPos[0], curPos[1]);
            engine.spaces.World.setWater(engine.spaces.World.getMaxWater());
            engine.notify(translate('water replenished'));
          },
          loot: {
            cured_meat: {
              min: 1,
              max: 10,
              chance: 0.8
            },
            leather: {
              min: 1,
              max: 10,
              chance: 0.2
            },
            cloth: {
              min: 1,
              max: 10,
              chance: 0.5
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        medicine: {
          text: [/*#__PURE__*/translate('the house has been ransacked.'), /*#__PURE__*/translate('but there is a cache of medicine under the floorboards.')],
          onLoad: function onLoad(engine) {
            var state = engine.getState();
            var curPos = state.game.world.curPos;
            engine.spaces.World.markVisited(curPos[0], curPos[1]);
          },
          loot: {
            medicine: {
              min: 2,
              max: 5,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        occupied: {
          combat: true,
          enemy: 'squatter',
          chara: 'E',
          damage: 3,
          hit: 0.8,
          attackDelay: 2,
          health: 10,
          notification: /*#__PURE__*/translate('a man charges down the hall, a rusty blade in his hand'),
          onLoad: function onLoad(engine) {
            var state = engine.getState();
            var curPos = state.game.world.curPos;
            engine.spaces.World.markVisited(curPos[0], curPos[1]);
          },
          loot: {
            cured_meat: {
              min: 1,
              max: 10,
              chance: 0.8
            },
            leather: {
              min: 1,
              max: 10,
              chance: 0.2
            },
            cloth: {
              min: 1,
              max: 10,
              chance: 0.5
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        }
      }
    },
    battlefield: {
      /* Discovering an old battlefield */
      title: /*#__PURE__*/translate('A Forgotten Battlefield'),
      id: 'battlefield',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('a battle was fought here, long ago.'), /*#__PURE__*/translate('battered technology from both sides lays dormant on the blasted landscape.')],
          onLoad: function onLoad(engine) {
            var state = engine.getState();
            var curPos = state.game.world.curPos;
            engine.spaces.World.markVisited(curPos[0], curPos[1]);
          },
          loot: {
            rifle: {
              min: 1,
              max: 3,
              chance: 0.5
            },
            bullets: {
              min: 5,
              max: 20,
              chance: 0.8
            },
            laser_rifle: {
              min: 1,
              max: 3,
              chance: 0.3
            },
            energy_cell: {
              min: 5,
              max: 10,
              chance: 0.5
            },
            grenade: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            alien_alloy: {
              min: 1,
              max: 1,
              chance: 0.3
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        }
      }
    },
    borehole: {
      /* Admiring a huge borehole */
      title: /*#__PURE__*/translate('A Huge Borehole'),
      id: 'borehole',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('a huge hole is cut deep into the earth, evidence of the past harvest.'), /*#__PURE__*/translate('they took what they came for, and left.'), /*#__PURE__*/translate('castoff from the mammoth drills can still be found by the edges of the precipice.')],
          onLoad: function onLoad(engine) {
            var state = engine.getState();
            var curPos = state.game.world.curPos;
            engine.spaces.World.markVisited(curPos[0], curPos[1]);
          },
          loot: {
            alien_alloy: {
              min: 1,
              max: 3,
              chance: 1
            }
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        }
      }
    },
    ship: {
      /* Finding a way off this rock */
      title: /*#__PURE__*/translate('A Crashed Ship'),
      id: 'ship',
      scenes: {
        start: {
          onLoad: /*#__PURE__*/function () {
            var _onLoad = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine) {
              var state, curPos;
              return runtime_1.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      state = engine.getState();
                      curPos = state.game.world.curPos;
                      _context.next = 4;
                      return engine.spaces.World.markVisited(curPos[0], curPos[1]);

                    case 4:
                      _context.next = 6;
                      return engine.spaces.World.drawRoad();

                    case 6:
                      _context.next = 8;
                      return engine.dispatch(engine.actions.features.location.enableSpaceShip());

                    case 8:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            function onLoad(_x) {
              return _onLoad.apply(this, arguments);
            }

            return onLoad;
          }(),
          text: [/*#__PURE__*/translate('the familiar curves of a wanderer vessel rise up out of the dust and ash. '), /*#__PURE__*/translate("lucky that the natives can't work the mechanisms."), /*#__PURE__*/translate('with a little effort, it might fly again.')],
          buttons: {
            leavel: {
              text: /*#__PURE__*/translate('salvage'),
              nextScene: 'end'
            }
          }
        }
      }
    },
    sulphurmine: {
      /* Clearing the Sulphur Mine */
      title: /*#__PURE__*/translate('The Sulphur Mine'),
      id: 'sulphurmine',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate("the military is already set up at the mine's entrance."), /*#__PURE__*/translate('soldiers patrol the perimeter, rifles slung over their shoulders.')],
          notification: /*#__PURE__*/translate('a military perimeter is set up around the mine.'),
          buttons: {
            attack: {
              text: /*#__PURE__*/translate('attack'),
              nextScene: {
                1: 'a1'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        a1: {
          combat: true,
          enemy: 'soldier',
          ranged: true,
          chara: 'D',
          damage: 8,
          hit: 0.8,
          attackDelay: 2,
          health: 50,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            rifle: {
              min: 1,
              max: 1,
              chance: 0.2
            }
          },
          notification: /*#__PURE__*/translate('a soldier, alerted, opens fire.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'a2'
              }
            },
            run: {
              text: /*#__PURE__*/translate('run'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        a2: {
          combat: true,
          enemy: 'soldier',
          ranged: true,
          chara: 'D',
          damage: 8,
          hit: 0.8,
          attackDelay: 2,
          health: 50,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            bullets: {
              min: 1,
              max: 5,
              chance: 0.5
            },
            rifle: {
              min: 1,
              max: 1,
              chance: 0.2
            }
          },
          notification: /*#__PURE__*/translate('a second soldier joins the fight.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'a3'
              }
            },
            run: {
              text: /*#__PURE__*/translate('run'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        a3: {
          combat: true,
          enemy: 'veteran',
          chara: 'D',
          damage: 10,
          hit: 0.8,
          attackDelay: 2,
          health: 65,
          loot: {
            bayonet: {
              min: 1,
              max: 1,
              chance: 0.5
            },
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          notification: /*#__PURE__*/translate('a grizzled soldier attacks, waving a bayonet.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'cleared'
              }
            }
          }
        },
        cleared: {
          text: [/*#__PURE__*/translate('the military presence has been cleared.'), /*#__PURE__*/translate('the mine is now safe for workers.')],
          notification: /*#__PURE__*/translate('the sulphur mine is clear of dangers'),
          onLoad: /*#__PURE__*/function () {
            var _onLoad2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine) {
              var state, curPos;
              return runtime_1.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      state = engine.getState();
                      curPos = state.game.world.curPos;
                      _context2.next = 4;
                      return engine.spaces.World.drawRoad();

                    case 4:
                      _context2.next = 6;
                      return engine.dispatch(engine.actions.game.world.setM({
                        sulphurmine: true
                      }));

                    case 6:
                      _context2.next = 8;
                      return engine.spaces.World.markVisited(curPos[0], curPos[1]);

                    case 8:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            }));

            function onLoad(_x2) {
              return _onLoad2.apply(this, arguments);
            }

            return onLoad;
          }(),
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        }
      }
    },
    coalmine: {
      /* Clearing the Coal Mine */
      title: /*#__PURE__*/translate('The Coal Mine'),
      id: 'coalmine',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('camp fires burn by the entrance to the mine.'), /*#__PURE__*/translate('men mill about, weapons at the ready.')],
          notification: /*#__PURE__*/translate('this old mine is not abandoned'),
          buttons: {
            attack: {
              text: /*#__PURE__*/translate('attack'),
              nextScene: {
                1: 'a1'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        a1: {
          combat: true,
          enemy: 'man',
          chara: 'E',
          damage: 3,
          hit: 0.8,
          attackDelay: 2,
          health: 10,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          notification: /*#__PURE__*/translate('a man joins the fight'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'a2'
              }
            },
            run: {
              text: /*#__PURE__*/translate('run'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        a2: {
          combat: true,
          enemy: 'man',
          chara: 'E',
          damage: 3,
          hit: 0.8,
          attackDelay: 2,
          health: 10,
          loot: {
            cured_meat: {
              min: 1,
              max: 5,
              chance: 0.8
            },
            cloth: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          notification: /*#__PURE__*/translate('a man joins the fight'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'a3'
              }
            },
            run: {
              text: /*#__PURE__*/translate('run'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: 'end'
            }
          }
        },
        a3: {
          combat: true,
          enemy: 'chief',
          chara: 'D',
          damage: 5,
          hit: 0.8,
          attackDelay: 2,
          health: 20,
          loot: {
            cured_meat: {
              min: 5,
              max: 10,
              chance: 1
            },
            cloth: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            iron: {
              min: 1,
              max: 5,
              chance: 0.8
            }
          },
          notification: /*#__PURE__*/translate('only the chief remains.'),
          buttons: {
            "continue": {
              text: /*#__PURE__*/translate('continue'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'cleared'
              }
            }
          }
        },
        cleared: {
          text: [/*#__PURE__*/translate('the camp is still, save for the crackling of the fires.'), /*#__PURE__*/translate('the mine is now safe for workers.')],
          notification: /*#__PURE__*/translate('the coal mine is clear of dangers'),
          onLoad: /*#__PURE__*/function () {
            var _onLoad3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(engine) {
              var state, curPos;
              return runtime_1.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      state = engine.getState();
                      curPos = state.game.world.curPos;
                      _context3.next = 4;
                      return engine.spaces.World.drawRoad();

                    case 4:
                      _context3.next = 6;
                      return engine.dispatch(engine.actions.game.world.setM({
                        coalmine: true
                      }));

                    case 6:
                      _context3.next = 8;
                      return engine.spaces.World.markVisited(curPos[0], curPos[1]);

                    case 8:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            }));

            function onLoad(_x3) {
              return _onLoad3.apply(this, arguments);
            }

            return onLoad;
          }(),
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        }
      }
    },
    ironmine: {
      /* Clearing the Iron Mine */
      title: /*#__PURE__*/translate('The Iron Mine'),
      id: 'ironmine',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('an old iron mine sits here, tools abandoned and left to rust.'), /*#__PURE__*/translate('bleached bones are strewn about the entrance. many, deeply scored with jagged grooves.'), /*#__PURE__*/translate('feral howls echo out of the darkness.')],
          notification: /*#__PURE__*/translate('the path leads to an abandoned mine'),
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('go inside'),
              nextScene: {
                1: 'enter'
              },
              cost: {
                torch: 1
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        enter: {
          combat: true,
          enemy: 'beastly matriarch',
          chara: 'T',
          damage: 4,
          hit: 0.8,
          attackDelay: 2,
          health: 10,
          loot: {
            teeth: {
              min: 5,
              max: 10,
              chance: 1
            },
            scales: {
              min: 5,
              max: 10,
              chance: 0.8
            },
            cloth: {
              min: 5,
              max: 10,
              chance: 0.5
            }
          },
          notification: /*#__PURE__*/translate('a large creature lunges, muscles rippling in the torchlight'),
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              cooldown: config$1.Event.LEAVE_COOLDOWN,
              nextScene: {
                1: 'cleared'
              }
            }
          }
        },
        cleared: {
          text: [/*#__PURE__*/translate('the beast is dead.'), /*#__PURE__*/translate('the mine is now safe for workers.')],
          notification: /*#__PURE__*/translate('the iron mine is clear of dangers'),
          onLoad: /*#__PURE__*/function () {
            var _onLoad4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(engine) {
              var state, curPos;
              return runtime_1.wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      state = engine.getState();
                      curPos = state.game.world.curPos;
                      _context4.next = 4;
                      return engine.spaces.World.drawRoad();

                    case 4:
                      _context4.next = 6;
                      return engine.dispatch(engine.actions.game.world.setM({
                        ironmine: true
                      }));

                    case 6:
                      _context4.next = 8;
                      return engine.spaces.World.markVisited(curPos[0], curPos[1]);

                    case 8:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4);
            }));

            function onLoad(_x4) {
              return _onLoad4.apply(this, arguments);
            }

            return onLoad;
          }(),
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        }
      }
    },
    cache: {
      /* Cache - contains some of supplies from previous game */
      title: /*#__PURE__*/translate('A Destroyed Village'),
      id: 'cache',
      scenes: {
        start: {
          text: [/*#__PURE__*/translate('a destroyed village lies in the dust.'), /*#__PURE__*/translate('charred bodies litter the ground.')],
          /// TRANSLATORS : tang = strong metallic smell, wanderer afterburner = ship's engines
          notification: /*#__PURE__*/translate('the metallic tang of wanderer afterburner hangs in the air.'),
          buttons: {
            enter: {
              text: /*#__PURE__*/translate('enter'),
              nextScene: {
                1: 'underground'
              }
            },
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        },
        underground: {
          text: [/*#__PURE__*/translate('a shack stands at the center of the village.'), /*#__PURE__*/translate('there are still supplies inside.')],
          buttons: {
            take: {
              text: /*#__PURE__*/translate('take'),
              nextScene: {
                1: 'exit'
              }
            }
          }
        },
        exit: {
          text: [/*#__PURE__*/translate('all the work of a previous generation is here.'), /*#__PURE__*/translate('ripe for the picking.')],
          onLoad: function onLoad(engine) {
            var state = engine.getState();
            var curPos = state.game.world.curPos;
            engine.spaces.World.markVisited(curPos[0], curPos[1]);
            engine.prestige.collectStores();
          },
          buttons: {
            leave: {
              text: /*#__PURE__*/translate('leave'),
              nextScene: 'end'
            }
          }
        }
      }
    }
  };

  var events$6 = [{
    title: /*#__PURE__*/translate('A Snarling Beast'),
    isAvailable: function isAvailable(_, engine) {
      return engine.spaces.World.getDistance() <= 10 && engine.spaces.World.getTerrain() === config$1.World.TILE.FOREST;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'snarling beast',
        enemyName: /*#__PURE__*/translate('snarling beast'),
        deathMessage: /*#__PURE__*/translate('the snarling beast is dead'),
        chara: 'R',
        damage: 1,
        hit: 0.8,
        attackDelay: 1,
        health: 5,
        loot: {
          fur: {
            min: 1,
            max: 3,
            chance: 1
          },
          meat: {
            min: 1,
            max: 3,
            chance: 1
          },
          teeth: {
            min: 1,
            max: 3,
            chance: 0.8
          }
        },
        notification: /*#__PURE__*/translate('a snarling beast leaps out of the underbrush')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Gaunt Man'),
    isAvailable: function isAvailable(_, engine) {
      return engine.spaces.World.getDistance() <= 10 && engine.spaces.World.getTerrain() === config$1.World.TILE.BARRENS;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'gaunt man',
        enemyName: /*#__PURE__*/translate('gaunt man'),
        deathMessage: /*#__PURE__*/translate('the gaunt man is dead'),
        chara: 'E',
        damage: 2,
        hit: 0.8,
        attackDelay: 2,
        health: 6,
        loot: {
          cloth: {
            min: 1,
            max: 3,
            chance: 0.8
          },
          teeth: {
            min: 1,
            max: 2,
            chance: 0.8
          },
          leather: {
            min: 1,
            max: 2,
            chance: 0.5
          }
        },
        notification: /*#__PURE__*/translate('a gaunt man approaches, a crazed look in his eye')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Strange Bird'),
    isAvailable: function isAvailable(_, engine) {
      return engine.spaces.World.getDistance() <= 10 && engine.spaces.World.getTerrain() === config$1.World.TILE.FIELD;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'strange bird',
        enemyName: /*#__PURE__*/translate('strange bird'),
        deathMessage: /*#__PURE__*/translate('the strange bird is dead'),
        chara: 'R',
        damage: 3,
        hit: 0.8,
        attackDelay: 2,
        health: 4,
        loot: {
          scales: {
            min: 1,
            max: 3,
            chance: 0.8
          },
          teeth: {
            min: 1,
            max: 2,
            chance: 0.5
          },
          meat: {
            min: 1,
            max: 3,
            chance: 0.8
          }
        },
        notification: /*#__PURE__*/translate('a strange looking bird speeds across the plains')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Shivering Man'),
    isAvailable: function isAvailable(_, engine) {
      var distance = engine.spaces.World.getDistance();
      return distance > 10 && distance <= 20 && engine.spaces.World.getTerrain() === config$1.World.TILE.BARRENS;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'shivering man',
        enemyName: /*#__PURE__*/translate('shivering man'),
        deathMessage: /*#__PURE__*/translate('the shivering man is dead'),
        chara: 'E',
        damage: 5,
        hit: 0.5,
        attackDelay: 1,
        health: 20,
        loot: {
          cloth: {
            min: 1,
            max: 1,
            chance: 0.2
          },
          teeth: {
            min: 1,
            max: 2,
            chance: 0.8
          },
          leather: {
            min: 1,
            max: 1,
            chance: 0.2
          },
          medicine: {
            min: 1,
            max: 3,
            chance: 0.7
          }
        },
        notification: /*#__PURE__*/translate('a shivering man approaches and attacks with surprising strength')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Man-Eater'),
    isAvailable: function isAvailable(_, engine) {
      var distance = engine.spaces.World.getDistance();
      return distance > 10 && distance <= 20 && engine.spaces.World.getTerrain() === config$1.World.TILE.FOREST;
    },
    scenes: {
      'start': {
        combat: true,
        enemy: 'man-eater',
        enemyName: /*#__PURE__*/translate('man-eater'),
        deathMessage: /*#__PURE__*/translate('the man-eater is dead'),
        chara: 'T',
        damage: 3,
        hit: 0.8,
        attackDelay: 1,
        health: 25,
        loot: {
          'fur': {
            min: 5,
            max: 10,
            chance: 1
          },
          'meat': {
            min: 5,
            max: 10,
            chance: 1
          },
          'teeth': {
            min: 5,
            max: 10,
            chance: 0.8
          }
        },
        notification: /*#__PURE__*/translate('a large creature attacks, claws freshly bloodied')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Scavenger'),
    isAvailable: function isAvailable(_, engine) {
      var distance = engine.spaces.World.getDistance();
      return distance > 10 && distance <= 20 && engine.spaces.World.getTerrain() === config$1.World.TILE.BARRENS;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'scavenger',
        enemyName: /*#__PURE__*/translate('scavenger'),
        deathMessage: /*#__PURE__*/translate('the scavenger is dead'),
        chara: 'E',
        damage: 4,
        hit: 0.8,
        attackDelay: 2,
        health: 30,
        loot: {
          cloth: {
            min: 5,
            max: 10,
            chance: 0.8
          },
          leather: {
            min: 5,
            max: 10,
            chance: 0.8
          },
          iron: {
            min: 1,
            max: 5,
            chance: 0.5
          },
          medicine: {
            min: 1,
            max: 2,
            chance: 0.1
          }
        },
        notification: /*#__PURE__*/translate('a scavenger draws close, hoping for an easy score')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Huge Lizard'),
    isAvailable: function isAvailable(_, engine) {
      var distance = engine.spaces.World.getDistance();
      return distance > 10 && distance <= 20 && engine.spaces.World.getTerrain() === config$1.World.TILE.FIELD;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'lizard',
        enemyName: /*#__PURE__*/translate('lizard'),
        deathMessage: /*#__PURE__*/translate('the lizard is dead'),
        chara: 'T',
        damage: 5,
        hit: 0.8,
        attackDelay: 2,
        health: 20,
        loot: {
          scales: {
            min: 5,
            max: 10,
            chance: 0.8
          },
          teeth: {
            min: 5,
            max: 10,
            chance: 0.5
          },
          meat: {
            min: 5,
            max: 10,
            chance: 0.8
          }
        },
        notification: /*#__PURE__*/translate('the grass thrashes wildly as a huge lizard pushes through')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Feral Terror'),
    isAvailable: function isAvailable(_, engine) {
      var distance = engine.spaces.World.getDistance();
      return distance > 20 && engine.spaces.World.getTerrain() === config$1.World.TILE.FOREST;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'feral terror',
        enemyName: /*#__PURE__*/translate('feral terror'),
        deathMessage: /*#__PURE__*/translate('the feral terror is dead'),
        chara: 'T',
        damage: 6,
        hit: 0.8,
        attackDelay: 1,
        health: 45,
        loot: {
          fur: {
            min: 5,
            max: 10,
            chance: 1
          },
          meat: {
            min: 5,
            max: 10,
            chance: 1
          },
          teeth: {
            min: 5,
            max: 10,
            chance: 0.8
          }
        },
        notification: /*#__PURE__*/translate('a beast, wilder than imagining, erupts out of the foliage')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Soldier'),
    isAvailable: function isAvailable(_, engine) {
      var distance = engine.spaces.World.getDistance();
      return distance > 20 && engine.spaces.World.getTerrain() === config$1.World.TILE.BARRENS;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'soldier',
        enemyName: /*#__PURE__*/translate('soldier'),
        deathMessage: /*#__PURE__*/translate('the soldier is dead'),
        ranged: true,
        chara: 'D',
        damage: 8,
        hit: 0.8,
        attackDelay: 2,
        health: 50,
        loot: {
          cloth: {
            min: 5,
            max: 10,
            chance: 0.8
          },
          bullets: {
            min: 1,
            max: 5,
            chance: 0.5
          },
          rifle: {
            min: 1,
            max: 1,
            chance: 0.2
          },
          medicine: {
            min: 1,
            max: 2,
            chance: 0.1
          }
        },
        notification: /*#__PURE__*/translate('a soldier opens fire from across the desert')
      }
    }
  }, {
    title: /*#__PURE__*/translate('A Sniper'),
    isAvailable: function isAvailable(_, engine) {
      var distance = engine.spaces.World.getDistance();
      return distance > 20 && engine.spaces.World.getTerrain() === config$1.World.TILE.FIELD;
    },
    scenes: {
      start: {
        combat: true,
        enemy: 'sniper',
        enemyName: /*#__PURE__*/translate('sniper'),
        deathMessage: /*#__PURE__*/translate('the sniper is dead'),
        chara: 'D',
        damage: 15,
        hit: 0.8,
        attackDelay: 4,
        health: 30,
        ranged: true,
        loot: {
          cloth: {
            min: 5,
            max: 10,
            chance: 0.8
          },
          bullets: {
            min: 1,
            max: 5,
            chance: 0.5
          },
          rifle: {
            min: 1,
            max: 1,
            chance: 0.2
          },
          medicine: {
            min: 1,
            max: 2,
            chance: 0.1
          }
        },
        notification: /*#__PURE__*/translate('a shot rings out, from somewhere in the long grass')
      }
    }
  }];

  var GameModule = /*#__PURE__*/function () {
    function GameModule(engine) {
      this.engine = engine;
    }

    var _proto = GameModule.prototype;

    _proto.onArrival = function onArrival() {};

    _proto.clean = function clean() {};

    return GameModule;
  }();

  var OperationExecutor = /*#__PURE__*/function () {
    function OperationExecutor(engine, manager) {
      this.engine = engine;
      this.manager = manager;
      this.listeners = {};
    }

    var _proto = OperationExecutor.prototype;

    _proto.clearCooldown = /*#__PURE__*/function () {
      var _clearCooldown = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(id) {
        var opt;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opt = this.manager.findById(id);

                if (!opt) {
                  _context.next = 4;
                  break;
                }

                _context.next = 4;
                return this.engine.dispatch(this.engine.actions.operation.clearCooldown(opt.id));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function clearCooldown(_x) {
        return _clearCooldown.apply(this, arguments);
      }

      return clearCooldown;
    }();

    _proto.cooldown = /*#__PURE__*/function () {
      var _cooldown = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(id) {
        var opt;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opt = this.manager.findById(id);

                if (!opt) {
                  _context2.next = 4;
                  break;
                }

                _context2.next = 4;
                return this.engine.dispatch(this.engine.actions.operation.record(opt));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function cooldown(_x2) {
        return _cooldown.apply(this, arguments);
      }

      return cooldown;
    }();

    _proto.availableOperations = function availableOperations() {
      var _this = this;

      var rtn = [];
      var state = this.engine.getState();
      this.manager.operations.forEach(function (opt) {
        if (!opt.isAvailable || opt.isAvailable(_this.engine, opt)) {
          var item = {
            name: opt.name,
            id: opt.id
          };

          if (opt.desc) {
            item.desc = opt.desc;
          }

          if (opt.help) {
            item.help = opt.help(_this.engine, opt);
          }

          item.history = state.operation[opt.id];
          item.cooldown = opt.cooldown ? opt.cooldown(_this.engine, opt) : 0;
          item.meta = opt.meta;
          rtn.push(item);
        }
      });
      return rtn;
    };

    _proto.on = function on(operationId, callback) {
      if (!this.listeners[operationId]) {
        this.listeners[operationId] = [];
      }

      this.listeners[operationId].push(callback);
    };

    _proto.off = function off(operationId, callback) {
      if (this.listeners[operationId]) {
        var index = this.listeners[operationId].indexOf(callback);

        if (index > -1) {
          this.listeners[operationId].splice(index, 1);
        }
      }
    };

    _proto.emit = function emit(operationId, resp) {
      var listeners = this.listeners[operationId] || [];
      listeners.forEach(function (callback) {
        callback(resp);
      });
    };

    _proto.exec = /*#__PURE__*/function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(id) {
        var opt,
            state,
            optHistory,
            _len,
            args,
            _key,
            resp,
            _args3 = arguments;

        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opt = this.manager.findById(id);
                state = this.engine.getState();

                if (!opt) {
                  _context3.next = 19;
                  break;
                }

                optHistory = state.operation[id];

                if (!(optHistory && opt.cooldown)) {
                  _context3.next = 7;
                  break;
                }

                if (!(Date.now() <= optHistory.cooldownAt)) {
                  _context3.next = 7;
                  break;
                }

                return _context3.abrupt("return");

              case 7:
                if (!(opt.isAvailable && !opt.isAvailable(this.engine, opt))) {
                  _context3.next = 9;
                  break;
                }

                return _context3.abrupt("return");

              case 9:
                _context3.next = 11;
                return this.engine.dispatch(this.engine.actions.operation.record(opt));

              case 11:
                for (_len = _args3.length, args = /*#__PURE__*/new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args3[_key];
                }

                log("operation " + id + " start", args);
                _context3.next = 15;
                return opt.exec.apply(opt, [this.engine, opt].concat(args));

              case 15:
                resp = _context3.sent;
                this.emit(id, resp);
                log("operation " + id + " finish", resp);
                return _context3.abrupt("return", resp);

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function exec(_x3) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }();

    return OperationExecutor;
  }();

  var OperationManager = /*#__PURE__*/function () {
    function OperationManager() {
      this.operations = [];
    }

    var _proto2 = OperationManager.prototype;

    _proto2.findById = function findById(id) {
      return this.operations.find(function (opt) {
        return opt.id === id;
      });
    };

    _proto2.add = function add(operation) {
      var exist = this.findById(operation.id);

      if (exist) {
        return exist;
      }

      this.operations.push(operation);
      return operation;
    };

    return OperationManager;
  }();

  var operationManager = /*#__PURE__*/new OperationManager();

  var _cost, _cost2, _cost3, _cost4;
  operationManager.add({
    id: 'Combat.takeLoot',
    name: translate('take'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !lodash.isEmpty(state.events.loot) && state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World
    },
    help: function help(engine) {
      var state = engine.getState();
      var loots = [];
      Object.keys(state.events.loot).forEach(function (name) {
        if (state.events.loot[name] > 0) {
          loots.push(name);
        }
      });
      return {
        desc: "take " + loots.join(', '),
        parms: [loots]
      };
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine, _, name) {
        var state, lootNumLeft, Path, lootweight, freeSpace, _engine$actions$event, _engine$actions$game$;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = engine.getState();
                lootNumLeft = state.events.loot[name];
                Path = engine.spaces.Path;

                if (!(lootNumLeft > 0)) {
                  _context.next = 12;
                  break;
                }

                lootweight = Path.getWeight(name);
                freeSpace = engine.spaces.World.getFreeSpace();

                if (!(lootweight <= freeSpace)) {
                  _context.next = 11;
                  break;
                }

                _context.next = 9;
                return engine.dispatch(engine.actions.events.addM((_engine$actions$event = {}, _engine$actions$event["loot." + name] = -1, _engine$actions$event)));

              case 9:
                _context.next = 11;
                return engine.dispatch(engine.actions.game.world.addM((_engine$actions$game$ = {}, _engine$actions$game$["outfit." + name] = 1, _engine$actions$game$)));

              case 11:
                return _context.abrupt("return", true);

              case 12:
                return _context.abrupt("return", false);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x, _x2, _x3) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.takeAllLoot',
    name: translate('take all'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !lodash.isEmpty(state.events.loot) && state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World
    },
    help: function help(engine) {
      var state = engine.getState();
      var loots = [];
      Object.keys(state.events.loot).forEach(function (name) {
        if (state.events.loot[name] > 0) {
          loots.push(name);
        }
      });
      return {
        desc: "take all " + loots.join(', '),
        parms: [loots]
      };
    },
    exec: function () {
      var _exec2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine, _, name) {
        var state, lootNumLeft, i, taken;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                state = engine.getState();
                lootNumLeft = state.events.loot[name];
                i = 0;

              case 3:
                if (!(i < lootNumLeft)) {
                  _context2.next = 12;
                  break;
                }

                _context2.next = 6;
                return engine.operationExecutor.exec('Combat.takeLoot', name);

              case 6:
                taken = _context2.sent;

                if (taken) {
                  _context2.next = 9;
                  break;
                }

                return _context2.abrupt("break", 12);

              case 9:
                i++;
                _context2.next = 3;
                break;

              case 12:
                return _context2.abrupt("return", [i === lootNumLeft, i]);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function exec(_x4, _x5, _x6) {
        return _exec2.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.takeEverything',
    name: translate('take everything'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !lodash.isEmpty(state.events.loot) && state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World
    },
    exec: function () {
      var _exec3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(engine) {
        var state, loots, taken, success, name, res;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                state = engine.getState();
                loots = state.events.loot;
                taken = {};
                success = true;
                _context3.t0 = runtime_1.keys(loots);

              case 5:
                if ((_context3.t1 = _context3.t0()).done) {
                  _context3.next = 16;
                  break;
                }

                name = _context3.t1.value;
                _context3.next = 9;
                return engine.operationExecutor.exec('Combat.takeAllLoot', name);

              case 9:
                res = _context3.sent;
                taken[name] = res[1];

                if (res[0]) {
                  _context3.next = 14;
                  break;
                }

                success = false;
                return _context3.abrupt("break", 16);

              case 14:
                _context3.next = 5;
                break;

              case 16:
                return _context3.abrupt("return", [success, taken]);

              case 17:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function exec(_x7) {
        return _exec3.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.dropStuff',
    name: translate('drop stuff'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !lodash.isEmpty(state.game.world.outfit) && state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World
    },
    help: function help(engine) {
      var state = engine.getState();
      var loots = [];
      Object.keys(state.game.world.outfit).forEach(function (name) {
        if (state.events.loot[name] > 0) {
          loots.push(name);
        }
      });
      return {
        desc: "drop " + loots.join(', '),
        parms: [loots]
      };
    },
    exec: function () {
      var _exec4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(engine, _, name) {
        var num, state, stuffNum, dropNum, _engine$actions$event2, _engine$actions$game$2;

        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                num = 1;
                state = engine.getState();
                stuffNum = state.game.world.outfit[name];
                dropNum = Math.min(stuffNum, num);

                if (!(dropNum > 0)) {
                  _context4.next = 9;
                  break;
                }

                _context4.next = 7;
                return engine.dispatch(engine.actions.events.addM((_engine$actions$event2 = {}, _engine$actions$event2["loot." + name] = dropNum, _engine$actions$event2)));

              case 7:
                _context4.next = 9;
                return engine.dispatch(engine.actions.game.world.addM((_engine$actions$game$2 = {}, _engine$actions$game$2["outfit." + name] = -dropNum, _engine$actions$game$2)));

              case 9:
                return _context4.abrupt("return", dropNum);

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function exec(_x8, _x9, _x10) {
        return _exec4.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.eatMeatInFight',
    name: translate('eat meat'),
    cooldown: function cooldown() {
      return config$1.Event.EAT_COOLDOWN;
    },
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.events.enemys.length > 0 && !state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World,
      cost: (_cost = {}, _cost[exports.StoreCategory.cured_meat] = 1, _cost)
    },
    exec: function () {
      var _exec5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(engine) {
        var res;
        return runtime_1.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return engine.events.doHeal(exports.StoreCategory.cured_meat, engine.spaces.World.meatHeal());

              case 2:
                res = _context5.sent;

                if (!res) {
                  engine.operationExecutor.clearCooldown('Combat.eatMeatInFight');
                }

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function exec(_x11) {
        return _exec5.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.eatMeat',
    name: translate('eat meat'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World,
      cost: (_cost2 = {}, _cost2[exports.StoreCategory.cured_meat] = 1, _cost2)
    },
    exec: function () {
      var _exec6 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(engine) {
        var res;
        return runtime_1.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return engine.events.doHeal(exports.StoreCategory.cured_meat, engine.spaces.World.meatHeal());

              case 2:
                res = _context6.sent;

                if (!res) {
                  engine.operationExecutor.clearCooldown('Combat.eatMeat');
                }

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function exec(_x12) {
        return _exec6.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.useMedsInFight',
    name: translate('use meds'),
    cooldown: function cooldown() {
      return config$1.Event.MEDS_COOLDOWN;
    },
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.events.enemys.length > 0 && !state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World,
      cost: (_cost3 = {}, _cost3[exports.StoreCategory.medicine] = 1, _cost3)
    },
    exec: function () {
      var _exec7 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(engine) {
        var res;
        return runtime_1.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return engine.events.doHeal(exports.StoreCategory.medicine, engine.spaces.World.medsHeal());

              case 2:
                res = _context7.sent;

                if (!res) {
                  engine.operationExecutor.clearCooldown('Combat.useMedsInFight');
                }

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function exec(_x13) {
        return _exec7.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.useMeds',
    name: translate('use meds'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World,
      cost: (_cost4 = {}, _cost4[exports.StoreCategory.cured_meat] = 1, _cost4)
    },
    exec: function () {
      var _exec8 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(engine) {
        var res;
        return runtime_1.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return engine.events.doHeal(exports.StoreCategory.medicine, engine.spaces.World.medsHeal());

              case 2:
                res = _context8.sent;

                if (!res) {
                  engine.operationExecutor.clearCooldown('Combat.useMeds');
                }

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function exec(_x14) {
        return _exec8.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Combat.leave',
    name: translate('leave'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.events.won && state.engine.activeSpace === exports.GameSpace.World;
    },
    meta: {
      space: exports.GameSpace.World
    },
    exec: function () {
      var _exec9 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(engine) {
        return runtime_1.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                engine.events.endEvent();

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function exec(_x15) {
        return _exec9.apply(this, arguments);
      }

      return exec;
    }()
  });
  Object.keys(exports.WeaponCategory).forEach(function (name) {
    var _item$trade;

    var item = config$1.items[name];
    operationManager.add({
      id: "Combat.useWeapon." + name,
      name: translate(name),
      cooldown: function cooldown(engine, operation) {
        var cd = operation.meta.weapon.cooldown;
        var state = engine.getState();

        if (state.character.perks.unarmed_master) {
          cd /= 2;
        }

        return cd;
      },
      isAvailable: function isAvailable(engine, operation) {
        var state = engine.getState();
        var numWeapons = 0;

        for (var k in exports.WeaponCategory) {
          var weapon = config$1.items[k].weapon;

          if (!!state.game.world.outfit[k]) {
            if (typeof (weapon == null ? void 0 : weapon.damage) !== 'number' || weapon.damage === 0) {
              // Weapons that deal no damage don't count
              numWeapons--;
            } else if (weapon.cost) {
              for (var c in weapon.cost) {
                var num = weapon.cost[c];

                if (state.game.world.outfit[c] < num) {
                  // Can't use this weapon, so don't count it
                  numWeapons--;
                }
              }
            }

            numWeapons++;
          }
        }

        var name = operation.meta.name;

        if (numWeapons === 0 && name === 'fists') {
          return state.events.enemys.length > 0 && !state.events.won && state.engine.activeSpace === exports.GameSpace.World;
        } else {
          var outfitNum = state.path.outfit[name];
          return !!outfitNum && state.events.enemys.length > 0 && !state.events.won && state.engine.activeSpace === exports.GameSpace.World;
        }
      },
      meta: {
        space: exports.GameSpace.World,
        cost: (_item$trade = item.trade) == null ? void 0 : _item$trade.cost,
        weapon: item.weapon,
        name: name
      },
      exec: function () {
        var _exec10 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(engine, operation) {
          var name, event, state, item, weapon, punches, outfit, k, dmg, newState;
          return runtime_1.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  name = operation.meta.name;
                  event = engine.events.getActiveEvent();
                  state = engine.getState();

                  if (!(!event || state.game.world.stunned && state.game.world.stunned >= Date.now())) {
                    _context10.next = 6;
                    break;
                  }

                  engine.operationExecutor.clearCooldown("Combat.useWeapon." + name);
                  return _context10.abrupt("return");

                case 6:
                  item = config$1.items[name];
                  weapon = item.weapon;

                  if (weapon.type === 'unarmed') {
                    punches = (state.character.statistics.punches || 0) + 1;
                    engine.dispatch(engine.actions.character.statistics.setM({
                      punches: punches
                    }));

                    if (punches === 50 && !state.character.perks.boxer) {
                      engine.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.boxer));
                    } else if (punches === 150 && !state.character.perks.martial_artist) {
                      engine.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.martial_artist));
                    } else if (punches === 300 && !state.character.perks.unarmed_master) {
                      engine.dispatch(engine.actions.character.perks.addPerk(exports.PerkCategory.unarmed_master));
                    }
                  }

                  if (!(weapon != null && weapon.cost)) {
                    _context10.next = 21;
                    break;
                  }

                  outfit = _extends({}, state.game.world.outfit);
                  _context10.t0 = runtime_1.keys(weapon.cost);

                case 12:
                  if ((_context10.t1 = _context10.t0()).done) {
                    _context10.next = 20;
                    break;
                  }

                  k = _context10.t1.value;

                  if (!(outfit[k] < weapon.cost[k])) {
                    _context10.next = 17;
                    break;
                  }

                  engine.operationExecutor.clearCooldown("Combat.useWeapon." + name);
                  return _context10.abrupt("return");

                case 17:
                  outfit[k] = outfit[k] - weapon.cost[k];
                  _context10.next = 12;
                  break;

                case 20:
                  engine.dispatch(engine.actions.game.world.setM({
                    outfit: outfit
                  }));

                case 21:
                  dmg = -1;

                  if (Math.random() <= engine.events.getHitChance()) {
                    dmg = weapon == null ? void 0 : weapon.damage;

                    if (typeof dmg === 'number') {
                      if ((weapon == null ? void 0 : weapon.type) === 'unarmed' && state.character.perks.boxer) {
                        dmg *= 2;
                      }

                      if ((weapon == null ? void 0 : weapon.type) === 'unarmed' && state.character.perks.martial_artist) {
                        dmg *= 3;
                      }

                      if ((weapon == null ? void 0 : weapon.type) === 'unarmed' && state.character.perks.unarmed_master) {
                        dmg *= 2;
                      }

                      if ((weapon == null ? void 0 : weapon.type) === 'melee' && state.character.perks.barbarian) {
                        dmg = Math.floor(dmg * 1.5);
                      }
                    }
                  }

                  _context10.next = 25;
                  return engine.events.damageEnemy(dmg, weapon);

                case 25:
                  newState = engine.getState();

                  if (newState.events.enemys[0].health <= 0 && !state.events.won) {
                    engine.events.winFight();
                  }

                case 27:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10);
        }));

        function exec(_x16, _x17) {
          return _exec10.apply(this, arguments);
        }

        return exec;
      }()
    });
  });

  operationManager.add({
    id: 'Events.choice',
    name: translate('choice'),
    isAvailable: function isAvailable(engine) {
      var scene = engine.events.getActiveScene();
      return scene && scene.buttons;
    },
    help: function help(engine) {
      var scene = engine.events.getActiveScene();
      var choice = [];
      Object.keys((scene == null ? void 0 : scene.buttons) || {}).forEach(function (btn) {
        choice.push(btn);
      });
      return {
        desc: "choice " + choice.join(', '),
        parms: [choice]
      };
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine, _, name) {
        var event, state, button, costMod, store, storeKey, num, nextScene, r, lowestMatch, i, sceneRate;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event = engine.events.getActiveEvent();

                if (event) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                state = engine.getState();
                button = event.scenes[state.events.activeScene].buttons[name];
                costMod = {};

                if (!button.cost) {
                  _context.next = 25;
                  break;
                }

                _context.t0 = runtime_1.keys(button.cost);

              case 8:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 18;
                  break;
                }

                store = _context.t1.value;
                storeKey = store;
                num = state.engine.activeSpace === exports.GameSpace.World ? state.path.outfit[storeKey] || 0 : state.stores[storeKey] || 0;

                if (!(num < (button.cost[storeKey] || 0))) {
                  _context.next = 15;
                  break;
                }

                engine.notify("not enough " + storeKey);
                return _context.abrupt("return", false);

              case 15:
                costMod[storeKey] = -(button.cost[storeKey] || 0);
                _context.next = 8;
                break;

              case 18:
                if (!(state.engine.activeSpace === exports.GameSpace.World)) {
                  _context.next = 23;
                  break;
                }

                _context.next = 21;
                return engine.dispatch(engine.actions.path.outfit.addM(costMod));

              case 21:
                _context.next = 25;
                break;

              case 23:
                _context.next = 25;
                return engine.dispatch(engine.actions.stores.addM(costMod));

              case 25:
                if (typeof button.onChoose === 'function') {
                  button.onChoose(engine);
                }

                if (!button.reward) {
                  _context.next = 29;
                  break;
                }

                _context.next = 29;
                return engine.dispatch(engine.actions.stores.addM(button.reward));

              case 29:
                if (button.notification) {
                  engine.notify(button.notification);
                }

                if (!button.nextScene) {
                  _context.next = 47;
                  break;
                }

                nextScene = button.nextScene;

                if (!(nextScene === 'end')) {
                  _context.next = 36;
                  break;
                }

                engine.events.endEvent();
                _context.next = 47;
                break;

              case 36:
                if (!(typeof nextScene === 'string')) {
                  _context.next = 40;
                  break;
                }

                engine.events.loadScene(nextScene);
                _context.next = 47;
                break;

              case 40:
                r = Math.random();
                lowestMatch = null;

                for (i in nextScene) {
                  sceneRate = parseFloat(i);

                  if (r < sceneRate && (lowestMatch == null || i < lowestMatch)) {
                    lowestMatch = i;
                  }
                }

                if (!(lowestMatch !== null)) {
                  _context.next = 46;
                  break;
                }

                engine.events.loadScene(nextScene[lowestMatch]);
                return _context.abrupt("return");

              case 46:
                engine.events.endEvent();

              case 47:
                return _context.abrupt("return", true);

              case 48:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x, _x2, _x3) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }()
  });

  var Events = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(Events, _GameModule);

    function Events(engine) {
      var _this;

      _this = _GameModule.call(this, engine) || this;
      _this._enemyAttackTimer = null;
      _this.eventPool = {
        Global: events$1,
        Room: events$2,
        Outside: events$3,
        World: Object.values(events$5),
        Fight: events$6,
        Ship: []
      };
      _this.eventMap = {
        Global: events$1,
        Room: events$2,
        Outside: events$3,
        Market: events$4
      };

      _this.scheduleNextEvent();

      _this.initDelay();

      return _this;
    }

    var _proto = Events.prototype;

    _proto.winFight = function winFight() {
      clearInterval(this._enemyAttackTimer);
      this.engine.dispatch(this.engine.actions.events.winFight());
    };

    _proto.getHitChance = function getHitChance() {
      var state = this.engine.getState();

      if (state.character.perks.precise) {
        return config$1.World.BASE_HIT_CHANCE + 0.1;
      }

      return config$1.World.BASE_HIT_CHANCE;
    };

    _proto.doHeal = /*#__PURE__*/function () {
      var _doHeal = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(cost, heal) {
        var state, _changed, changed, hp;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = this.engine.getState();

                if (!state.game.world.outfit[cost]) {
                  _context.next = 11;
                  break;
                }

                changed = (_changed = {}, _changed["outfit." + cost] = (state.path.outfit[cost] || 0) - 1, _changed);
                hp = state.game.world.health + heal;
                hp = Math.min(this.engine.spaces.World.getMaxHealth(), hp);
                changed.health = hp;
                _context.next = 8;
                return this.engine.dispatch(this.engine.actions.game.world.setM(changed));

              case 8:
                return _context.abrupt("return", true);

              case 11:
                this.engine.notify("not enough " + cost);

              case 12:
                return _context.abrupt("return", false);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function doHeal(_x, _x2) {
        return _doHeal.apply(this, arguments);
      }

      return doHeal;
    }();

    _proto.getCurrentSpaceEventsPool = function getCurrentSpaceEventsPool() {
      var space = this.engine.getState().engine.activeSpace;

      if (space === exports.GameSpace.World) {
        return [].concat(this.eventPool.World, this.eventPool.Fight);
      } else if (space === exports.GameSpace.Ship) {
        return [].concat(this.eventPool.Ship, this.eventPool.Global);
      } else {
        return [].concat(this.eventPool.Global, this.eventPool[space] || []);
      }
    };

    _proto.triggerEvent = function triggerEvent() {
      var space = this.engine.getState().engine.activeSpace;

      if (space !== exports.GameSpace.World && this.getActiveEvent() === null) {
        var pool = this.getCurrentSpaceEventsPool();
        var possibleEvents = [];

        for (var i in pool) {
          var event = pool[i];

          if (event.isAvailable && event.isAvailable(this.engine.store.getState(), this.engine)) {
            possibleEvents.push(event);
          }
        }

        if (possibleEvents.length === 0) {
          this.scheduleNextEvent(0.5);
          return;
        } else {
          var r = Math.floor(Math.random() * possibleEvents.length);
          this.startEvent(possibleEvents[r]);
        }
      }

      this.scheduleNextEvent();
    };

    _proto.startEvent = /*#__PURE__*/function () {
      var _startEvent = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(event) {
        var pool, eventIndex, eventTitle;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (event) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                pool = this.getCurrentSpaceEventsPool();
                eventIndex = pool.indexOf(event);

                if (eventIndex === -1) {
                  eventIndex = pool.findIndex(function (e) {
                    return e.id === event.id && typeof e.id !== 'undefined';
                  });
                }

                eventTitle = eventIndex > -1 ? pool[eventIndex].title : '';

                if (!eventTitle) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 9;
                return this.engine.dispatch(this.engine.actions.events.push(eventTitle));

              case 9:
                _context2.next = 11;
                return this.loadScene('start');

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function startEvent(_x3) {
        return _startEvent.apply(this, arguments);
      }

      return startEvent;
    }();

    _proto.loadScene = /*#__PURE__*/function () {
      var _loadScene = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(sceneName) {
        var state, eventTitle, pool, event, scene;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                state = this.engine.getState();
                eventTitle = state.events.eventStack[0];
                pool = this.getCurrentSpaceEventsPool();
                event = pool.find(function (evt) {
                  return evt.title === eventTitle;
                });

                if (!event) {
                  sceneName = 'end';
                }

                _context3.next = 7;
                return this.engine.dispatch(this.engine.actions.events.cleanEnemys());

              case 7:
                this.engine.dispatch(this.engine.actions.events.setM({
                  activeScene: sceneName
                }));
                scene = event == null ? void 0 : event.scenes[sceneName];

                if (scene) {
                  _context3.next = 11;
                  break;
                }

                return _context3.abrupt("return");

              case 11:
                if (scene.onLoad) {
                  scene.onLoad(this.engine);
                }

                if (scene.notification) {
                  this.engine.notify(scene.notification);
                }

                if (scene.reward) {
                  this.engine.dispatch(this.engine.actions.stores.addM(scene.reward));
                }

                if (scene.combat) {
                  this.startCombat(scene);
                } else {
                  this.startStory(scene);
                }

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function loadScene(_x4) {
        return _loadScene.apply(this, arguments);
      }

      return loadScene;
    }();

    _proto.addEvent = function addEvent(space, event) {
      var events = this.eventPool[space];
      var exist = events.find(function (e) {
        return e.id === event.id;
      });

      if (!exist) {
        this.eventPool[space].push(event);
      }
    };

    _proto.startCombat = function startCombat(scene) {
      this.setRandomLoots(scene.loot);
      this.engine.dispatch(this.engine.actions.events.setSceneEnemy(scene));
      clearInterval(this._enemyAttackTimer);
      this._enemyAttackTimer = this.engine.setInterval(this.enemyAttack.bind(this), scene.attackDelay * 1000);
    };

    _proto.startStory = function startStory(scene) {
      this.setRandomLoots(scene.loot);
    };

    _proto.enemyAttack = /*#__PURE__*/function () {
      var _enemyAttack = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
        var event, state, scene, i, len, enemy, toHit, dmg, newState;
        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                event = this.getActiveEvent();

                if (event) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return");

              case 3:
                state = this.engine.getState();
                scene = event.scenes[state.events.activeScene];

                if (scene) {
                  _context4.next = 7;
                  break;
                }

                return _context4.abrupt("return");

              case 7:
                i = 0, len = state.events.enemys.length;

              case 8:
                if (!(i < len)) {
                  _context4.next = 20;
                  break;
                }

                enemy = state.events.enemys[i];

                if (enemy.stunned) {
                  _context4.next = 17;
                  break;
                }

                toHit = scene.hit;
                toHit *= state.character.perks.evasive ? 0.8 : 1;
                dmg = -1;

                if (Math.random() <= toHit) {
                  dmg = scene.damage;
                }

                _context4.next = 17;
                return this.damageAdventurer(enemy, dmg);

              case 17:
                i++;
                _context4.next = 8;
                break;

              case 20:
                newState = this.engine.getState();

                if (newState.game.world.health <= 0) {
                  clearInterval(this._enemyAttackTimer);
                  this.endEvent();
                  this.engine.spaces.World.die();
                }

              case 22:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function enemyAttack() {
        return _enemyAttack.apply(this, arguments);
      }

      return enemyAttack;
    }();

    _proto.damageEnemy = /*#__PURE__*/function () {
      var _damageEnemy = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(dmg, weapon) {
        var state, hp;
        return runtime_1.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                state = this.engine.getState();
                hp = state.events.enemys[0].health;

                if (typeof dmg === 'number') {
                  if (dmg < 0) {
                    dmg = 0;
                    this.engine.dispatch(this.engine.actions.events.logFight({
                      time: Date.now(),
                      type: 'miss',
                      target: 'enemy',
                      meta: {
                        weapon: weapon
                      }
                    }));
                  } else {
                    hp = hp - dmg < 0 ? 0 : hp - dmg;
                    this.engine.dispatch(this.engine.actions.events.setM({
                      'enemys[0].health': hp
                    }));
                    this.engine.dispatch(this.engine.actions.events.logFight({
                      time: Date.now(),
                      type: 'damage',
                      target: 'enemy',
                      meta: {
                        dmg: dmg,
                        weapon: weapon
                      }
                    }));
                  }
                } else {
                  if (dmg == 'stun') {
                    this.engine.dispatch(this.engine.actions.events.setM({
                      'enemys[0].stunned': Date.now() + config$1.Event.STUN_DURATION
                    }));
                    this.engine.dispatch(this.engine.actions.events.logFight({
                      time: Date.now(),
                      type: 'stunned',
                      target: 'enemy',
                      meta: {
                        weapon: weapon
                      }
                    }));
                  }
                }

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function damageEnemy(_x5, _x6) {
        return _damageEnemy.apply(this, arguments);
      }

      return damageEnemy;
    }();

    _proto.damageAdventurer = function damageAdventurer(_, dmg) {
      var state = this.engine.getState();
      var hp = state.game.world.health;

      if (typeof dmg === 'number') {
        if (dmg < 0) {
          this.engine.dispatch(this.engine.actions.events.logFight({
            time: Date.now(),
            type: 'miss',
            target: 'player'
          }));
          dmg = 0;
        } else {
          hp = hp - dmg < 0 ? 0 : hp - dmg;
          this.engine.spaces.World.setHp(hp);
          this.engine.dispatch(this.engine.actions.events.logFight({
            time: Date.now(),
            type: 'damage',
            target: 'player',
            meta: {
              dmg: dmg
            }
          }));
        }
      } else {
        if (dmg == 'stun') {
          this.engine.dispatch(this.engine.actions.game.world.setM({
            stunned: Date.now() + config$1.Event.STUN_DURATION
          }));
          this.engine.dispatch(this.engine.actions.events.logFight({
            time: Date.now(),
            type: 'stunned',
            target: 'player'
          }));
        }
      }
    };

    _proto.setRandomLoots = function setRandomLoots(lootList) {
      var randomLoot = {};
      lootList = lootList || {};

      for (var k in lootList) {
        var loot = lootList[k];

        if (Math.random() < loot.chance) {
          var num = Math.floor(Math.random() * (loot.max - loot.min)) + loot.min;
          randomLoot[k] = num;
        }
      }

      this.engine.dispatch(this.engine.actions.events.setM({
        loot: randomLoot
      }));
    };

    _proto.triggerFight = function triggerFight() {
      var possibleFights = [];
      var state = this.engine.getState();

      for (var i in this.eventPool.Fight) {
        var fight = this.eventPool.Fight[i];

        if (fight.isAvailable && fight.isAvailable(state, this.engine)) {
          possibleFights.push(fight);
        }
      }

      var r = Math.floor(Math.random() * possibleFights.length);
      this.startEvent(possibleFights[r]);
    };

    _proto.scheduleNextEvent = function scheduleNextEvent(scale) {
      var nextEvent = Math.floor(Math.random() * (config$1.Event.EVENT_TIME_RANGE[1] - config$1.Event.EVENT_TIME_RANGE[0])) + config$1.Event.EVENT_TIME_RANGE[0];

      if (scale && scale > 0) {
        nextEvent *= scale;
      }

      log('next event scheduled in ' + nextEvent + ' minutes');
      this.engine.setTimeout(this.triggerEvent.bind(this), nextEvent * 60 * 1000);
    };

    _proto.saveDelay = function saveDelay(action, stateName, delay) {
      var _this2 = this;

      if (delay) {
        var _this$engine$store, _this$engine$actions$;

        (_this$engine$store = this.engine.store) == null ? void 0 : _this$engine$store.dispatch(this.engine.actions.delay.setM((_this$engine$actions$ = {}, _this$engine$actions$[stateName] = delay, _this$engine$actions$)));
      } else {
        var _this$engine$store2;

        delay = ((_this$engine$store2 = this.engine.store) == null ? void 0 : _this$engine$store2.getState().delay[stateName]) || 0;
      }

      var interval = this.engine.setInterval(function () {
        var _this2$engine$store, _this2$engine$store2, _this2$engine$actions;

        (_this2$engine$store = _this2.engine.store) == null ? void 0 : _this2$engine$store.dispatch(_this2.engine.actions.delay.setM((_this2$engine$actions = {}, _this2$engine$actions[stateName] = (((_this2$engine$store2 = _this2.engine.store) == null ? void 0 : _this2$engine$store2.getState().delay[stateName]) || 0) - 0.5, _this2$engine$actions)));
      }, 500);
      this.engine.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
        var _this2$engine$store3, _this2$engine$actions2, _this2$engine$store4, _this2$engine$store5;

        return runtime_1.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                clearInterval(interval);
                _context6.next = 3;
                return (_this2$engine$store3 = _this2.engine.store) == null ? void 0 : _this2$engine$store3.dispatch(_this2.engine.actions.delay.setM((_this2$engine$actions2 = {}, _this2$engine$actions2[stateName] = undefined, _this2$engine$actions2)));

              case 3:
                _context6.next = 5;
                return (_this2$engine$store4 = _this2.engine.store) == null ? void 0 : _this2$engine$store4.dispatch(_this2.engine.actions.delay.removeM([stateName]));

              case 5:
                (_this2$engine$store5 = _this2.engine.store) == null ? void 0 : _this2$engine$store5.dispatch(_this2.engine.actions.delay.clean());
                action(_this2.engine);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      })), (delay || 0) * 1000);
    };

    _proto.clean = function clean() {
      clearInterval(this._enemyAttackTimer);

      _GameModule.prototype.clean.call(this);
    };

    _proto.recallDelay = function recallDelay(stateName, target) {
      var _this$engine$store3;

      var state = lodash.get((_this$engine$store3 = this.engine.store) == null ? void 0 : _this$engine$store3.getState().events, stateName);

      for (var i in state) {
        if (lodash.isObject(state[i])) {
          this.recallDelay(stateName + '["' + i + '"]', target[i]);
        } else {
          if (typeof target[i] == 'function') {
            target[i](this.engine);
          }
        }
      }
    };

    _proto.initDelay = function initDelay() {
      var _this$engine$store4;

      var state = (_this$engine$store4 = this.engine.store) == null ? void 0 : _this$engine$store4.getState().delay;

      for (var i in state) {
        if (lodash.isObject(state[i])) {
          this.recallDelay(i, this.eventMap[i]);
        }
      }
    };

    _proto.getActiveScene = function getActiveScene() {
      var state = this.engine.getState();
      var event = this.getActiveEvent();

      if (!event) {
        return null;
      }

      return event.scenes[state.events.activeScene] || null;
    };

    _proto.getActiveEvent = function getActiveEvent() {
      var state = this.engine.getState();

      if (state.events.eventStack.length > 0) {
        var pool = this.getCurrentSpaceEventsPool();
        return pool.find(function (evt) {
          return evt.title === state.events.eventStack[0];
        }) || null;
      }

      return null;
    };

    _proto.endEvent = function endEvent() {
      this.engine.dispatch(this.engine.actions.events.end({}));
    };

    return Events;
  }(GameModule);

  operationManager.add({
    id: 'World.moveSouth',
    name: translate('south'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      var event = engine.events.getActiveEvent();
      return state.engine.activeSpace === exports.GameSpace.World && !event;
    },
    meta: {
      space: exports.GameSpace.World
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine) {
        var curPos;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                curPos = engine.getState().game.world.curPos;

                if (curPos[1] < config$1.World.RADIUS * 2) {
                  engine.spaces.World.move(config$1.World.SOUTH);
                }

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'World.moveNorth',
    name: translate('north'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      var event = engine.events.getActiveEvent();
      return state.engine.activeSpace === exports.GameSpace.World && !event;
    },
    meta: {
      space: exports.GameSpace.World
    },
    exec: function () {
      var _exec2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine) {
        var curPos;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                curPos = engine.getState().game.world.curPos;

                if (curPos[1] > 0) {
                  engine.spaces.World.move(config$1.World.NORTH);
                }

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function exec(_x2) {
        return _exec2.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'World.moveWest',
    name: translate('west'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      var event = engine.events.getActiveEvent();
      return state.engine.activeSpace === exports.GameSpace.World && !event;
    },
    meta: {
      space: exports.GameSpace.World
    },
    exec: function () {
      var _exec3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(engine) {
        var curPos;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                curPos = engine.getState().game.world.curPos;

                if (curPos[0] > 0) {
                  engine.spaces.World.move(config$1.World.WEST);
                }

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function exec(_x3) {
        return _exec3.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'World.moveEast',
    name: translate('east'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      var event = engine.events.getActiveEvent();
      return state.engine.activeSpace === exports.GameSpace.World && !event;
    },
    meta: {
      space: exports.GameSpace.World
    },
    exec: function () {
      var _exec4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(engine) {
        var curPos;
        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                curPos = engine.getState().game.world.curPos;

                if (curPos[0] < config$1.World.RADIUS * 2) {
                  engine.spaces.World.move(config$1.World.EAST);
                }

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function exec(_x4) {
        return _exec4.apply(this, arguments);
      }

      return exec;
    }()
  });

  var World = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(World, _GameModule);

    function World(engine) {
      var _this;

      _this = _GameModule.call(this, engine) || this;
      var state = engine.store.getState();

      if (state.previous.stores) {
        config$1.World.LANDMARKS[config$1.World.TILE.CACHE] = {
          num: 1,
          minRadius: 10,
          maxRadius: config$1.World.RADIUS * 1.5,
          scene: 'cache',
          label: translate('A&nbsp;Destroyed&nbsp;Village')
        };
      }

      if (!state.features.location.Path) {
        var map = _this.generateMap();

        var mask = _this.newMask();

        var ship = _this.mapSearch(config$1.World.TILE.SHIP, map, 1);

        var dir;

        if (ship) {
          dir = _this.compassDir(ship[0]);
        }

        engine.dispatch(engine.actions.game.world.setM({
          map: map,
          mask: mask,
          ship: ship,
          dir: dir
        }));

        _this.testMap();
      }

      return _this;
    }

    var _proto = World.prototype;

    _proto.newMask = function newMask() {
      var RADIUS = config$1.World.RADIUS;
      var mask = new Array(RADIUS * 2 + 1);

      for (var i = 0; i <= RADIUS * 2; i++) {
        mask[i] = new Array(RADIUS * 2 + 1);
      }

      this.lightMap(RADIUS, RADIUS, mask);
      return mask;
    };

    _proto.lightMap = function lightMap(x, y, mask) {
      var _this$engine$store;

      var state = (_this$engine$store = this.engine.store) == null ? void 0 : _this$engine$store.getState();
      var r = config$1.World.LIGHT_RADIUS;
      r *= state != null && state.character.perks.scout ? 2 : 1;
      this.uncoverMap(x, y, r, mask);
      return mask;
    };

    _proto.uncoverMap = function uncoverMap(x, y, r, mask) {
      mask[x][y] = true;

      for (var i = -r; i <= r; i++) {
        for (var j = -r + Math.abs(i); j <= r - Math.abs(i); j++) {
          if (y + j >= 0 && y + j <= config$1.World.RADIUS * 2 && x + i <= config$1.World.RADIUS * 2 && x + i >= 0) {
            mask[x + i][y + j] = true;
          }
        }
      }
    };

    _proto.getTerrain = function getTerrain() {
      var state = this.engine.getState();
      var curPos = state.game.world.curPos;
      return state.game.world.map[curPos[0]][curPos[1]];
    };

    _proto.markVisited = function markVisited(x, y) {
      this.engine.dispatch(this.engine.actions.game.world.visit({
        x: x,
        y: y
      }));
    };

    _proto.clearDungeon = function clearDungeon() {
      var state = this.engine.getState();
      var curPos = state.game.world.curPos;
      this.engine.dispatch(this.engine.actions.game.world.setMap({
        pos: curPos,
        value: config$1.World.TILE.OUTPOST
      }));
      this.drawRoad();
    };

    _proto.findClosestRoad = function findClosestRoad(startPos) {
      var state = this.engine.getState();
      var searchX,
          searchY,
          dtmp,
          x = 0,
          y = 0,
          dx = 1,
          dy = -1;

      for (var i = 0; i < Math.pow(this.getDistance(startPos, config$1.World.VILLAGE_POS) + 2, 2); i++) {
        searchX = startPos[0] + x;
        searchY = startPos[1] + y;

        if (0 < searchX && searchX < config$1.World.RADIUS * 2 && 0 < searchY && searchY < config$1.World.RADIUS * 2) {
          // check for road
          var tile = state.game.world.map[searchX][searchY];

          if (tile === config$1.World.TILE.ROAD || tile === config$1.World.TILE.OUTPOST && !(x === 0 && y === 0) || // outposts are connected to roads
          tile === config$1.World.TILE.VILLAGE // all roads lead home
          ) {
            return [searchX, searchY];
          }
        }

        if (x === 0 || y === 0) {
          // Turn the corner
          dtmp = dx;
          dx = -dy;
          dy = dtmp;
        }

        if (x === 0 && y <= 0) {
          x++;
        } else {
          x += dx;
          y += dy;
        }
      }

      return config$1.World.VILLAGE_POS;
    };

    _proto.drawRoad = function drawRoad() {
      var _this$engine$getState = this.engine.getState().game.world,
          curPos = _this$engine$getState.curPos,
          map = _this$engine$getState.map;
      map = lodash.cloneDeep(map);
      var closestRoad = this.findClosestRoad(curPos);
      var xDist = curPos[0] - closestRoad[0];
      var yDist = curPos[1] - closestRoad[1];
      var xDir = Math.abs(xDist) / xDist;
      var yDir = Math.abs(yDist) / yDist;
      var xIntersect, yIntersect;

      if (Math.abs(xDist) > Math.abs(yDist)) {
        xIntersect = closestRoad[0];
        yIntersect = closestRoad[1] + yDist;
      } else {
        xIntersect = closestRoad[0] + xDist;
        yIntersect = closestRoad[1];
      }

      for (var x = 0; x < Math.abs(xDist); x++) {
        if (this.isTerrain(map[closestRoad[0] + xDir * x][yIntersect])) {
          map[closestRoad[0] + xDir * x][yIntersect] = config$1.World.TILE.ROAD;
        }
      }

      for (var y = 0; y < Math.abs(yDist); y++) {
        if (this.isTerrain(map[xIntersect][closestRoad[1] + yDir * y])) {
          map[xIntersect][closestRoad[1] + yDir * y] = config$1.World.TILE.ROAD;
        }
      }

      this.engine.dispatch(this.engine.actions.game.world.setM({
        map: map
      }));
    };

    _proto.getMaxHealth = function getMaxHealth() {
      var state = this.engine.store.getState();

      if (!!state.stores.s_armour) {
        return config$1.World.BASE_HEALTH + 35;
      } else if (!!state.stores.i_armour) {
        return config$1.World.BASE_HEALTH + 15;
      } else if (!!state.stores.l_armou) {
        return config$1.World.BASE_HEALTH + 5;
      }

      return config$1.World.BASE_HEALTH;
    };

    _proto.applyMap = /*#__PURE__*/function () {
      var _applyMap = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        var _this$engine$store2;

        var state, x, y, mask;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = (_this$engine$store2 = this.engine.store) == null ? void 0 : _this$engine$store2.getState();

                if (state != null && state.game.world.seenAll) {
                  _context.next = 7;
                  break;
                }

                mask = state.game.world.mask;

                do {
                  x = Math.floor(Math.random() * (config$1.World.RADIUS * 2 + 1));
                  y = Math.floor(Math.random() * (config$1.World.RADIUS * 2 + 1));
                } while (mask[x][y]);

                this.uncoverMap(x, y, 5, mask);
                _context.next = 7;
                return this.engine.dispatch(this.engine.actions.game.world.setM({
                  mask: mask
                }));

              case 7:
                this.testMap();

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function applyMap() {
        return _applyMap.apply(this, arguments);
      }

      return applyMap;
    }();

    _proto.testMap = /*#__PURE__*/function () {
      var _testMap = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
        var _this$engine$store3;

        var state, _this$engine$store4, dark, mask, i, j;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                state = (_this$engine$store3 = this.engine.store) == null ? void 0 : _this$engine$store3.getState();

                if (state != null && state.game.world.seenAll) {
                  _context2.next = 18;
                  break;
                }

                mask = state.game.world.mask;
                i = 0;

              case 4:
                if (!(i < mask.length)) {
                  _context2.next = 16;
                  break;
                }

                j = 0;

              case 6:
                if (!(j < mask[i].length)) {
                  _context2.next = 13;
                  break;
                }

                if (mask[i][j]) {
                  _context2.next = 10;
                  break;
                }

                dark = true;
                return _context2.abrupt("break", 16);

              case 10:
                j++;
                _context2.next = 6;
                break;

              case 13:
                i++;
                _context2.next = 4;
                break;

              case 16:
                _context2.next = 18;
                return (_this$engine$store4 = this.engine.store) == null ? void 0 : _this$engine$store4.dispatch(this.engine.actions.game.world.seeAll(!dark));

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function testMap() {
        return _testMap.apply(this, arguments);
      }

      return testMap;
    }();

    _proto.onArrival = function onArrival() {
      this.engine.dispatch(this.engine.actions.game.world.setM({
        water: this.getMaxWater(),
        health: this.getMaxHealth(),
        foodMove: 0,
        waterMove: 0,
        starvation: false,
        thirst: false,
        usedOutposts: {},
        curPos: lodash.cloneDeep(config$1.World.VILLAGE_POS),
        dead: false
      }));
    };

    _proto.setHp = function setHp(hp) {
      this.engine.dispatch(this.engine.actions.game.world.setM({
        health: Math.min(hp, this.getMaxHealth())
      }));
    };

    _proto.setWater = function setWater(w) {
      var water = w;
      var maxWater = this.getMaxWater();

      if (water > maxWater) {
        water = maxWater;
      }

      this.engine.dispatch(this.engine.actions.game.world.setM({
        water: water
      }));
    };

    _proto.moveSouth = function moveSouth() {
      var curPos = this.engine.getState().game.world.curPos;

      if (curPos[1] < config$1.World.RADIUS * 2) {
        this.move(config$1.World.SOUTH);
      }
    };

    _proto.moveWest = function moveWest() {
      var curPos = this.engine.getState().game.world.curPos;

      if (curPos[0] > 0) {
        this.move(config$1.World.WEST);
      }
    };

    _proto.moveEast = function moveEast() {
      var curPos = this.engine.getState().game.world.curPos;

      if (curPos[0] < config$1.World.RADIUS * 2) {
        this.move(config$1.World.EAST);
      }
    };

    _proto.moveNorth = function moveNorth() {
      var curPos = this.engine.getState().game.world.curPos;

      if (curPos[1] > 0) {
        this.move(config$1.World.NORTH);
      }
    };

    _proto.move = /*#__PURE__*/function () {
      var _move = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(direction) {
        var _this$engine$getState2, map, mask, curPos, danger, oldTile;

        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _this$engine$getState2 = this.engine.getState().game.world, map = _this$engine$getState2.map, mask = _this$engine$getState2.mask, curPos = _this$engine$getState2.curPos, danger = _this$engine$getState2.danger;
                mask = lodash.cloneDeep(mask);
                curPos = lodash.cloneDeep(curPos);
                oldTile = map[curPos[0]][curPos[1]];
                curPos[0] += direction[0];
                curPos[1] += direction[1];
                this.narrateMove(oldTile, map[curPos[0]][curPos[1]]);
                this.lightMap(curPos[0], curPos[1], mask);
                _context3.next = 10;
                return this.engine.dispatch(this.engine.actions.game.world.setM({
                  mask: mask,
                  curPos: curPos
                }));

              case 10:
                _context3.next = 12;
                return this.doSpace();

              case 12:
                // play random footstep
                if (this.checkDanger()) {
                  if (danger) {
                    this.engine.notify(translate('dangerous to be this far from the village without proper protection'), exports.GameSpace.World);
                  } else {
                    this.engine.notify(translate('safer here'), exports.GameSpace.World);
                  }
                }

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function move(_x) {
        return _move.apply(this, arguments);
      }

      return move;
    }();

    _proto.useOutpost = function useOutpost() {
      this.engine.dispatch(this.engine.actions.game.world.useOutpost());
      this.setWater(this.getMaxWater());
      this.engine.notify(translate('water replenished'));
    };

    _proto.getMaxWater = function getMaxWater() {
      var state = this.engine.store.getState();

      if (!!state.stores.water_tank) {
        return config$1.World.BASE_WATER + 50;
      } else if (!!state.stores.cask) {
        return config$1.World.BASE_WATER + 20;
      } else if (!!state.stores.waterskin) {
        return config$1.World.BASE_WATER + 10;
      }

      return config$1.World.BASE_WATER;
    };

    _proto.generateMap = function generateMap() {
      var RADIUS = config$1.World.RADIUS;
      var map = new Array(RADIUS * 2 + 1);

      for (var i = 0; i <= RADIUS * 2; i++) {
        map[i] = new Array(RADIUS * 2 + 1);
      } // The Village is always at the exact center
      // Spiral out from there


      map[RADIUS][RADIUS] = config$1.World.TILE.VILLAGE;

      for (var r = 1; r <= RADIUS; r++) {
        for (var t = 0; t < r * 8; t++) {
          var x, y;

          if (t < 2 * r) {
            x = RADIUS - r + t;
            y = RADIUS - r;
          } else if (t < 4 * r) {
            x = RADIUS + r;
            y = RADIUS - 3 * r + t;
          } else if (t < 6 * r) {
            x = RADIUS + 5 * r - t;
            y = RADIUS + r;
          } else {
            x = RADIUS - r;
            y = RADIUS + 7 * r - t;
          }

          map[x][y] = this.chooseTile(x, y, map);
        }
      } // Place landmarks


      for (var k in config$1.World.LANDMARKS) {
        var landmark = config$1.World.LANDMARKS[k];

        for (var l = 0; l < landmark.num; l++) {
          this.placeLandmark(landmark.minRadius, landmark.maxRadius, k, map);
        }
      }

      return map;
    };

    _proto.chooseTile = function chooseTile(x, y, map) {
      var adjacent = [y > 0 ? map[x][y - 1] : null, y < config$1.World.RADIUS * 2 ? map[x][y + 1] : null, x < config$1.World.RADIUS * 2 ? map[x + 1][y] : null, x > 0 ? map[x - 1][y] : null];
      var chances = {};
      var nonSticky = 1;
      var cur;

      for (var i in adjacent) {
        if (adjacent[i] == config$1.World.TILE.VILLAGE) {
          // Village must be in a forest to maintain thematic consistency, yo.
          return config$1.World.TILE.FOREST;
        } else if (typeof adjacent[i] === 'string') {
          cur = chances[adjacent[i]];
          cur = typeof cur == 'number' ? cur : 0;
          chances[adjacent[i]] = cur + config$1.World.STICKINESS;
          nonSticky -= config$1.World.STICKINESS;
        }
      }

      for (var t in config$1.World.TILE) {
        var tile = config$1.World.TILE[t];

        if (this.isTerrain(tile)) {
          cur = chances[tile];
          cur = typeof cur == 'number' ? cur : 0;
          cur += config$1.World.TILE_PROBS[tile] * nonSticky;
          chances[tile] = cur;
        }
      }

      var list = [];

      for (var j in chances) {
        list.push(chances[j] + '' + j);
      }

      list.sort(function (a, b) {
        var n1 = parseFloat(a.substring(0, a.length - 1));
        var n2 = parseFloat(b.substring(0, b.length - 1));
        return n2 - n1;
      });
      var c = 0;
      var r = Math.random();

      for (var l in list) {
        var prob = list[l];
        c += parseFloat(prob.substring(0, prob.length - 1));

        if (r < c) {
          return prob.charAt(prob.length - 1);
        }
      }

      return config$1.World.TILE.BARRENS;
    };

    _proto.placeLandmark = function placeLandmark(minRadius, maxRadius, landmark, map) {
      var x = config$1.World.RADIUS,
          y = config$1.World.RADIUS;

      while (!this.isTerrain(map[x][y])) {
        var r = Math.floor(Math.random() * (maxRadius - minRadius)) + minRadius;
        var xDist = Math.floor(Math.random() * r);
        var yDist = r - xDist;
        if (Math.random() < 0.5) xDist = -xDist;
        if (Math.random() < 0.5) yDist = -yDist;
        x = config$1.World.RADIUS + xDist;
        if (x < 0) x = 0;
        if (x > config$1.World.RADIUS * 2) x = config$1.World.RADIUS * 2;
        y = config$1.World.RADIUS + yDist;
        if (y < 0) y = 0;
        if (y > config$1.World.RADIUS * 2) y = config$1.World.RADIUS * 2;
      }

      map[x][y] = landmark;
      return [x, y];
    };

    _proto.isTerrain = function isTerrain(tile) {
      return tile == config$1.World.TILE.FOREST || tile == config$1.World.TILE.FIELD || tile == config$1.World.TILE.BARRENS;
    };

    _proto.mapSearch = function mapSearch(target, map, required) {
      var max = config$1.World.LANDMARKS[target].num;

      if (!max) {
        // this restrict the research to numerable landmarks
        return null;
      } // restrict research if only a fixed number (usually 1) is required


      max = required ? Math.min(required, max) : max;
      var index = 0;
      var targets = [];
      var RADIUS = config$1.World.RADIUS; // label for coordinate research

      search: for (var i = 0; i <= RADIUS * 2; i++) {
        for (var j = 0; j <= RADIUS * 2; j++) {
          if (map[i][j].charAt(0) === target) {
            // search result is stored as an object;
            // items are listed as they appear in the map, tl-br
            // each item has relative coordinates and a compass-type direction
            targets[index] = {
              x: i - RADIUS,
              y: j - RADIUS
            };
            index++;

            if (index === max) {
              // optimisation: stop the research if maximum number of items has been reached
              break search;
            }
          }
        }
      }

      return targets;
    };

    _proto.compassDir = function compassDir(pos) {
      var dir = '';
      var horz = pos.x < 0 ? 'west' : 'east';
      var vert = pos.y < 0 ? 'north' : 'south';

      if (Math.abs(pos.x) / 2 > Math.abs(pos.y)) {
        dir = horz;
      } else if (Math.abs(pos.y) / 2 > Math.abs(pos.x)) {
        dir = vert;
      } else {
        dir = vert + horz;
      }

      return dir;
    };

    _proto.goHome = /*#__PURE__*/function () {
      var _goHome = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
        var state;
        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                state = this.engine.getState();

                if (state.game.world.sulphurmine && !state.game.buildings.sulphur_mine) {
                  this.engine.dispatch(this.engine.actions.game.buildings.addM({
                    sulphur_mine: 1
                  }));
                }

                if (state.game.world.ironmine && !state.game.buildings.iron_mine) {
                  this.engine.dispatch(this.engine.actions.game.buildings.addM({
                    iron_mine: 1
                  }));
                }

                if (state.game.world.coalmine && !state.game.buildings.coal_mine) {
                  this.engine.dispatch(this.engine.actions.game.buildings.addM({
                    coal_mine: 1
                  }));
                } // if (state.game.world.ship && !state.features.location.Ship) {
                //   this.engine.dispatch(
                //     this.engine.actions.features.location.enableSpaceShip()
                //   );
                // }


                this.engine.dispatch(this.engine.actions.stores.addM(state.game.world.outfit));
                this.engine.travelTo(exports.GameSpace.Path);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function goHome() {
        return _goHome.apply(this, arguments);
      }

      return goHome;
    }();

    _proto.getFreeSpace = function getFreeSpace() {
      var state = this.engine.getState();
      var num = 0;

      for (var k in state.game.world.outfit) {
        var n = state.game.world.outfit[k] || 0;
        num += n * this.engine.spaces.Path.getWeight(k);
      }

      return this.engine.spaces.Path.getCapacity() - num;
    };

    _proto.die = function die() {
      var state = this.engine.getState();

      if (!state.game.world.dead) {
        this.engine.dispatch(this.engine.actions.game.world.setM({
          dead: true
        })); // Dead! Discard any world changes and go home

        this.engine.notify(translate('the world fades'), exports.GameSpace.World);
        this.engine.dispatch(this.engine.actions.path.outfit.empty());
        this.engine.travelTo(exports.GameSpace.Room);
      }
    };

    _proto.checkFight = function checkFight() {
      var state = this.engine.getState();
      var fightMove = state.game.world.fightMove + 1;

      if (fightMove > config$1.World.FIGHT_DELAY) {
        var chance = config$1.World.FIGHT_CHANCE;
        chance *= state.character.perks.stealthy ? 0.5 : 1;

        if (Math.random() < chance) {
          fightMove = 0;
          this.engine.events.triggerFight();
        }
      }

      this.engine.dispatch(this.engine.actions.game.world.setM({
        fightMove: fightMove
      }));
    };

    _proto.narrateMove = function narrateMove(oldTile, newTile) {
      var msg = null;

      switch (oldTile) {
        case config$1.World.TILE.FOREST:
          switch (newTile) {
            case config$1.World.TILE.FIELD:
              msg = translate('the trees yield to dry grass. the yellowed brush rustles in the wind.');
              break;

            case config$1.World.TILE.BARRENS:
              msg = translate('the trees are gone. parched earth and blowing dust are poor replacements.');
              break;
          }

          break;

        case config$1.World.TILE.FIELD:
          switch (newTile) {
            case config$1.World.TILE.FOREST:
              msg = translate('trees loom on the horizon. grasses gradually yield to a forest floor of dry branches and fallen leaves.');
              break;

            case config$1.World.TILE.BARRENS:
              msg = translate('the grasses thin. soon, only dust remains.');
              break;
          }

          break;

        case config$1.World.TILE.BARRENS:
          switch (newTile) {
            case config$1.World.TILE.FIELD:
              msg = translate('the barrens break at a sea of dying grass, swaying in the arid breeze.');
              break;

            case config$1.World.TILE.FOREST:
              msg = translate('a wall of gnarled trees rises from the dust. their branches twist into a skeletal canopy overhead.');
              break;
          }

          break;
      }

      if (msg != null) {
        this.engine.notify(msg, exports.GameSpace.World);
      }
    };

    _proto.getDistance = function getDistance(from, to) {
      if (!from) {
        from = this.engine.getState().game.world.curPos;
      }

      to = to || config$1.World.VILLAGE_POS;
      return Math.abs(from[0] - to[0]) + Math.abs(from[1] - to[1]);
    };

    _proto.outpostUsed = function outpostUsed(x, y) {
      var _this$engine$getState3 = this.engine.getState().game.world,
          curPos = _this$engine$getState3.curPos,
          usedOutposts = _this$engine$getState3.usedOutposts;
      x = typeof x == 'number' ? x : curPos[0];
      y = typeof y == 'number' ? y : curPos[1];
      var used = usedOutposts[x + ',' + y];
      return used === true;
    };

    _proto.useSupplies = /*#__PURE__*/function () {
      var _useSupplies = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
        var state, foodMove, waterMove, changed, movesPerFood, num, starvedCount, movesPerWater, water, dehydratedCount;
        return runtime_1.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                state = this.engine.getState();
                foodMove = state.game.world.foodMove + 1;
                waterMove = state.game.world.waterMove + 1;
                changed = {
                  foodMove: foodMove,
                  waterMove: waterMove
                }; // Food

                movesPerFood = config$1.World.MOVES_PER_FOOD;
                movesPerFood *= state.character.perks.slow_metabolism ? 2 : 1;

                if (!(foodMove >= movesPerFood)) {
                  _context5.next = 33;
                  break;
                }

                foodMove = 0;
                changed.foodMove = 0;
                num = state.game.world.outfit.cured_meat || 0;
                num--;

                if (!(num === 0)) {
                  _context5.next = 15;
                  break;
                }

                this.engine.notify(translate('the meat has run out'), exports.GameSpace.World);
                _context5.next = 32;
                break;

              case 15:
                if (!(num < 0)) {
                  _context5.next = 30;
                  break;
                }

                // Starvation! Hooray!
                num = 0;

                if (state.game.world.starvation) {
                  _context5.next = 22;
                  break;
                }

                this.engine.notify(translate('starvation sets in'), exports.GameSpace.World);
                changed.starvation = true;
                _context5.next = 28;
                break;

              case 22:
                starvedCount = state.character.statistics.starved + 1;
                this.engine.dispatch(this.engine.actions.character.statistics.setM({
                  starved: starvedCount
                }));

                if (starvedCount >= 10 && !state.character.perks.slow_metabolism) {
                  this.engine.dispatch(this.engine.actions.character.perks.addPerk(exports.PerkCategory.slow_metabolism));
                }

                this.engine.dispatch(this.engine.actions.game.world.setM(changed));
                this.die();
                return _context5.abrupt("return", false);

              case 28:
                _context5.next = 32;
                break;

              case 30:
                changed.starvation = false;
                changed.health = Math.min(state.game.world.health + this.meatHeal(), this.getMaxHealth());

              case 32:
                changed['outfit.cured_meat'] = num;

              case 33:
                // Water
                movesPerWater = config$1.World.MOVES_PER_WATER;
                movesPerWater *= state.character.perks.desert_rat ? 2 : 1;

                if (!(waterMove >= movesPerWater)) {
                  _context5.next = 61;
                  break;
                }

                waterMove = 0;
                changed.waterMove = 0;
                water = state.game.world.water;
                water--;

                if (!(water === 0)) {
                  _context5.next = 44;
                  break;
                }

                this.engine.notify(translate('there is no more water'), exports.GameSpace.World);
                _context5.next = 60;
                break;

              case 44:
                if (!(water < 0)) {
                  _context5.next = 59;
                  break;
                }

                water = 0;

                if (state.game.world.thirst) {
                  _context5.next = 51;
                  break;
                }

                this.engine.notify(translate('the thirst becomes unbearable'), exports.GameSpace.World);
                changed.thirst = true;
                _context5.next = 57;
                break;

              case 51:
                dehydratedCount = state.character.statistics.dehydrated + 1;
                this.engine.dispatch(this.engine.actions.character.statistics.setM({
                  dehydrated: dehydratedCount
                }));

                if (dehydratedCount >= 10 && !state.character.perks.desert_rat) {
                  this.engine.dispatch(this.engine.actions.character.perks.addPerk(exports.PerkCategory.desert_rat));
                }

                this.engine.dispatch(this.engine.actions.game.world.setM(changed));
                this.die();
                return _context5.abrupt("return", false);

              case 57:
                _context5.next = 60;
                break;

              case 59:
                changed.thirst = false;

              case 60:
                changed.water = water;

              case 61:
                _context5.next = 63;
                return this.engine.dispatch(this.engine.actions.game.world.setM(changed));

              case 63:
                return _context5.abrupt("return", true);

              case 64:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function useSupplies() {
        return _useSupplies.apply(this, arguments);
      }

      return useSupplies;
    }();

    _proto.meatHeal = function meatHeal() {
      var state = this.engine.getState();
      return config$1.World.MEAT_HEAL * (state.character.perks.gastronome ? 2 : 1);
    };

    _proto.medsHeal = function medsHeal() {
      return config$1.World.MEDS_HEAL;
    };

    _proto.checkDanger = function checkDanger() {
      var state = this.engine.getState();

      if (!state.game.world.danger) {
        if (!state.stores.i_armour && this.getDistance() >= 8) {
          this.engine.dispatch(this.engine.actions.game.world.setM({
            danger: true
          }));
          return true;
        }

        if (!state.stores.s_armour && this.getDistance() >= 18) {
          this.engine.dispatch(this.engine.actions.game.world.setM({
            danger: true
          }));
          return true;
        }
      } else {
        if (this.getDistance() < 8) {
          this.engine.dispatch(this.engine.actions.game.world.setM({
            danger: false
          }));
          return true;
        }

        if (this.getDistance() < 18 && (state.stores.i_armour || 0) > 0) {
          this.engine.dispatch(this.engine.actions.game.world.setM({
            danger: false
          }));
          return true;
        }
      }

      return false;
    };

    _proto.doSpace = /*#__PURE__*/function () {
      var _doSpace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
        var _this$engine$getState4, map, curPos, curTile, event, res;

        return runtime_1.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _this$engine$getState4 = this.engine.getState().game.world, map = _this$engine$getState4.map, curPos = _this$engine$getState4.curPos;
                curTile = map[curPos[0]][curPos[1]];

                if (!(curTile === config$1.World.TILE.VILLAGE)) {
                  _context6.next = 6;
                  break;
                }

                this.goHome();
                _context6.next = 14;
                break;

              case 6:
                if (!(typeof config$1.World.LANDMARKS[curTile] !== 'undefined')) {
                  _context6.next = 10;
                  break;
                }

                if (curTile !== config$1.World.TILE.OUTPOST || !this.outpostUsed()) {
                  event = this.engine.events.eventPool.World.find(function (event) {
                    return event.id === config$1.World.LANDMARKS[curTile].scene;
                  });

                  if (event) {
                    this.engine.events.startEvent(event);
                  }
                }

                _context6.next = 14;
                break;

              case 10:
                _context6.next = 12;
                return this.useSupplies();

              case 12:
                res = _context6.sent;

                if (res) {
                  this.checkFight();
                }

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function doSpace() {
        return _doSpace.apply(this, arguments);
      }

      return doSpace;
    }();

    return World;
  }(GameModule);

  function needsWorkshop(type) {
    return type == 'weapon' || type == 'upgrade' || type == 'tool';
  }

  var _cost$1, _cost2$1;
  operationManager.add({
    id: 'Room.lightFire',
    name: translate("light fire"),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !state.engine.activeSubSpace && state.engine.activeSpace === exports.GameSpace.Room && state.game.fire.status.value === config$1.Room.FireStatus.Dead.value;
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine) {
        var Room, appState, wood, currentFireStatus;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Room = engine.spaces.Room;
                appState = engine.getState();
                wood = appState.stores.wood;
                currentFireStatus = appState.game.fire.status;

                if (!(typeof wood !== 'undefined')) {
                  _context.next = 17;
                  break;
                }

                wood = wood || 0;

                if (!(wood < 5)) {
                  _context.next = 12;
                  break;
                }

                engine.notify(translate('not enough wood to get the fire going'), exports.GameSpace.Room);
                engine.operationExecutor.clearCooldown('Room.lightFire');
                return _context.abrupt("return", currentFireStatus);

              case 12:
                if (!(wood > 4)) {
                  _context.next = 15;
                  break;
                }

                _context.next = 15;
                return engine.dispatch(engine.actions.stores.addM({
                  wood: -5
                }));

              case 15:
                _context.next = 21;
                break;

              case 17:
                _context.next = 19;
                return engine.dispatch(engine.actions.stores.addM({
                  wood: 5
                }));

              case 19:
                _context.next = 21;
                return engine.operationExecutor.cooldown('Room.stokeFire');

              case 21:
                currentFireStatus = config$1.Room.FireStatus.Burning;
                _context.next = 24;
                return engine.dispatch(engine.actions.game.fire.changeFire(currentFireStatus));

              case 24:
                Room.onFireChange(currentFireStatus);
                return _context.abrupt("return", currentFireStatus);

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }(),
    cooldown: function cooldown() {
      return config$1.Room.STOKE_COOLDOWN;
    },
    meta: {
      space: exports.GameSpace.Room,
      cost: (_cost$1 = {}, _cost$1[exports.StoreCategory.wood] = 5, _cost$1)
    }
  });
  operationManager.add({
    id: 'Room.stokeFire',
    name: translate("stoke fire"),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !state.engine.activeSubSpace && state.engine.activeSpace === exports.GameSpace.Room && state.game.fire.status.value !== config$1.Room.FireStatus.Dead.value;
    },
    exec: function () {
      var _exec2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine) {
        var appState, wood, Room, currentFireStatus, newState;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                appState = engine.getState();
                wood = appState.stores.wood;
                Room = engine.spaces.Room;
                currentFireStatus = appState.game.fire.status;

                if (wood) {
                  _context2.next = 8;
                  break;
                }

                engine.notify(translate('the wood has run out'), exports.GameSpace.Room);
                engine.operationExecutor.clearCooldown('Room.stokeFire');
                return _context2.abrupt("return", currentFireStatus);

              case 8:
                _context2.next = 10;
                return engine.dispatch(engine.actions.stores.addM({
                  wood: -1
                }));

              case 10:
                if (!(currentFireStatus.value < config$1.Room.FireStatus.Roaring.value)) {
                  _context2.next = 16;
                  break;
                }

                newState = lodash.findKey(config$1.Room.FireStatus, function (fire) {
                  return fire.value === currentFireStatus.value + 1;
                });

                if (!newState) {
                  _context2.next = 16;
                  break;
                }

                currentFireStatus = config$1.Room.FireStatus[newState];
                _context2.next = 16;
                return engine.dispatch(engine.actions.game.fire.changeFire(currentFireStatus));

              case 16:
                Room.onFireChange(currentFireStatus);
                return _context2.abrupt("return", currentFireStatus);

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function exec(_x2) {
        return _exec2.apply(this, arguments);
      }

      return exec;
    }(),
    cooldown: function cooldown() {
      return config$1.Room.STOKE_COOLDOWN;
    },
    meta: {
      space: exports.GameSpace.Room,
      cost: (_cost2$1 = {}, _cost2$1[exports.StoreCategory.wood] = 1, _cost2$1)
    }
  });
  operationManager.add({
    id: 'Room.stores',
    name: translate("warehouse"),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !state.engine.activeSubSpace && state.engine.activeSpace === exports.GameSpace.Room && typeof state.stores.wood !== 'undefined';
    },
    exec: function () {
      var _exec3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(engine) {
        var state, storeNames, stores, i, len, name, count;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                state = engine.getState();
                storeNames = Object.keys(state.stores);
                stores = [];

                for (i = 0, len = storeNames.length; i < len; i++) {
                  name = storeNames[i];
                  count = state.stores[name];

                  if (!!count && config$1.items[name] && config$1.items[name].type !== 'building') {
                    stores.push({
                      name: name,
                      count: count,
                      info: config$1.items[name]
                    });
                  }
                }
                /* i18n-extract view {place} */


                return _context3.abrupt("return", stores);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function exec(_x3) {
        return _exec3.apply(this, arguments);
      }

      return exec;
    }(),
    meta: {
      space: exports.GameSpace.Room
    }
  });
  operationManager.add({
    id: 'Room.trading_post',
    name: translate('trading post'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !state.engine.activeSubSpace && state.engine.activeSpace === exports.GameSpace.Room && !!state.game.buildings.trading_post;
    },
    meta: {
      space: exports.GameSpace.Room
    },
    exec: function () {
      var _exec4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(engine, operation) {
        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return engine.travelToSubSpace(operation.name);

              case 2:
                return _context4.abrupt("return", operation.name);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function exec(_x4, _x5) {
        return _exec4.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Room.workshop',
    name: translate('workshop'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !state.engine.activeSubSpace && state.engine.activeSpace === exports.GameSpace.Room && !!state.game.buildings.workshop;
    },
    meta: {
      space: exports.GameSpace.Room
    },
    exec: function () {
      var _exec5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(engine, operation) {
        return runtime_1.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return engine.travelToSubSpace(operation.name);

              case 2:
                return _context5.abrupt("return", operation.name);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function exec(_x6, _x7) {
        return _exec5.apply(this, arguments);
      }

      return exec;
    }()
  });
  Object.keys(exports.TradeCategory).forEach(function (thing) {
    operationManager.add({
      id: "Room.buy." + thing,
      name: translate(thing),
      isAvailable: function isAvailable(engine, operation) {
        var state = engine.getState();
        var thing = operation.meta.thing;
        return state.engine.activeSubSpace === 'trading post' && engine.spaces.Room.buyUnlocked(thing);
      },
      meta: {
        thing: thing,
        space: exports.GameSpace.Room,
        group: 'buy'
      },
      exec: function () {
        var _exec6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(engine, operation) {
          var _engine$actions$store;

          var thing, state, good, count, storeMod, cost, k, have;
          return runtime_1.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  thing = operation.meta.thing;
                  state = engine.getState();
                  good = config$1.items[thing];
                  count = state.stores[thing] || 0;

                  if (count < 0) {
                    count = 0;
                  }

                  if (good.trade) {
                    _context6.next = 7;
                    break;
                  }

                  return _context6.abrupt("return", false);

                case 7:
                  if (!(good.trade.maximum && good.trade.maximum < count)) {
                    _context6.next = 10;
                    break;
                  }

                  /* i18n-extract can't buy any more of {item} */
                  engine.notify("can't buy any more of " + good.name, exports.GameSpace.Room);
                  return _context6.abrupt("return", false);

                case 10:
                  storeMod = {};
                  cost = good.trade.cost();
                  _context6.t0 = runtime_1.keys(cost);

                case 13:
                  if ((_context6.t1 = _context6.t0()).done) {
                    _context6.next = 24;
                    break;
                  }

                  k = _context6.t1.value;
                  have = state.stores[k] || 0;

                  if (!(have < cost[k])) {
                    _context6.next = 21;
                    break;
                  }

                  /* i18n-extract not enough {item}, need {count1}, stock {count2} */
                  engine.notify("not enough " + k + ", need " + cost[k] + ", stock " + have, exports.GameSpace.Room);
                  return _context6.abrupt("return", false);

                case 21:
                  storeMod[k] = have - cost[k];

                case 22:
                  _context6.next = 13;
                  break;

                case 24:
                  _context6.next = 26;
                  return engine.dispatch(engine.actions.stores.addM(storeMod));

                case 26:
                  _context6.next = 28;
                  return _context6.sent;

                case 28:
                  if (good.trade.tradeMsg) {
                    engine.notify(good.trade.tradeMsg);
                  }

                  _context6.next = 31;
                  return engine.dispatch(engine.actions.stores.addM((_engine$actions$store = {}, _engine$actions$store[thing] = 1, _engine$actions$store)));

                case 31:
                  /* i18n-extract bought {item} */
                  engine.notify("bought " + thing, exports.GameSpace.Room);
                  return _context6.abrupt("return", true);

                case 33:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        function exec(_x8, _x9) {
          return _exec6.apply(this, arguments);
        }

        return exec;
      }()
    });
  });
  Object.keys(exports.CraftableCategory).forEach(function (thing) {
    var item = config$1.items[thing];
    var group = needsWorkshop(item.craft.type) ? 'craft' : 'build';
    operationManager.add({
      id: "Room." + group + "." + thing,
      name: translate(thing),
      isAvailable: function isAvailable(engine, operation) {
        var state = engine.getState();
        var thing = operation.meta.thing;
        var group = operation.meta.group;

        if (group === 'craft') {
          return state.engine.activeSubSpace === 'workshop' && state.engine.activeSpace === exports.GameSpace.Room && engine.spaces.Room.craftUnlocked(thing);
        }

        return !state.engine.activeSubSpace && state.engine.activeSpace === exports.GameSpace.Room && engine.spaces.Room.craftUnlocked(thing);
      },
      meta: {
        thing: thing,
        space: exports.GameSpace.Room,
        group: group
      },
      exec: function () {
        var _exec7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(engine, operation) {
          var _craftable$craft2, _engine$addToStore, _engine$actions$game$;

          var thing, state, craftable, numThings, storeMod, cost, k, have, _craftable$craft;

          return runtime_1.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  thing = operation.meta.thing;
                  state = engine.getState();

                  if (!(state.game.temperature.status.value <= config$1.Room.TemperatureStatus.Cold.value)) {
                    _context7.next = 5;
                    break;
                  }

                  engine.notify('builder just shivers', exports.GameSpace.Room);
                  return _context7.abrupt("return", false);

                case 5:
                  craftable = config$1.items[thing];

                  if (craftable.craft) {
                    _context7.next = 8;
                    break;
                  }

                  return _context7.abrupt("return", false);

                case 8:
                  numThings = 0;
                  _context7.t0 = craftable.type;
                  _context7.next = _context7.t0 === 'good' ? 12 : _context7.t0 === 'weapon' ? 12 : _context7.t0 === 'tool' ? 12 : _context7.t0 === 'upgrade' ? 12 : _context7.t0 === 'building' ? 14 : 16;
                  break;

                case 12:
                  numThings = state.stores[thing] || 0;
                  return _context7.abrupt("break", 16);

                case 14:
                  numThings = state.game.buildings[thing] || 0;
                  return _context7.abrupt("break", 16);

                case 16:
                  if (numThings < 0) numThings = 0;

                  if (!(craftable.craft.maximum && craftable.craft.maximum <= numThings)) {
                    _context7.next = 20;
                    break;
                  }

                  /* i18n-extract can't build any more of {item} */
                  engine.notify("can't build any more of " + craftable.name, exports.GameSpace.Room);
                  return _context7.abrupt("return", false);

                case 20:
                  storeMod = {};
                  cost = craftable.craft.cost(state);
                  _context7.t1 = runtime_1.keys(cost);

                case 23:
                  if ((_context7.t2 = _context7.t1()).done) {
                    _context7.next = 34;
                    break;
                  }

                  k = _context7.t2.value;
                  have = state.stores[k] || 0;

                  if (!(have < cost[k])) {
                    _context7.next = 31;
                    break;
                  }

                  engine.notify("not enough " + k + ", need " + cost[k] + ", stock " + have, exports.GameSpace.Room);
                  return _context7.abrupt("return", false);

                case 31:
                  storeMod[k] = have - cost[k];

                case 32:
                  _context7.next = 23;
                  break;

                case 34:
                  _context7.next = 36;
                  return engine.setToStore(storeMod);

                case 36:
                  if (craftable.craft.buildMsg) {
                    engine.notify((_craftable$craft = craftable.craft) == null ? void 0 : _craftable$craft.buildMsg, exports.GameSpace.Room);
                  }

                  _context7.t3 = (_craftable$craft2 = craftable.craft) == null ? void 0 : _craftable$craft2.type;
                  _context7.next = _context7.t3 === 'good' ? 40 : _context7.t3 === 'weapon' ? 40 : _context7.t3 === 'upgrade' ? 40 : _context7.t3 === 'tool' ? 40 : _context7.t3 === 'building' ? 43 : 46;
                  break;

                case 40:
                  _context7.next = 42;
                  return engine.addToStore((_engine$addToStore = {}, _engine$addToStore[thing] = 1, _engine$addToStore));

                case 42:
                  return _context7.abrupt("break", 46);

                case 43:
                  _context7.next = 45;
                  return engine.dispatch(engine.actions.game.buildings.addM((_engine$actions$game$ = {}, _engine$actions$game$[thing] = 1, _engine$actions$game$)));

                case 45:
                  return _context7.abrupt("break", 46);

                case 46:
                  return _context7.abrupt("return", true);

                case 47:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7);
        }));

        function exec(_x10, _x11) {
          return _exec7.apply(this, arguments);
        }

        return exec;
      }()
    });
  });

  var Room = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(Room, _GameModule);

    function Room(engine) {
      var _this;

      _this = _GameModule.call(this, engine) || this;
      _this._fireTimer = null;
      _this._tempTimer = null;
      _this._builderTimer = null;
      var state = engine.getState();

      if (!state.features.location.Room) {
        engine.dispatch(engine.actions.features.location.enableRoom());
        engine.dispatch(engine.actions.game.builder.setM({
          level: -1
        }));
      }

      _this._fireTimer = engine.setTimeout(_this.coolFire.bind(_assertThisInitialized(_this)), config$1.Room.FIRE_COOL_DELAY);
      _this._tempTimer = engine.setTimeout(_this.adjustTemp.bind(_assertThisInitialized(_this)), config$1.Room.ROOM_WARM_DELAY);
      var builderLevel = state.game.builder.level;

      if (builderLevel >= 0 && builderLevel < 3) {
        _this._builderTimer = engine.setTimeout(_this.updateBuilderState.bind(_assertThisInitialized(_this)), config$1.Room.BUILDER_STATE_DELAY);
      }

      if (builderLevel == 1 && typeof state.stores.wood === 'undefined') {
        _this.engine.setTimeout(_this.unlockForest.bind(_assertThisInitialized(_this)), config$1.Room.NEED_WOOD_DELAY);
      }

      _this.engine.observer(function (state) {
        return {
          wood: state.stores.wood,
          meat: state.stores.meat,
          fur: state.stores.fur,
          thieves: state.game.thieves,
          enableWorld: state.features.location.World
        };
      }, function (state) {
        if (!state.thieves && state.enableWorld) {
          if ((state.wood || 0) > 5000 || (state.meat || 0) > 5000 || (state.fur || 0) > 5000) {
            _this.startThieves();
          }
        }
      });

      return _this;
    }

    var _proto = Room.prototype;

    _proto.coolFire = function coolFire() {
      var appState = this.engine.getState();
      var wood = appState.stores.wood;
      var currentFireStatus = appState.game.fire.status;
      var builderLevel = appState.game.builder.level;

      if (currentFireStatus.value <= config$1.Room.FireStatus.Flickering.value && builderLevel > 3 && !!wood) {
        this.engine.notify(translate('builder stokes the fire'), exports.GameSpace.Room, true);
        this.engine.dispatch(this.engine.actions.stores.addM({
          wood: -1
        }));
        currentFireStatus = config$1.Room.FireStatus[lodash.findKey(config$1.Room.FireStatus, function (fire) {
          return fire.value === currentFireStatus.value + 1;
        })];
      }

      if (currentFireStatus.value > 0) {
        currentFireStatus = config$1.Room.FireStatus[lodash.findKey(config$1.Room.FireStatus, function (fire) {
          return fire.value === currentFireStatus.value - 1;
        })];
        this.engine.dispatch(this.engine.actions.game.fire.changeFire(currentFireStatus));
        this.onFireChange(currentFireStatus);
      }
    };

    _proto.onArrival = function onArrival() {
      var state = this.engine.getState();

      if (state.room.changed) {
        /* i18n-extract the fire is {fireStatus} */

        /* i18n-extract the room is {roomStatus} */
        this.engine.notify("the fire is " + state.game.fire.status.text);
        this.engine.notify("the room is " + state.game.temperature.status.text);
        this.engine.dispatch(this.engine.actions.room.setChanged(false));
      }

      if (state.game.builder.level === 3) {
        this.engine.dispatch(this.engine.actions.game.builder.addM({
          level: 1
        }));
        this.engine.setIncome('builder', {
          delay: 10,
          stores: {
            wood: 2
          }
        });
        this.engine.notify(translate('the stranger is standing by the fire. she says she can help. says she builds things.'), exports.GameSpace.Room);
      }
    };

    _proto.canTrade = function canTrade(thing) {
      var state = this.engine.getState();

      if (state.room.crafts[thing]) {
        return true;
      } else if (state.game.buildings.trading_post > 0) {
        if (thing === exports.StoreCategory.compass || typeof state.stores[thing] !== 'undefined') {
          return true;
        }
      }

      return false;
    };

    _proto.buyUnlocked = function buyUnlocked(thing) {
      var state = this.engine.getState();

      if (state.room.buys[thing]) {
        return true;
      } else if (!!state.game.buildings.trading_post) {
        if (thing === exports.StoreCategory.compass || typeof state.stores[thing] !== 'undefined') {
          return true;
        }
      }

      return false;
    };

    _proto.clean = function clean() {
      clearTimeout(this._fireTimer);
      clearTimeout(this._tempTimer);
      clearTimeout(this._builderTimer);

      _GameModule.prototype.clean.call(this);
    };

    _proto.craftUnlocked = function craftUnlocked(thing) {
      var state = this.engine.getState();

      if (state.room.crafts[thing]) {
        return true;
      }

      if (state.game.builder.level < 4) {
        return false;
      }

      var craftable = config$1.items[thing];

      if (!craftable.craft) {
        return false;
      }

      if (needsWorkshop(craftable.type) && state.game.buildings.workshop === 0) {
        return false;
      }

      var cost = craftable.craft.cost(state);

      if (state.game.buildings[thing] > 0) {
        this.engine.dispatch(this.engine.actions.room.addCraft({
          name: thing
        }));
        return true;
      }

      if (cost.wood && (state.stores.wood || 0) < cost.wood * 0.5) {
        return false;
      }

      for (var c in cost) {
        if (!state.stores[c]) {
          return false;
        }
      }

      this.engine.dispatch(this.engine.actions.room.addCraft({
        name: thing
      }));

      if (craftable.craft.availableMsg && !state.game.buildings[thing]) {
        this.engine.notify(craftable.craft.availableMsg, exports.GameSpace.Room);
      }

      return true;
    };

    _proto.adjustTemp = function adjustTemp() {
      var state = this.engine.getState();
      var old = state.game.temperature.status;
      var temperature = old;
      var fireStatus = state.game.fire.status;

      if (old.value > 0 && old.value > fireStatus.value) {
        temperature = config$1.Room.TemperatureStatus[lodash.findKey(config$1.Room.TemperatureStatus, function (temp) {
          return temp.value === temperature.value - 1;
        })];
        this.engine.notify("the room is " + temperature.text, exports.GameSpace.Room, true);
      }

      if (temperature.value < 4 && temperature.value < fireStatus.value) {
        temperature = config$1.Room.TemperatureStatus[lodash.findKey(config$1.Room.TemperatureStatus, function (temp) {
          return temp.value === temperature.value + 1;
        })];
        this.engine.notify("the room is " + temperature.text, exports.GameSpace.Room, true);
      }

      if (temperature.value != old.value) {
        this.engine.dispatch(this.engine.actions.room.setChanged(true));
        this.engine.dispatch(this.engine.actions.game.temperature.change(temperature));
      }

      this._tempTimer = this.engine.setTimeout(this.adjustTemp.bind(this), config$1.Room.ROOM_WARM_DELAY);
    };

    _proto.onFireChange = function onFireChange(fireStatus) {
      var appState = this.engine.getState();

      if (appState.engine.activeSpace !== exports.GameSpace.Room) {
        this.engine.dispatch(this.engine.actions.room.setChanged(true));
      }

      this.engine.notify("the fire is " + fireStatus.text, exports.GameSpace.Room, true);
      var builderLevel = appState.game.builder.level;

      if (fireStatus.value > config$1.Room.FireStatus.Smoldering.value && builderLevel < 0) {
        this.engine.dispatch(this.engine.actions.game.builder.setM({
          level: 0
        }));
        this.engine.notify(translate('the light from the fire spills from the windows, out into the dark'), exports.GameSpace.Room);
        this.engine.setTimeout(this.updateBuilderState.bind(this), config$1.Room.BUILDER_STATE_DELAY);
      }

      clearTimeout(this._fireTimer);
      this._fireTimer = this.engine.setTimeout(this.coolFire.bind(this), config$1.Room.FIRE_COOL_DELAY);
    };

    _proto.updateBuilderState = function updateBuilderState() {
      if (!this.engine) {
        return;
      }

      var state = this.engine.getState();
      var lBuilder = state.game.builder.level;

      if (lBuilder === 0) {
        this.engine.notify(translate('a ragged stranger stumbles through the door and collapses in the corner'), exports.GameSpace.Room);
        lBuilder = 1;
        this.engine.dispatch(this.engine.actions.game.builder.setM({
          level: 1
        }));
        this.engine.setTimeout(this.unlockForest.bind(this), config$1.Room.NEED_WOOD_DELAY);
      } else if (lBuilder < 3 && state.game.temperature.status.value >= config$1.Room.TemperatureStatus.Warm.value) {
        var msg = '';

        switch (lBuilder) {
          case 1:
            msg = translate('the stranger shivers, and mumbles quietly. her words are unintelligible.');
            break;

          case 2:
            msg = translate('the stranger in the corner stops shivering. her breathing calms.');
            break;
        }

        this.engine.notify(msg, exports.GameSpace.Room);

        if (lBuilder < 3) {
          lBuilder += 1;
          this.engine.dispatch(this.engine.actions.game.builder.setM({
            level: lBuilder
          }));
        }
      }

      if (lBuilder < 3) {
        this.engine.setTimeout(this.updateBuilderState.bind(this), config$1.Room.BUILDER_STATE_DELAY);
      }
    };

    _proto.unlockForest = function unlockForest() {
      this.engine.dispatch(this.engine.actions.stores.setM({
        wood: 4
      }));
      this.engine.dispatch(this.engine.actions.features.location.enableOutside());
      this.engine.notify(translate('the wind howls outside'), exports.GameSpace.Room);
      this.engine.notify(translate('the wood is running out'), exports.GameSpace.Room);
    };

    _proto.startThieves = function startThieves() {
      this.engine.dispatch(this.engine.actions.game.thieves.change(1));
      this.engine.setIncome('thieves', {
        delay: 10,
        stores: {
          wood: -10,
          fur: -5,
          meat: -5
        }
      });
    };

    return Room;
  }(GameModule);

  operationManager.add({
    id: 'Path.perks',
    name: translate('perks'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();

      if (!(!state.engine.activeSubSpace && state.engine.activeSpace === exports.GameSpace.Path)) {
        return false;
      }

      var isExist = false;

      for (var perk in state.character.perks) {
        if (state.character.perks[perk]) {
          isExist = true;
          break;
        }
      }

      return isExist;
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine) {
        var state, perks, perk;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = engine.getState();
                perks = [];

                for (perk in state.character.perks) {
                  if (state.character.perks[perk]) {
                    perks.push({
                      name: perk,
                      desc: Perks[perk].desc
                    });
                  }
                }

                return _context.abrupt("return", perks);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }(),
    meta: {
      space: exports.GameSpace.Path
    }
  });
  operationManager.add({
    id: 'Path.embark',
    name: translate('embark'),
    cooldown: function cooldown() {
      return config$1.World.DEATH_COOLDOWN;
    },
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.engine.activeSpace === exports.GameSpace.Path;
    },
    meta: {
      space: exports.GameSpace.Path
    },
    exec: function () {
      var _exec2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine) {
        var state, outfit, addStores, k, cloneOutfit, key;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                state = engine.getState();
                outfit = state.path.outfit;
                addStores = {};

                for (k in state) {
                  addStores[k] = -1 * (outfit[k] || 0);
                }

                _context2.next = 6;
                return engine.dispatch(engine.actions.stores.addM(addStores));

              case 6:
                cloneOutfit = {};

                for (key in outfit) {
                  if (!!outfit[key]) {
                    cloneOutfit[key] = outfit[key];
                  }
                }

                _context2.next = 10;
                return engine.dispatch(engine.actions.game.world.setM({
                  outfit: lodash.cloneDeep(cloneOutfit)
                }));

              case 10:
                _context2.next = 12;
                return engine.travelTo(exports.GameSpace.World);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function exec(_x2) {
        return _exec2.apply(this, arguments);
      }

      return exec;
    }()
  });

  var Path = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(Path, _GameModule);

    function Path(engine) {
      var _this;

      _this = _GameModule.call(this, engine) || this;

      _this.engine.observer(function (state) {
        return {
          compass: state.stores.compass,
          pathEnable: state.features.location.Path
        };
      }, function (state) {
        if (state.compass && !state.pathEnable) {
          _this.openPath();
        }
      });

      return _this;
    }

    var _proto = Path.prototype;

    _proto.onArrival = function onArrival() {
      this.updateOutfitting();
    };

    _proto.openPath = /*#__PURE__*/function () {
      var _openPath = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        var state;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = this.engine.getState();
                _context.next = 3;
                return this.engine.dispatch(this.engine.actions.features.location.enablePath());

              case 3:
                /* i18n-extract the compass points {dir} */
                this.engine.notify('the compass points ' + state.game.world.dir);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function openPath() {
        return _openPath.apply(this, arguments);
      }

      return openPath;
    }();

    _proto.getWeight = function getWeight(thing) {
      var w = config$1.Path.Weight[thing];
      if (typeof w !== 'number') w = 1;
      return w;
    };

    _proto.getCapacity = function getCapacity() {
      var state = this.engine.getState();

      if (!!state.stores.convoy) {
        return config$1.Path.DEFAULT_BAG_SPACE + 60;
      } else if (!!state.stores.wagon) {
        return config$1.Path.DEFAULT_BAG_SPACE + 30;
      } else if (!!state.stores.rucksack) {
        return config$1.Path.DEFAULT_BAG_SPACE + 10;
      } else {
        return config$1.Path.DEFAULT_BAG_SPACE;
      }
    };

    _proto.getFreeSpace = function getFreeSpace() {
      var state = this.engine.getState();
      var num = 0;

      for (var k in state.path.outfit) {
        var n = state.path.outfit[k] || 0;
        num += n * this.getWeight(k);
      }

      return this.getCapacity() - num;
    };

    _proto.updateOutfitting = function updateOutfitting() {
      var state = this.engine.getState();
      var outfits = Object.keys(NonCraftableCategory).concat(Object.keys(exports.CraftableCategory));
      var outfitChanged = false;
      var setOutfit = {};

      for (var k in outfits) {
        var itemName = k;
        var have = state.stores[itemName] || 0;
        var num = state.path.outfit[itemName] || 0;
        num = typeof num === 'number' ? num : 0;

        if (have < num) {
          num = have;
          outfitChanged = true;
          setOutfit[k] = num;
        }
      }

      if (outfitChanged) {
        this.engine.dispatch(this.engine.actions.path.outfit.setM(setOutfit));
      }
    };

    _proto.increaseSupply = /*#__PURE__*/function () {
      var _increaseSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(supply, count) {
        var state, cur, freeSpace, weight, storeCount, addCount, maxExtraByWeight, maxExtraByStore, _this$engine$actions$;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                state = this.engine.getState();
                cur = state.path.outfit[supply] || 0;
                freeSpace = this.getFreeSpace();
                weight = this.getWeight(supply);
                storeCount = state.stores[supply] || 0;
                addCount = 0;

                if (!(freeSpace >= weight && cur < storeCount)) {
                  _context2.next = 14;
                  break;
                }

                maxExtraByWeight = Math.floor(freeSpace / weight);
                maxExtraByStore = storeCount - cur;
                addCount = Math.min(count, maxExtraByWeight, maxExtraByStore);

                if (!addCount) {
                  _context2.next = 14;
                  break;
                }

                _context2.next = 13;
                return this.engine.dispatch(this.engine.actions.path.outfit.addM((_this$engine$actions$ = {}, _this$engine$actions$[supply] = addCount, _this$engine$actions$)));

              case 13:
                this.updateOutfitting();

              case 14:
                return _context2.abrupt("return", cur + addCount);

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function increaseSupply(_x, _x2) {
        return _increaseSupply.apply(this, arguments);
      }

      return increaseSupply;
    }();

    _proto.decreaseSupply = /*#__PURE__*/function () {
      var _decreaseSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(supply, count) {
        var state, cur, to, _this$engine$actions$2;

        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                state = this.engine.getState();
                cur = state.path.outfit[supply] || 0;

                if (!cur) {
                  _context3.next = 8;
                  break;
                }

                to = Math.max(0, cur - count);

                if (!(cur !== to)) {
                  _context3.next = 8;
                  break;
                }

                _context3.next = 7;
                return this.engine.dispatch(this.engine.actions.path.outfit.setM((_this$engine$actions$2 = {}, _this$engine$actions$2[supply] = to, _this$engine$actions$2)));

              case 7:
                this.updateOutfitting();

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function decreaseSupply(_x3, _x4) {
        return _decreaseSupply.apply(this, arguments);
      }

      return decreaseSupply;
    }();

    return Path;
  }(GameModule);

  var _cost$2, _cost2$2;
  operationManager.add({
    id: 'Ship.reinforceHull',
    name: translate('reinforce hull'),
    cooldown: function cooldown() {
      return config$1.Ship.ALLOY_PER_HULL;
    },
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.engine.activeSpace === exports.GameSpace.Ship;
    },
    meta: {
      space: exports.GameSpace.Ship,
      cost: (_cost$2 = {}, _cost$2[exports.StoreCategory.alien_alloy] = config$1.Ship.ALLOY_PER_HULL, _cost$2)
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine) {
        var state;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = engine.getState();

                if (!((state.stores.alien_alloy || 0) < config$1.Ship.ALLOY_PER_HULL)) {
                  _context.next = 4;
                  break;
                }

                engine.notify(translate('not enough alien alloy'), exports.GameSpace.Ship);
                return _context.abrupt("return", false);

              case 4:
                _context.next = 6;
                return engine.dispatch(engine.actions.stores.addM({
                  alien_alloy: -1 * config$1.Ship.ALLOY_PER_HULL
                }));

              case 6:
                _context.next = 8;
                return engine.dispatch(engine.actions.game.spaceShip.addM({
                  hull: 1
                }));

              case 8:
                return _context.abrupt("return", true);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Ship.upgradeEngine',
    name: translate('upgrade engine'),
    cooldown: function cooldown() {
      return config$1.Ship.ALLOY_PER_THRUSTER;
    },
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.engine.activeSpace === exports.GameSpace.Ship;
    },
    meta: {
      space: exports.GameSpace.Ship,
      cost: (_cost2$2 = {}, _cost2$2[exports.StoreCategory.alien_alloy] = config$1.Ship.ALLOY_PER_THRUSTER, _cost2$2)
    },
    exec: function () {
      var _exec2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine) {
        var state;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                state = engine.getState();

                if (!((state.stores.alien_alloy || 0) < config$1.Ship.ALLOY_PER_THRUSTER)) {
                  _context2.next = 4;
                  break;
                }

                engine.notify(translate('not enough alien alloy'), exports.GameSpace.Ship);
                return _context2.abrupt("return", false);

              case 4:
                _context2.next = 6;
                return engine.dispatch(engine.actions.stores.addM({
                  alien_alloy: -1 * config$1.Ship.ALLOY_PER_THRUSTER
                }));

              case 6:
                _context2.next = 8;
                return engine.dispatch(engine.actions.game.spaceShip.addM({
                  thrusters: 1
                }));

              case 8:
                return _context2.abrupt("return", true);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function exec(_x2) {
        return _exec2.apply(this, arguments);
      }

      return exec;
    }()
  });
  operationManager.add({
    id: 'Ship.checkLiftOff',
    name: translate('lift off'),
    cooldown: function cooldown() {
      return 0;
    },
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.engine.activeSpace === exports.GameSpace.Ship;
    },
    meta: {
      space: exports.GameSpace.Ship
    },
    exec: function () {
      var _exec3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(engine) {
        var event;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // const state = engine.getState();
                {
                  event = {
                    title: translate('Ready to Leave?'),
                    id: 'ship_check_lift_off',
                    scenes: {
                      start: {
                        text: [translate("time to get out of this place. won't be coming back.")],
                        buttons: {
                          fly: {
                            text: translate('lift off'),
                            onChoose: function onChoose(engine) {
                              engine.dispatch(engine.actions.game.spaceShip.setM({
                                seenWarning: true
                              }));
                              var score = engine.prestige.calculateScore();
                              engine.notify(translate("game end"));
                              /* i18n-extract score for this game: {score} */

                              engine.notify("score for this game: " + score);
                              engine.notify("https://adarkroom.doublespeakgames.com");
                              engine.spaces.Ship.liftOff();
                            },
                            nextScene: 'end'
                          },
                          wait: {
                            text: translate('linger'),
                            onChoose: function onChoose() {},
                            nextScene: 'end'
                          }
                        }
                      }
                    }
                  };
                  engine.events.addEvent('Ship', event);
                  engine.events.startEvent(event);
                }

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function exec(_x3) {
        return _exec3.apply(this, arguments);
      }

      return exec;
    }()
  });

  var Ship = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(Ship, _GameModule);

    function Ship(engine) {
      return _GameModule.call(this, engine) || this;
    }

    var _proto = Ship.prototype;

    _proto.onArrival = function onArrival() {
      var state = this.engine.getState();

      if (!state.game.spaceShip.seenShip) {
        this.engine.notify(translate('somewhere above the debris cloud, the wanderer fleet hovers. been on this rock too long.'), exports.GameSpace.Ship);
        this.engine.dispatch(this.engine.actions.game.spaceShip.setM({
          seenShip: true
        }));
      }
    };

    _proto.getMaxHull = function getMaxHull() {
      return this.engine.getState().game.spaceShip.hull || 0;
    };

    _proto.liftOff = function liftOff() {
      this.engine.travelTo(exports.GameSpace.Space);
    };

    return Ship;
  }(GameModule);

  var Space = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(Space, _GameModule);

    function Space(engine) {
      return _GameModule.call(this, engine) || this;
    }

    var _proto = Space.prototype;

    _proto.onArrival = function onArrival() {
      this.engine.endGame();
    };

    return Space;
  }(GameModule);

  var _buildings;
  operationManager.add({
    id: 'Outside.checkTraps',
    name: translate('check traps'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.engine.activeSpace === exports.GameSpace.Outside;
    },
    cooldown: function cooldown() {
      return config$1.Outside.TRAPS_DELAY;
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine) {
        var state, drops, msg, numTraps, numBait, numDrops, i, roll, j, drop, num, s, l, len, baitUsed;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = engine.getState();
                drops = {};
                msg = [];
                numTraps = state.game.buildings.trap || 0;

                if (numTraps) {
                  _context.next = 9;
                  break;
                }

                engine.notify('not enough trap');
                _context.next = 8;
                return engine.operationExecutor.clearCooldown('Outside.checkTraps');

              case 8:
                return _context.abrupt("return");

              case 9:
                numBait = state.stores.bait || 0;
                numDrops = numTraps + (numBait < numTraps ? numBait : numTraps);
                i = 0;

              case 12:
                if (!(i < numDrops)) {
                  _context.next = 28;
                  break;
                }

                roll = Math.random();
                _context.t0 = runtime_1.keys(config$1.Outside.TrapDrops);

              case 15:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 25;
                  break;
                }

                j = _context.t1.value;
                drop = config$1.Outside.TrapDrops[j];

                if (!(roll < drop.rollUnder)) {
                  _context.next = 23;
                  break;
                }

                num = drops[drop.name];

                if (typeof num == 'undefined') {
                  num = 0;
                  msg.push(drop.message);
                }

                drops[drop.name] = num + 1;
                return _context.abrupt("break", 25);

              case 23:
                _context.next = 15;
                break;

              case 25:
                i++;
                _context.next = 12;
                break;

              case 28:
                /// TRANSLATORS : Mind the whitespace at the end.

                /* i18n-extract the traps contain {item1} */

                /* i18n-extract the traps contain {item1} and {item2} */

                /* i18n-extract the traps contain {item1}, {item2} and {item3} */

                /* i18n-extract the traps contain {item1}, {item2}, {item3} and {item4} */

                /* i18n-extract the traps contain {item1}, {item2}, {item3}, {item4} and {item5} */

                /* i18n-extract the traps contain {item1}, {item2}, {item3}, {item4}, {item5} and {item6} */
                s = 'the traps contain ';

                for (l = 0, len = msg.length; l < len; l++) {
                  if (len > 1 && l > 0 && l < len - 1) {
                    s += ", ";
                  } else if (len > 1 && l == len - 1) {
                    /// TRANSLATORS : Mind the whitespaces at the beginning and end.
                    s += " and ";
                  }

                  s += msg[l];
                }

                baitUsed = numBait < numTraps ? numBait : numTraps;
                drops['bait'] = -baitUsed;
                engine.notify(s, exports.GameSpace.Outside);
                _context.next = 35;
                return engine.dispatch(engine.actions.stores.addM(drops));

              case 35:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }(),
    meta: {
      buildings: (_buildings = {}, _buildings[exports.Building.trap] = 1, _buildings),
      space: exports.GameSpace.Outside
    }
  });
  operationManager.add({
    id: 'Outside.gatherWood',
    name: translate('gather wood'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return state.engine.activeSpace === exports.GameSpace.Outside;
    },
    cooldown: function cooldown() {
      return config$1.Outside.GATHER_DELAY;
    },
    exec: function () {
      var _exec2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine) {
        var state, gatherAmt;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                engine.notify(translate("dry brush and dead branches litter the forest floor"), exports.GameSpace.Outside);
                state = engine.getState();
                gatherAmt = !!state.game.buildings.cart ? 50 : 10;
                _context2.next = 5;
                return engine.dispatch(engine.actions.stores.addM({
                  wood: gatherAmt
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function exec(_x2) {
        return _exec2.apply(this, arguments);
      }

      return exec;
    }(),
    meta: {
      space: exports.GameSpace.Outside
    }
  });
  operationManager.add({
    id: 'Outside.building',
    name: translate("Buildings"),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();

      if (state.engine.activeSpace !== exports.GameSpace.Outside) {
        return false;
      }

      var existBuilding = false;
      var storeNames = Object.keys(state.stores);

      for (var i = 0, len = storeNames.length; i < len; i++) {
        var name = storeNames[i];

        if (state.stores[name] && config$1.items[name] && config$1.items[name].type === 'building') {
          existBuilding = true;
          break;
        }
      }

      return existBuilding;
    },
    exec: function () {
      var _exec3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(engine) {
        var state, storeNames, buildings, i, len, name, count;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                state = engine.getState();
                storeNames = Object.keys(state.stores);
                buildings = [];

                for (i = 0, len = storeNames.length; i < len; i++) {
                  name = storeNames[i];
                  count = state.stores[name];

                  if (count && config$1.items[name] && config$1.items[name].type === 'building') {
                    buildings.push({
                      name: name,
                      count: count,
                      info: config$1.items[name]
                    });
                  }
                }

                return _context3.abrupt("return", buildings);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function exec(_x3) {
        return _exec3.apply(this, arguments);
      }

      return exec;
    }(),
    meta: {
      space: exports.GameSpace.Outside
    }
  });

  var Outside = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(Outside, _GameModule);

    function Outside(engine) {
      var _this;

      _this = _GameModule.call(this, engine) || this;
      _this._popTimeout = null;

      _this.unsubBuilding = function () {};

      _this.updateVillageIncome();

      _this.schedulePopIncrease();

      _this.unsubBuilding = engine.observer(function (state) {
        return state.game.buildings;
      }, function () {
        _this.enableBuildingWorker();
      });
      return _this;
    }

    var _proto = Outside.prototype;

    _proto.onArrival = function onArrival() {
      var state = this.engine.getState();

      if (!state.game.outside.seenForest) {
        this.engine.notify(translate('the sky is grey and the wind blows relentlessly'), exports.GameSpace.Outside);
        this.engine.dispatch(this.engine.actions.game.outside.setM({
          seenForest: true
        }));
      }
    };

    _proto.increaseWorker = function increaseWorker(worker, count) {
      var gatherCount = this.getNumGatherers();

      if (gatherCount > 0) {
        var _this$engine$actions$;

        var increaseAmt = Math.min(gatherCount, count);
        log('increasing ' + worker + ' by ' + increaseAmt);
        this.engine.dispatch(this.engine.actions.game.workers.addM((_this$engine$actions$ = {}, _this$engine$actions$[worker] = increaseAmt, _this$engine$actions$)));
      }
    };

    _proto.getTitle = function getTitle() {
      var numHuts = this.engine.getState().game.buildings.hut || 0;
      var title;

      if (numHuts === 0) {
        title = translate("A Silent Forest");
      } else if (numHuts == 1) {
        title = translate("A Lonely Hut");
      } else if (numHuts <= 4) {
        title = translate("A Tiny Village");
      } else if (numHuts <= 8) {
        title = translate("A Modest Village");
      } else if (numHuts <= 14) {
        title = translate("A Large Village");
      } else {
        title = translate("A Raucous Village");
      }

      return title;
    };

    _proto.decreaseWorker = function decreaseWorker(worker, count) {
      var state = this.engine.getState();
      var existCount = state.game.workers[worker] || 0;

      if (existCount > 0) {
        var _this$engine$actions$2;

        var decreaseAmt = Math.min(existCount, count);
        log('decreasing ' + worker + ' by ' + decreaseAmt);
        this.engine.dispatch(this.engine.actions.game.workers.addM((_this$engine$actions$2 = {}, _this$engine$actions$2[worker] = decreaseAmt * -1, _this$engine$actions$2)));
      }
    };

    _proto.clean = function clean() {
      clearTimeout(this._popTimeout);
      this.unsubBuilding();

      _GameModule.prototype.clean.call(this);
    };

    _proto.destroyHuts = /*#__PURE__*/function () {
      var _destroyHuts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(count, allowEmpty) {
        var state, dead, lastHut, hut, i, population, rate, full, huts, target, inhabitants;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                state = this.engine.getState();
                dead = 0;
                lastHut = state.game.buildings.hut;
                hut = lastHut;
                i = 0;

              case 5:
                if (!(i < count)) {
                  _context.next = 20;
                  break;
                }

                population = state.game.population.value;
                rate = population / config$1.Outside.HUT_ROOM;
                full = Math.floor(rate);
                huts = allowEmpty ? hut : Math.ceil(rate);

                if (huts) {
                  _context.next = 12;
                  break;
                }

                return _context.abrupt("break", 20);

              case 12:
                target = Math.floor(Math.random() * huts) + 1;
                inhabitants = 0;

                if (target <= full) {
                  inhabitants = config$1.Outside.HUT_ROOM;
                } else if (target === full + 1) {
                  inhabitants = population % config$1.Outside.HUT_ROOM;
                }

                hut--;

                if (inhabitants) {
                  dead += inhabitants;
                }

              case 17:
                i++;
                _context.next = 5;
                break;

              case 20:
                if (!dead) {
                  _context.next = 23;
                  break;
                }

                _context.next = 23;
                return this.killVillagers(dead);

              case 23:
                if (!(hut !== lastHut)) {
                  _context.next = 26;
                  break;
                }

                _context.next = 26;
                return this.engine.dispatch(this.engine.actions.game.buildings.setM({
                  hut: hut
                }));

              case 26:
                return _context.abrupt("return", {
                  dead: dead,
                  destroyHut: hut - lastHut
                });

              case 27:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function destroyHuts(_x, _x2) {
        return _destroyHuts.apply(this, arguments);
      }

      return destroyHuts;
    }();

    _proto.killVillagers = /*#__PURE__*/function () {
      var _killVillagers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(count) {
        var state, last_population, population, remaining, changed, gap, k, numWorkers;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                state = this.engine.getState();
                last_population = state.game.population.value;
                population = last_population - count * -1;

                if (population < 0) {
                  population = 0;
                }

                if (!(population !== last_population)) {
                  _context2.next = 7;
                  break;
                }

                _context2.next = 7;
                return this.engine.dispatch(this.engine.actions.game.population.setM({
                  value: population
                }));

              case 7:
                remaining = this.getNumGatherers();
                changed = {};

                if (!(remaining < 0)) {
                  _context2.next = 25;
                  break;
                }

                gap = -remaining;
                _context2.t0 = runtime_1.keys(state.game.workers);

              case 12:
                if ((_context2.t1 = _context2.t0()).done) {
                  _context2.next = 24;
                  break;
                }

                k = _context2.t1.value;
                numWorkers = lodash.get(state.game.workers, k, 0);

                if (!(numWorkers < gap)) {
                  _context2.next = 20;
                  break;
                }

                gap -= numWorkers;
                changed[k] = 0;
                _context2.next = 22;
                break;

              case 20:
                changed[k] = numWorkers + gap * -1;
                return _context2.abrupt("break", 24);

              case 22:
                _context2.next = 12;
                break;

              case 24:
                if (!lodash.isPlainObject(changed)) {
                  this.engine.dispatch(this.engine.actions.game.workers.setM(changed));
                }

              case 25:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function killVillagers(_x3) {
        return _killVillagers.apply(this, arguments);
      }

      return killVillagers;
    }();

    _proto.getNumGatherers = function getNumGatherers() {
      var state = this.engine.getState();
      var num = state.game.population.value;

      for (var k in state.game.workers) {
        num -= lodash.get(state.game.workers, k, 0);
      }

      return num;
    };

    _proto.getMaxPopulation = function getMaxPopulation() {
      var state = this.engine.getState();
      return (state.game.buildings.hut || 0) * config$1.Outside.HUT_ROOM;
    };

    _proto.schedulePopIncrease = function schedulePopIncrease() {
      var nextIncrease = Math.floor(Math.random() * (config$1.Outside.POP_DELAY[1] - config$1.Outside.POP_DELAY[0])) + config$1.Outside.POP_DELAY[0];
      log('next population increase scheduled in ' + nextIncrease + ' minutes');
      this._popTimeout = this.engine.setTimeout(this.increasePopulation.bind(this), nextIncrease * 60 * 1000);
    };

    _proto.increasePopulation = function increasePopulation() {
      var state = this.engine.getState();

      if (state.features.location.Outside) {
        var space = this.getMaxPopulation() - state.game.population.value;

        if (space > 0) {
          var num = Math.floor(Math.random() * (space / 2) + space / 2);
          if (num === 0) num = 1;
          var msg;

          if (num == 1) {
            msg = translate('a stranger arrives in the night');
          } else if (num < 5) {
            msg = translate('a weathered family takes up in one of the huts.');
          } else if (num < 10) {
            msg = translate('a small group arrives, all dust and bones.');
          } else if (num < 30) {
            msg = translate('a convoy lurches in, equal parts worry and hope.');
          } else {
            msg = translate("the town's booming. word does get around.");
          }

          this.engine.notify(msg);
          log('population increased by ' + num);
          this.engine.dispatch(this.engine.actions.game.population.addM({
            value: num
          }));
        }
      }

      this.schedulePopIncrease();
    };

    _proto.enableBuildingWorker = function enableBuildingWorker() {
      var state = this.engine.getState();
      var jobMap = {
        'lodge': ['hunter', 'trapper'],
        'tannery': ['tanner'],
        'smokehouse': ['charcutier'],
        'iron mine': ['iron miner'],
        'coal mine': ['coal miner'],
        'sulphur mine': ['sulphur miner'],
        'steelworks': ['steelworker'],
        'armoury': ['armourer']
      };
      var added = false;

      for (var name in state.game.buildings) {
        if (name !== 'trap') {
          var jobs = jobMap[name];

          if (jobs) {
            for (var i = 0, len = jobs.length; i < len; i++) {
              var job = jobs[i];

              if (typeof state.game.buildings[name] !== 'undefined' && typeof state.game.workers[job] === 'undefined') {
                var _this$engine$actions$3;

                this.engine.dispatch(this.engine.actions.game.workers.setM((_this$engine$actions$3 = {}, _this$engine$actions$3[job] = 0, _this$engine$actions$3)));
                added = true;
              }
            }
          }
        }
      }

      return added;
    };

    _proto.updateVillageIncome = function updateVillageIncome() {
      var state = this.engine.getState();

      for (var worker in config$1.Outside.INCOME) {
        var income = config$1.Outside.INCOME[worker];
        var num = worker == 'gatherer' ? this.getNumGatherers() : state.game.workers[worker] || 0;

        if (typeof num === 'number') {
          var stores = {};

          if (num < 0) {
            num = 0;
          }

          var needsUpdate = false;
          var curIncome = this.engine.getIncome(worker);

          for (var store in income.stores) {
            stores[store] = (income.stores[store] || 0) * num;

            if (curIncome[store] !== stores[store]) {
              needsUpdate = true;
            }
          }

          if (needsUpdate) {
            this.engine.setIncome(worker, {
              delay: income.delay,
              stores: stores
            });
          }
        }
      }
    };

    return Outside;
  }(GameModule);

  var Prestige = /*#__PURE__*/function (_GameModule) {
    _inheritsLoose(Prestige, _GameModule);

    function Prestige(engine) {
      return _GameModule.call(this, engine) || this;
    }

    var _proto = Prestige.prototype;

    _proto.collectStores = function collectStores() {
      var _this$engine$store, _this$engine2, _this$engine2$store;

      var state = (_this$engine$store = this.engine.store) == null ? void 0 : _this$engine$store.getState();
      var prevStores = state.previous.stores;

      if (prevStores && prevStores.length > 0) {
        var _this$engine, _this$engine$store2;

        var toAdd = {};

        for (var i in config$1.Prestige.storesMap) {
          var s = config$1.Prestige.storesMap[i];
          toAdd[s.store.toString()] = prevStores[i];
        }

        (_this$engine = this.engine) == null ? void 0 : (_this$engine$store2 = _this$engine.store) == null ? void 0 : _this$engine$store2.dispatch(this.engine.actions.stores.addM(toAdd));
      }

      (_this$engine2 = this.engine) == null ? void 0 : (_this$engine2$store = _this$engine2.store) == null ? void 0 : _this$engine2$store.dispatch(this.engine.actions.previous.setM({
        stores: []
      }));
    };

    _proto.save = function save() {
      var _this$engine$store3;

      var stores = this.getStores(true);
      var score = this.totalScore();
      (_this$engine$store3 = this.engine.store) == null ? void 0 : _this$engine$store3.dispatch(this.engine.actions.previous.setM({
        stores: stores,
        score: score
      }));
    };

    _proto.totalScore = function totalScore() {
      var _this$engine$store4;

      var state = (_this$engine$store4 = this.engine.store) == null ? void 0 : _this$engine$store4.getState();
      return ((state == null ? void 0 : state.previous.score) || 0) + this.calculateScore();
    };

    _proto.calculateScore = function calculateScore() {
      var _this$engine$store5;

      var state = (_this$engine$store5 = this.engine.store) == null ? void 0 : _this$engine$store5.getState();
      var scoreUnadded = this.getStores(false);
      var fullScore = 0;
      var factor = [1, 1.5, 1, 2, 2, 3, 3, 2, 2, 2, 2, 1.5, 1, 1, 10, 30, 50, 100, 150, 150, 3, 3, 5, 4];

      for (var i = 0; i < factor.length; i++) {
        fullScore += scoreUnadded[i] * factor[i];
      }

      fullScore = fullScore + ((state == null ? void 0 : state.stores.alien_alloy) || 0) * 10;
      fullScore = fullScore + state.game.spaceShip.hull * 50;
      return Math.floor(fullScore);
    };

    _proto.getStores = function getStores(reduce) {
      var state = this.engine.store.getState();
      var stores = [];

      for (var i in config$1.Prestige.storesMap) {
        var s = config$1.Prestige.storesMap[i];
        stores.push(Math.floor((state.stores[s.store] || 0) / (reduce ? this.randGen(s.type) : 1)));
      }

      return stores;
    };

    _proto.randGen = function randGen(storeType) {
      var amount;

      switch (storeType) {
        case 'g':
          amount = Math.floor(Math.random() * 10);
          break;

        case 'w':
          amount = Math.floor(Math.floor(Math.random() * 10) / 2);
          break;

        case 'a':
          amount = Math.ceil(Math.random() * 10 * Math.ceil(Math.random() * 10));
          break;

        default:
          return 1;
      }

      if (amount !== 0) {
        return amount;
      }

      return 1;
    };

    return Prestige;
  }(GameModule);

  operationManager.add({
    id: 'Engine.travelTo',
    name: translate('travel to'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      var activeCount = 0;
      Object.keys(state.features.location).forEach(function (location) {
        if (state.features.location[location]) {
          activeCount++;
        }
      });
      return !state.engine.activeSubSpace && activeCount > 1 && state.engine.activeSpace !== exports.GameSpace.World && state.engine.activeSpace !== exports.GameSpace.Space;
    },
    exec: function () {
      var _exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(engine, _, space) {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return engine.travelTo(space);

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function exec(_x, _x2, _x3) {
        return _exec.apply(this, arguments);
      }

      return exec;
    }(),
    help: function help(engine) {
      var state = engine.getState();
      var locations = [];
      Object.keys(state.features.location).forEach(function (location) {
        if (state.features.location[location]) {
          locations.push(location);
        }
      });
      return {
        desc: "travel to " + locations.join(', '),
        parms: [locations]
      };
    }
  });
  operationManager.add({
    id: 'Engine.SubSpace.back',
    name: translate('Back'),
    isAvailable: function isAvailable(engine) {
      var state = engine.getState();
      return !!state.engine.activeSubSpace;
    },
    meta: {},
    exec: function () {
      var _exec2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(engine) {
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return engine.travelToSubSpace('');

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function exec(_x4) {
        return _exec2.apply(this, arguments);
      }

      return exec;
    }()
  });

  var Engine = /*#__PURE__*/function () {
    function Engine(options) {
      this.GAME_OVER = false;
      this.options = {
        debug: false,
        doubleTime: false
      };
      this.actions = actions$v;
      this.paused = false;
      this._incomeTimeout = null;
      Object.assign(this.options, options || {});
      config$2({
        enable: this.options.debug
      });
      this.operationExecutor = new OperationExecutor(this, operationManager);
      this.startGame(options == null ? void 0 : options.state);
    }

    var _proto = Engine.prototype;

    _proto.notify = function notify(text, space, noQueue) {
      var _this$store;

      (_this$store = this.store) == null ? void 0 : _this$store.dispatch(this.actions.notifications.notify({
        message: {
          text: translate(text),
          module: space
        },
        noQueue: noQueue
      }));
    };

    _proto.dispatch = /*#__PURE__*/function () {
      var _dispatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(action) {
        var res;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.store.dispatch(action);

              case 2:
                res = _context.sent;
                return _context.abrupt("return", res);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function dispatch(_x7) {
        return _dispatch.apply(this, arguments);
      }

      return dispatch;
    }();

    _proto.operation = /*#__PURE__*/function () {
      var _operation = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(operationId, data) {
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.operationExecutor.exec(operationId, data);

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function operation(_x8, _x9) {
        return _operation.apply(this, arguments);
      }

      return operation;
    }();

    _proto.operations = function operations() {
      return this.operationExecutor.availableOperations();
    };

    _proto.startGame = function startGame(state) {
      var _this$spaces;

      // this.clean();
      this.GAME_OVER = false;
      this.paused = false;
      this.loadGame(state);
      this.events = new Events(this);
      this.spaces = (_this$spaces = {}, _this$spaces[exports.GameSpace.World] = new World(this), _this$spaces[exports.GameSpace.Room] = new Room(this), _this$spaces[exports.GameSpace.Outside] = new Outside(this), _this$spaces[exports.GameSpace.Path] = new Path(this), _this$spaces[exports.GameSpace.Ship] = new Ship(this), _this$spaces[exports.GameSpace.Space] = new Space(this), _this$spaces);
      this.prestige = new Prestige(this);
      this._incomeTimeout = this.setTimeout(this.collectIncome.bind(this), 1000);
      var gameState = this.getState();

      if (!(gameState != null && gameState.engine.activeSpace)) {
        this.travelTo(exports.GameSpace.Room, true);
      } else {
        this.travelTo(gameState == null ? void 0 : gameState.engine.activeSpace, true);
      }
    };

    _proto.clean = function clean() {
      var _this = this;

      if (!this.events) {
        return;
      }

      clearTimeout(this._incomeTimeout);
      this.events.clean();
      Object.keys(this.spaces).forEach(function (space) {
        _this.spaces[space].clean();
      });
      this.prestige.clean();
    };

    _proto.endGame = function endGame() {
      if (this.GAME_OVER) {
        return;
      }

      this.GAME_OVER = true;
      this.clean();
    };

    _proto.addToStore = function addToStore(toAdd) {
      this.dispatch(this.actions.stores.addM(toAdd));
    };

    _proto.setToStore = function setToStore(toSet) {
      this.dispatch(this.actions.stores.setM(toSet));
    };

    _proto.observer = function observer(select, onChange) {
      var currentState;
      var store = this.store;

      function handleChange() {
        var nextState = select(store.getState());

        if (!lodash.isEqual(nextState, currentState)) {
          currentState = nextState;
          onChange(currentState);
        }
      }

      var unsubscribe = store.subscribe(handleChange);
      handleChange();
      return unsubscribe;
    };

    _proto.getIncome = function getIncome(source) {
      var state = this.getState();
      return lodash.get(state.income, source, {});
    };

    _proto.setIncome = function setIncome(source, options) {
      var _this$actions$income$;

      var state = this.getState();

      var exist = lodash.get(state.income, source);

      if (exist) {
        options.timeLeft = exist.timeLeft;
      }

      this.dispatch(this.actions.income.setM((_this$actions$income$ = {}, _this$actions$income$[source] = options, _this$actions$income$)));
    };

    _proto.pauseGame = function pauseGame() {
      this.paused = true;
      this.clean();
    };

    _proto.continueGame = function continueGame() {
      var _this$store2;

      this.paused = false;
      this.startGame((_this$store2 = this.store) == null ? void 0 : _this$store2.getState());
    };

    _proto.saveGame = function saveGame() {};

    _proto.getActionSpace = function getActionSpace() {
      var _this$store3;

      return (_this$store3 = this.store) == null ? void 0 : _this$store3.getState().engine.activeSpace;
    };

    _proto.getState = function getState() {
      return this.store.getState();
    };

    _proto.switchLanguage = function switchLanguage() {};

    _proto.travelTo = /*#__PURE__*/function () {
      var _travelTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(space, force) {
        var activeSpace, _this$store4;

        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                activeSpace = this.getActionSpace();

                if (!(activeSpace !== space || force)) {
                  _context3.next = 7;
                  break;
                }

                _context3.next = 4;
                return this.travelToSubSpace('');

              case 4:
                _context3.next = 6;
                return (_this$store4 = this.store) == null ? void 0 : _this$store4.dispatch(this.actions.engine.changeSpace(space));

              case 6:
                this.spaces[space].onArrival();

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function travelTo(_x10, _x11) {
        return _travelTo.apply(this, arguments);
      }

      return travelTo;
    }();

    _proto.travelToSubSpace = /*#__PURE__*/function () {
      var _travelToSubSpace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(space) {
        var _this$store5;

        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (_this$store5 = this.store) == null ? void 0 : _this$store5.dispatch(this.actions.engine.changeSubSpace(space));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function travelToSubSpace(_x12) {
        return _travelToSubSpace.apply(this, arguments);
      }

      return travelToSubSpace;
    }();

    _proto.getGuid = function getGuid() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
            v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };

    _proto.setTimeout = /*#__PURE__*/function (_setTimeout) {
      function setTimeout(_x, _x2, _x3) {
        return _setTimeout.apply(this, arguments);
      }

      setTimeout.toString = function () {
        return _setTimeout.toString();
      };

      return setTimeout;
    }(function (callback, timeout, skipDouble) {
      if (this.options.doubleTime && !skipDouble) {
        log('Double time, cutting timeout in half');
        timeout /= 2;
      }

      return setTimeout(callback, timeout);
    });

    _proto.setInterval = /*#__PURE__*/function (_setInterval) {
      function setInterval(_x4, _x5, _x6) {
        return _setInterval.apply(this, arguments);
      }

      setInterval.toString = function () {
        return _setInterval.toString();
      };

      return setInterval;
    }(function (callback, interval, skipDouble) {
      if (this.options.doubleTime && !skipDouble) {
        log('Double time, cutting timeout in half');
        interval /= 2;
      }

      return setInterval(callback, interval);
    });

    _proto.loadGame = function loadGame(state) {
      this.store = createState(this, state);
    };

    _proto.collectIncome = function collectIncome() {
      var changed = false;
      var incomeStores = [];

      var state = lodash.cloneDeep(this.getState());

      if (state.engine.activeSpace !== exports.GameSpace.Space) {
        for (var source in state.income) {
          var income = state.income[source];

          if (!income) {
            continue;
          }

          if (typeof income.timeLeft !== 'number') {
            income.timeLeft = 0;
          }

          income.timeLeft--;

          if (income.timeLeft <= 0) {
            log('collection income from ' + source);

            if (source === 'thieves') {
              this.addStolen(income.stores);
            }

            var cost = income.stores;
            var ok = true;

            if (source !== 'thieves') {
              for (var k in cost) {
                var have = state.stores[k] || 0;

                if (have + cost[k] < 0) {
                  ok = false;
                  break;
                }
              }
            }

            if (ok) {
              incomeStores.push(income.stores);
            }

            changed = true;

            if (typeof income.delay == 'number') {
              income.timeLeft = income.delay;
            }
          }
        }
      }

      if (changed) {
        var addStores = {};
        incomeStores.forEach(function (store) {
          Object.keys(store).forEach(function (key) {
            var addCount = addStores[key] || 0 + store[key] || 0;

            if (addCount) {
              addStores[key] = addStores[key] || 0 + store[key] || 0;
            }
          });
        });
        this.dispatch(this.actions.stores.addM(addStores));
      }

      this.dispatch(this.actions.income.setM(state.income));
      this._incomeTimeout = this.setTimeout(this.collectIncome.bind(this), 1000);
    };

    _proto.addStolen = function addStolen(stores) {
      var state = this.getState();
      var addStores = {};

      for (var k in stores) {
        var old = state.stores[k] || 0;

        var _short = old + stores[k]; //if they would steal more than actually owned


        if (_short < 0) {
          addStores[k] = stores[k] * -1 + _short;
        } else {
          addStores[k] = stores[k] * -1;
        }
      }

      this.dispatch(this.actions.game.stolen.addM(addStores));
    };

    return Engine;
  }();

  var toStr = Object.prototype.toString;

  var isArguments = function isArguments(value) {
  	var str = toStr.call(value);
  	var isArgs = str === '[object Arguments]';
  	if (!isArgs) {
  		isArgs = str !== '[object Array]' &&
  			value !== null &&
  			typeof value === 'object' &&
  			typeof value.length === 'number' &&
  			value.length >= 0 &&
  			toStr.call(value.callee) === '[object Function]';
  	}
  	return isArgs;
  };

  var keysShim;
  if (!Object.keys) {
  	// modified from https://github.com/es-shims/es5-shim
  	var has = Object.prototype.hasOwnProperty;
  	var toStr$1 = Object.prototype.toString;
  	var isArgs = isArguments; // eslint-disable-line global-require
  	var isEnumerable = Object.prototype.propertyIsEnumerable;
  	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
  	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  	var dontEnums = [
  		'toString',
  		'toLocaleString',
  		'valueOf',
  		'hasOwnProperty',
  		'isPrototypeOf',
  		'propertyIsEnumerable',
  		'constructor'
  	];
  	var equalsConstructorPrototype = function (o) {
  		var ctor = o.constructor;
  		return ctor && ctor.prototype === o;
  	};
  	var excludedKeys = {
  		$applicationCache: true,
  		$console: true,
  		$external: true,
  		$frame: true,
  		$frameElement: true,
  		$frames: true,
  		$innerHeight: true,
  		$innerWidth: true,
  		$onmozfullscreenchange: true,
  		$onmozfullscreenerror: true,
  		$outerHeight: true,
  		$outerWidth: true,
  		$pageXOffset: true,
  		$pageYOffset: true,
  		$parent: true,
  		$scrollLeft: true,
  		$scrollTop: true,
  		$scrollX: true,
  		$scrollY: true,
  		$self: true,
  		$webkitIndexedDB: true,
  		$webkitStorageInfo: true,
  		$window: true
  	};
  	var hasAutomationEqualityBug = (function () {
  		/* global window */
  		if (typeof window === 'undefined') { return false; }
  		for (var k in window) {
  			try {
  				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
  					try {
  						equalsConstructorPrototype(window[k]);
  					} catch (e) {
  						return true;
  					}
  				}
  			} catch (e) {
  				return true;
  			}
  		}
  		return false;
  	}());
  	var equalsConstructorPrototypeIfNotBuggy = function (o) {
  		/* global window */
  		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
  			return equalsConstructorPrototype(o);
  		}
  		try {
  			return equalsConstructorPrototype(o);
  		} catch (e) {
  			return false;
  		}
  	};

  	keysShim = function keys(object) {
  		var isObject = object !== null && typeof object === 'object';
  		var isFunction = toStr$1.call(object) === '[object Function]';
  		var isArguments = isArgs(object);
  		var isString = isObject && toStr$1.call(object) === '[object String]';
  		var theKeys = [];

  		if (!isObject && !isFunction && !isArguments) {
  			throw new TypeError('Object.keys called on a non-object');
  		}

  		var skipProto = hasProtoEnumBug && isFunction;
  		if (isString && object.length > 0 && !has.call(object, 0)) {
  			for (var i = 0; i < object.length; ++i) {
  				theKeys.push(String(i));
  			}
  		}

  		if (isArguments && object.length > 0) {
  			for (var j = 0; j < object.length; ++j) {
  				theKeys.push(String(j));
  			}
  		} else {
  			for (var name in object) {
  				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
  					theKeys.push(String(name));
  				}
  			}
  		}

  		if (hasDontEnumBug) {
  			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

  			for (var k = 0; k < dontEnums.length; ++k) {
  				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
  					theKeys.push(dontEnums[k]);
  				}
  			}
  		}
  		return theKeys;
  	};
  }
  var implementation = keysShim;

  var slice$k = Array.prototype.slice;


  var origKeys = Object.keys;
  var keysShim$1 = origKeys ? function keys(o) { return origKeys(o); } : implementation;

  var originalKeys = Object.keys;

  keysShim$1.shim = function shimObjectKeys() {
  	if (Object.keys) {
  		var keysWorksWithArguments = (function () {
  			// Safari 5.0 bug
  			var args = Object.keys(arguments);
  			return args && args.length === arguments.length;
  		}(1, 2));
  		if (!keysWorksWithArguments) {
  			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
  				if (isArguments(object)) {
  					return originalKeys(slice$k.call(object));
  				}
  				return originalKeys(object);
  			};
  		}
  	} else {
  		Object.keys = keysShim$1;
  	}
  	return Object.keys || keysShim$1;
  };

  var objectKeys = keysShim$1;

  var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

  var toStr$2 = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var origDefineProperty = Object.defineProperty;

  var isFunction = function (fn) {
  	return typeof fn === 'function' && toStr$2.call(fn) === '[object Function]';
  };

  var arePropertyDescriptorsSupported = function () {
  	var obj = {};
  	try {
  		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
  		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
  		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
  			return false;
  		}
  		return obj.x === obj;
  	} catch (e) { /* this is IE 8. */
  		return false;
  	}
  };
  var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

  var defineProperty = function (object, name, value, predicate) {
  	if (name in object && (!isFunction(predicate) || !predicate())) {
  		return;
  	}
  	if (supportsDescriptors) {
  		origDefineProperty(object, name, {
  			configurable: true,
  			enumerable: false,
  			value: value,
  			writable: true
  		});
  	} else {
  		object[name] = value;
  	}
  };

  var defineProperties = function (object, map) {
  	var predicates = arguments.length > 2 ? arguments[2] : {};
  	var props = objectKeys(map);
  	if (hasSymbols) {
  		props = concat.call(props, Object.getOwnPropertySymbols(map));
  	}
  	for (var i = 0; i < props.length; i += 1) {
  		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  	}
  };

  defineProperties.supportsDescriptors = !!supportsDescriptors;

  var defineProperties_1 = defineProperties;

  /* eslint no-invalid-this: 1 */

  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var slice$l = Array.prototype.slice;
  var toStr$3 = Object.prototype.toString;
  var funcType = '[object Function]';

  var implementation$1 = function bind(that) {
      var target = this;
      if (typeof target !== 'function' || toStr$3.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice$l.call(arguments, 1);

      var bound;
      var binder = function () {
          if (this instanceof bound) {
              var result = target.apply(
                  this,
                  args.concat(slice$l.call(arguments))
              );
              if (Object(result) === result) {
                  return result;
              }
              return this;
          } else {
              return target.apply(
                  that,
                  args.concat(slice$l.call(arguments))
              );
          }
      };

      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
          boundArgs.push('$' + i);
      }

      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

      if (target.prototype) {
          var Empty = function Empty() {};
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
      }

      return bound;
  };

  var functionBind = Function.prototype.bind || implementation$1;

  /* eslint complexity: [2, 18], max-statements: [2, 33] */
  var shams = function hasSymbols() {
  	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
  	if (typeof Symbol.iterator === 'symbol') { return true; }

  	var obj = {};
  	var sym = Symbol('test');
  	var symObj = Object(sym);
  	if (typeof sym === 'string') { return false; }

  	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
  	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

  	// temp disabled per https://github.com/ljharb/object.assign/issues/17
  	// if (sym instanceof Symbol) { return false; }
  	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  	// if (!(symObj instanceof Symbol)) { return false; }

  	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
  	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

  	var symVal = 42;
  	obj[sym] = symVal;
  	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
  	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

  	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

  	var syms = Object.getOwnPropertySymbols(obj);
  	if (syms.length !== 1 || syms[0] !== sym) { return false; }

  	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

  	if (typeof Object.getOwnPropertyDescriptor === 'function') {
  		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
  		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
  	}

  	return true;
  };

  var origSymbol = typeof Symbol !== 'undefined' && Symbol;


  var hasSymbols$1 = function hasNativeSymbols() {
  	if (typeof origSymbol !== 'function') { return false; }
  	if (typeof Symbol !== 'function') { return false; }
  	if (typeof origSymbol('foo') !== 'symbol') { return false; }
  	if (typeof Symbol('bar') !== 'symbol') { return false; }

  	return shams();
  };

  var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

  var undefined$1;

  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError = TypeError;

  // eslint-disable-next-line consistent-return
  var getEvalledConstructor = function (expressionSyntax) {
  	try {
  		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  	} catch (e) {}
  };

  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
  	try {
  		$gOPD({}, '');
  	} catch (e) {
  		$gOPD = null; // this is IE 8, which has a broken gOPD
  	}
  }

  var throwTypeError = function () {
  	throw new $TypeError();
  };
  var ThrowTypeError = $gOPD
  	? (function () {
  		try {
  			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
  			arguments.callee; // IE 8 does not throw here
  			return throwTypeError;
  		} catch (calleeThrows) {
  			try {
  				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
  				return $gOPD(arguments, 'callee').get;
  			} catch (gOPDthrows) {
  				return throwTypeError;
  			}
  		}
  	}())
  	: throwTypeError;

  var hasSymbols$2 = hasSymbols$1();

  var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

  var needsEval = {};

  var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

  var INTRINSICS = {
  	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
  	'%Array%': Array,
  	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
  	'%ArrayIteratorPrototype%': hasSymbols$2 ? getProto([][Symbol.iterator]()) : undefined$1,
  	'%AsyncFromSyncIteratorPrototype%': undefined$1,
  	'%AsyncFunction%': needsEval,
  	'%AsyncGenerator%': needsEval,
  	'%AsyncGeneratorFunction%': needsEval,
  	'%AsyncIteratorPrototype%': needsEval,
  	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
  	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
  	'%Boolean%': Boolean,
  	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
  	'%Date%': Date,
  	'%decodeURI%': decodeURI,
  	'%decodeURIComponent%': decodeURIComponent,
  	'%encodeURI%': encodeURI,
  	'%encodeURIComponent%': encodeURIComponent,
  	'%Error%': Error,
  	'%eval%': eval, // eslint-disable-line no-eval
  	'%EvalError%': EvalError,
  	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
  	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
  	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
  	'%Function%': $Function,
  	'%GeneratorFunction%': needsEval,
  	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
  	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
  	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
  	'%isFinite%': isFinite,
  	'%isNaN%': isNaN,
  	'%IteratorPrototype%': hasSymbols$2 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
  	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
  	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
  	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
  	'%Math%': Math,
  	'%Number%': Number,
  	'%Object%': Object,
  	'%parseFloat%': parseFloat,
  	'%parseInt%': parseInt,
  	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
  	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
  	'%RangeError%': RangeError,
  	'%ReferenceError%': ReferenceError,
  	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
  	'%RegExp%': RegExp,
  	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
  	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
  	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
  	'%String%': String,
  	'%StringIteratorPrototype%': hasSymbols$2 ? getProto(''[Symbol.iterator]()) : undefined$1,
  	'%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
  	'%SyntaxError%': $SyntaxError,
  	'%ThrowTypeError%': ThrowTypeError,
  	'%TypedArray%': TypedArray,
  	'%TypeError%': $TypeError,
  	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
  	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
  	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
  	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
  	'%URIError%': URIError,
  	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
  	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
  	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
  };

  var doEval = function doEval(name) {
  	var value;
  	if (name === '%AsyncFunction%') {
  		value = getEvalledConstructor('async function () {}');
  	} else if (name === '%GeneratorFunction%') {
  		value = getEvalledConstructor('function* () {}');
  	} else if (name === '%AsyncGeneratorFunction%') {
  		value = getEvalledConstructor('async function* () {}');
  	} else if (name === '%AsyncGenerator%') {
  		var fn = doEval('%AsyncGeneratorFunction%');
  		if (fn) {
  			value = fn.prototype;
  		}
  	} else if (name === '%AsyncIteratorPrototype%') {
  		var gen = doEval('%AsyncGenerator%');
  		if (gen) {
  			value = getProto(gen.prototype);
  		}
  	}

  	INTRINSICS[name] = value;

  	return value;
  };

  var LEGACY_ALIASES = {
  	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  	'%ArrayPrototype%': ['Array', 'prototype'],
  	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
  	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  	'%BooleanPrototype%': ['Boolean', 'prototype'],
  	'%DataViewPrototype%': ['DataView', 'prototype'],
  	'%DatePrototype%': ['Date', 'prototype'],
  	'%ErrorPrototype%': ['Error', 'prototype'],
  	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
  	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  	'%FunctionPrototype%': ['Function', 'prototype'],
  	'%Generator%': ['GeneratorFunction', 'prototype'],
  	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  	'%JSONParse%': ['JSON', 'parse'],
  	'%JSONStringify%': ['JSON', 'stringify'],
  	'%MapPrototype%': ['Map', 'prototype'],
  	'%NumberPrototype%': ['Number', 'prototype'],
  	'%ObjectPrototype%': ['Object', 'prototype'],
  	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  	'%PromisePrototype%': ['Promise', 'prototype'],
  	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  	'%Promise_all%': ['Promise', 'all'],
  	'%Promise_reject%': ['Promise', 'reject'],
  	'%Promise_resolve%': ['Promise', 'resolve'],
  	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
  	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  	'%RegExpPrototype%': ['RegExp', 'prototype'],
  	'%SetPrototype%': ['Set', 'prototype'],
  	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  	'%StringPrototype%': ['String', 'prototype'],
  	'%SymbolPrototype%': ['Symbol', 'prototype'],
  	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
  	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  	'%URIErrorPrototype%': ['URIError', 'prototype'],
  	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
  	'%WeakSetPrototype%': ['WeakSet', 'prototype']
  };



  var $concat = functionBind.call(Function.call, Array.prototype.concat);
  var $spliceApply = functionBind.call(Function.apply, Array.prototype.splice);
  var $replace = functionBind.call(Function.call, String.prototype.replace);
  var $strSlice = functionBind.call(Function.call, String.prototype.slice);

  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
  var stringToPath = function stringToPath(string) {
  	var first = $strSlice(string, 0, 1);
  	var last = $strSlice(string, -1);
  	if (first === '%' && last !== '%') {
  		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
  	} else if (last === '%' && first !== '%') {
  		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
  	}
  	var result = [];
  	$replace(string, rePropName, function (match, number, quote, subString) {
  		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  	});
  	return result;
  };
  /* end adaptation */

  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  	var intrinsicName = name;
  	var alias;
  	if (src(LEGACY_ALIASES, intrinsicName)) {
  		alias = LEGACY_ALIASES[intrinsicName];
  		intrinsicName = '%' + alias[0] + '%';
  	}

  	if (src(INTRINSICS, intrinsicName)) {
  		var value = INTRINSICS[intrinsicName];
  		if (value === needsEval) {
  			value = doEval(intrinsicName);
  		}
  		if (typeof value === 'undefined' && !allowMissing) {
  			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
  		}

  		return {
  			alias: alias,
  			name: intrinsicName,
  			value: value
  		};
  	}

  	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
  };

  var getIntrinsic = function GetIntrinsic(name, allowMissing) {
  	if (typeof name !== 'string' || name.length === 0) {
  		throw new $TypeError('intrinsic name must be a non-empty string');
  	}
  	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
  		throw new $TypeError('"allowMissing" argument must be a boolean');
  	}

  	var parts = stringToPath(name);
  	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

  	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  	var intrinsicRealName = intrinsic.name;
  	var value = intrinsic.value;
  	var skipFurtherCaching = false;

  	var alias = intrinsic.alias;
  	if (alias) {
  		intrinsicBaseName = alias[0];
  		$spliceApply(parts, $concat([0, 1], alias));
  	}

  	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
  		var part = parts[i];
  		var first = $strSlice(part, 0, 1);
  		var last = $strSlice(part, -1);
  		if (
  			(
  				(first === '"' || first === "'" || first === '`')
  				|| (last === '"' || last === "'" || last === '`')
  			)
  			&& first !== last
  		) {
  			throw new $SyntaxError('property names with quotes must have matching quotes');
  		}
  		if (part === 'constructor' || !isOwn) {
  			skipFurtherCaching = true;
  		}

  		intrinsicBaseName += '.' + part;
  		intrinsicRealName = '%' + intrinsicBaseName + '%';

  		if (src(INTRINSICS, intrinsicRealName)) {
  			value = INTRINSICS[intrinsicRealName];
  		} else if (value != null) {
  			if (!(part in value)) {
  				if (!allowMissing) {
  					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
  				}
  				return void undefined$1;
  			}
  			if ($gOPD && (i + 1) >= parts.length) {
  				var desc = $gOPD(value, part);
  				isOwn = !!desc;

  				// By convention, when a data property is converted to an accessor
  				// property to emulate a data property that does not suffer from
  				// the override mistake, that accessor's getter is marked with
  				// an `originalValue` property. Here, when we detect this, we
  				// uphold the illusion by pretending to see that original data
  				// property, i.e., returning the value rather than the getter
  				// itself.
  				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
  					value = desc.get;
  				} else {
  					value = value[part];
  				}
  			} else {
  				isOwn = src(value, part);
  				value = value[part];
  			}

  			if (isOwn && !skipFurtherCaching) {
  				INTRINSICS[intrinsicRealName] = value;
  			}
  		}
  	}
  	return value;
  };

  var callBind = createCommonjsModule(function (module) {




  var $apply = getIntrinsic('%Function.prototype.apply%');
  var $call = getIntrinsic('%Function.prototype.call%');
  var $reflectApply = getIntrinsic('%Reflect.apply%', true) || functionBind.call($call, $apply);

  var $gOPD = getIntrinsic('%Object.getOwnPropertyDescriptor%', true);
  var $defineProperty = getIntrinsic('%Object.defineProperty%', true);
  var $max = getIntrinsic('%Math.max%');

  if ($defineProperty) {
  	try {
  		$defineProperty({}, 'a', { value: 1 });
  	} catch (e) {
  		// IE 8 has a broken defineProperty
  		$defineProperty = null;
  	}
  }

  module.exports = function callBind(originalFunction) {
  	var func = $reflectApply(functionBind, $call, arguments);
  	if ($gOPD && $defineProperty) {
  		var desc = $gOPD(func, 'length');
  		if (desc.configurable) {
  			// original length, plus the receiver, minus any additional arguments (after the receiver)
  			$defineProperty(
  				func,
  				'length',
  				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
  			);
  		}
  	}
  	return func;
  };

  var applyBind = function applyBind() {
  	return $reflectApply(functionBind, $apply, arguments);
  };

  if ($defineProperty) {
  	$defineProperty(module.exports, 'apply', { value: applyBind });
  } else {
  	module.exports.apply = applyBind;
  }
  });

  var $indexOf = callBind(getIntrinsic('String.prototype.indexOf'));

  var callBound = function callBoundIntrinsic(name, allowMissing) {
  	var intrinsic = getIntrinsic(name, !!allowMissing);
  	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
  		return callBind(intrinsic);
  	}
  	return intrinsic;
  };

  var $TypeError$1 = getIntrinsic('%TypeError%');

  // http://262.ecma-international.org/5.1/#sec-9.10

  var CheckObjectCoercible = function CheckObjectCoercible(value, optMessage) {
  	if (value == null) {
  		throw new $TypeError$1(optMessage || ('Cannot call method on ' + value));
  	}
  	return value;
  };

  var RequireObjectCoercible = CheckObjectCoercible;

  var $Array = getIntrinsic('%Array%');

  // eslint-disable-next-line global-require
  var toStr$4 = !$Array.isArray && callBound('Object.prototype.toString');

  // https://ecma-international.org/ecma-262/6.0/#sec-isarray

  var IsArray = $Array.isArray || function IsArray(argument) {
  	return toStr$4(argument) === '[object Array]';
  };

  var $TypeError$2 = getIntrinsic('%TypeError%');



  var $apply = getIntrinsic('%Reflect.apply%', true) || callBound('%Function.prototype.apply%');

  // https://ecma-international.org/ecma-262/6.0/#sec-call

  var Call = function Call(F, V) {
  	var argumentsList = arguments.length > 2 ? arguments[2] : [];
  	if (!IsArray(argumentsList)) {
  		throw new $TypeError$2('Assertion failed: optional `argumentsList`, if provided, must be a List');
  	}
  	return $apply(F, V, argumentsList);
  };

  var _nodeResolve_empty = {};

  var _nodeResolve_empty$1 = {
    __proto__: null,
    'default': _nodeResolve_empty
  };

  var require$$0 = getCjsExportFromNamespace(_nodeResolve_empty$1);

  var hasMap = typeof Map === 'function' && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === 'function' && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var match = String.prototype.match;
  var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
  var isEnumerable$1 = Object.prototype.propertyIsEnumerable;

  var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
      [].__proto__ === Array.prototype // eslint-disable-line no-proto
          ? function (O) {
              return O.__proto__; // eslint-disable-line no-proto
          }
          : null
  );

  var inspectCustom = require$$0.custom;
  var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;
  var toStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;

  var objectInspect = function inspect_(obj, options, depth, seen) {
      var opts = options || {};

      if (has$1(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
          throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (
          has$1(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
              ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
              : opts.maxStringLength !== null
          )
      ) {
          throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has$1(opts, 'customInspect') ? opts.customInspect : true;
      if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
          throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
      }

      if (
          has$1(opts, 'indent')
          && opts.indent !== null
          && opts.indent !== '\t'
          && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
      ) {
          throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
      }

      if (typeof obj === 'undefined') {
          return 'undefined';
      }
      if (obj === null) {
          return 'null';
      }
      if (typeof obj === 'boolean') {
          return obj ? 'true' : 'false';
      }

      if (typeof obj === 'string') {
          return inspectString(obj, opts);
      }
      if (typeof obj === 'number') {
          if (obj === 0) {
              return Infinity / obj > 0 ? '0' : '-0';
          }
          return String(obj);
      }
      if (typeof obj === 'bigint') {
          return String(obj) + 'n';
      }

      var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
      if (typeof depth === 'undefined') { depth = 0; }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
          return isArray(obj) ? '[Array]' : '[Object]';
      }

      var indent = getIndent(opts, depth);

      if (typeof seen === 'undefined') {
          seen = [];
      } else if (indexOf(seen, obj) >= 0) {
          return '[Circular]';
      }

      function inspect(value, from, noIndent) {
          if (from) {
              seen = seen.slice();
              seen.push(from);
          }
          if (noIndent) {
              var newOpts = {
                  depth: opts.depth
              };
              if (has$1(opts, 'quoteStyle')) {
                  newOpts.quoteStyle = opts.quoteStyle;
              }
              return inspect_(value, newOpts, depth + 1, seen);
          }
          return inspect_(value, opts, depth + 1, seen);
      }

      if (typeof obj === 'function') {
          var name = nameOf(obj);
          var keys = arrObjKeys(obj, inspect);
          return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
      }
      if (isSymbol(obj)) {
          var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
          return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
          var s = '<' + String(obj.nodeName).toLowerCase();
          var attrs = obj.attributes || [];
          for (var i = 0; i < attrs.length; i++) {
              s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
          }
          s += '>';
          if (obj.childNodes && obj.childNodes.length) { s += '...'; }
          s += '</' + String(obj.nodeName).toLowerCase() + '>';
          return s;
      }
      if (isArray(obj)) {
          if (obj.length === 0) { return '[]'; }
          var xs = arrObjKeys(obj, inspect);
          if (indent && !singleLineValues(xs)) {
              return '[' + indentedJoin(xs, indent) + ']';
          }
          return '[ ' + xs.join(', ') + ' ]';
      }
      if (isError$1(obj)) {
          var parts = arrObjKeys(obj, inspect);
          if (parts.length === 0) { return '[' + String(obj) + ']'; }
          return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
      }
      if (typeof obj === 'object' && customInspect) {
          if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
              return obj[inspectSymbol]();
          } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
              return obj.inspect();
          }
      }
      if (isMap(obj)) {
          var mapParts = [];
          mapForEach.call(obj, function (value, key) {
              mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
          });
          return collectionOf('Map', mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
          var setParts = [];
          setForEach.call(obj, function (value) {
              setParts.push(inspect(value, obj));
          });
          return collectionOf('Set', setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
          return weakCollectionOf('WeakMap');
      }
      if (isWeakSet(obj)) {
          return weakCollectionOf('WeakSet');
      }
      if (isWeakRef(obj)) {
          return weakCollectionOf('WeakRef');
      }
      if (isNumber(obj)) {
          return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
          return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean$1(obj)) {
          return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
          return markBoxed(inspect(String(obj)));
      }
      if (!isDate$1(obj) && !isRegExp(obj)) {
          var ys = arrObjKeys(obj, inspect);
          var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
          var protoTag = obj instanceof Object ? '' : 'null prototype';
          var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr$5(obj).slice(8, -1) : protoTag ? 'Object' : '';
          var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
          var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');
          if (ys.length === 0) { return tag + '{}'; }
          if (indent) {
              return tag + '{' + indentedJoin(ys, indent) + '}';
          }
          return tag + '{ ' + ys.join(', ') + ' }';
      }
      return String(obj);
  };

  function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
      return quoteChar + s + quoteChar;
  }

  function quote(s) {
      return String(s).replace(/"/g, '&quot;');
  }

  function isArray(obj) { return toStr$5(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isDate$1(obj) { return toStr$5(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isRegExp(obj) { return toStr$5(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isError$1(obj) { return toStr$5(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isString(obj) { return toStr$5(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isNumber(obj) { return toStr$5(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isBoolean$1(obj) { return toStr$5(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

  // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
  function isSymbol(obj) {
      if (hasShammedSymbols) {
          return obj && typeof obj === 'object' && obj instanceof Symbol;
      }
      if (typeof obj === 'symbol') {
          return true;
      }
      if (!obj || typeof obj !== 'object' || !symToString) {
          return false;
      }
      try {
          symToString.call(obj);
          return true;
      } catch (e) {}
      return false;
  }

  function isBigInt(obj) {
      if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
          return false;
      }
      try {
          bigIntValueOf.call(obj);
          return true;
      } catch (e) {}
      return false;
  }

  var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
  function has$1(obj, key) {
      return hasOwn.call(obj, key);
  }

  function toStr$5(obj) {
      return objectToString.call(obj);
  }

  function nameOf(f) {
      if (f.name) { return f.name; }
      var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) { return m[1]; }
      return null;
  }

  function indexOf(xs, x) {
      if (xs.indexOf) { return xs.indexOf(x); }
      for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) { return i; }
      }
      return -1;
  }

  function isMap(x) {
      if (!mapSize || !x || typeof x !== 'object') {
          return false;
      }
      try {
          mapSize.call(x);
          try {
              setSize.call(x);
          } catch (s) {
              return true;
          }
          return x instanceof Map; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakMapHas.call(x, weakMapHas);
          try {
              weakSetHas.call(x, weakSetHas);
          } catch (s) {
              return true;
          }
          return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakRefDeref.call(x);
          return true;
      } catch (e) {}
      return false;
  }

  function isSet(x) {
      if (!setSize || !x || typeof x !== 'object') {
          return false;
      }
      try {
          setSize.call(x);
          try {
              mapSize.call(x);
          } catch (m) {
              return true;
          }
          return x instanceof Set; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakSetHas.call(x, weakSetHas);
          try {
              weakMapHas.call(x, weakMapHas);
          } catch (s) {
              return true;
          }
          return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isElement(x) {
      if (!x || typeof x !== 'object') { return false; }
      if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
          return true;
      }
      return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
  }

  function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
          var remaining = str.length - opts.maxStringLength;
          var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
          return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
      }
      // eslint-disable-next-line no-control-regex
      var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, 'single', opts);
  }

  function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
          8: 'b',
          9: 't',
          10: 'n',
          12: 'f',
          13: 'r'
      }[n];
      if (x) { return '\\' + x; }
      return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
  }

  function markBoxed(str) {
      return 'Object(' + str + ')';
  }

  function weakCollectionOf(type) {
      return type + ' { ? }';
  }

  function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');
      return type + ' (' + size + ') {' + joinedEntries + '}';
  }

  function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
          if (indexOf(xs[i], '\n') >= 0) {
              return false;
          }
      }
      return true;
  }

  function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === '\t') {
          baseIndent = '\t';
      } else if (typeof opts.indent === 'number' && opts.indent > 0) {
          baseIndent = Array(opts.indent + 1).join(' ');
      } else {
          return null;
      }
      return {
          base: baseIndent,
          prev: Array(depth + 1).join(baseIndent)
      };
  }

  function indentedJoin(xs, indent) {
      if (xs.length === 0) { return ''; }
      var lineJoiner = '\n' + indent.prev + indent.base;
      return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
  }

  function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
          xs.length = obj.length;
          for (var i = 0; i < obj.length; i++) {
              xs[i] = has$1(obj, i) ? inspect(obj[i], obj) : '';
          }
      }
      var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
          symMap = {};
          for (var k = 0; k < syms.length; k++) {
              symMap['$' + syms[k]] = syms[k];
          }
      }

      for (var key in obj) { // eslint-disable-line no-restricted-syntax
          if (!has$1(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
          if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
          if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
              // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
              continue; // eslint-disable-line no-restricted-syntax, no-continue
          } else if ((/[^\w$]/).test(key)) {
              xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
          } else {
              xs.push(key + ': ' + inspect(obj[key], obj));
          }
      }
      if (typeof gOPS === 'function') {
          for (var j = 0; j < syms.length; j++) {
              if (isEnumerable$1.call(obj, syms[j])) {
                  xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
              }
          }
      }
      return xs;
  }

  // https://ecma-international.org/ecma-262/6.0/#sec-ispropertykey

  var IsPropertyKey = function IsPropertyKey(argument) {
  	return typeof argument === 'string' || typeof argument === 'symbol';
  };

  // https://262.ecma-international.org/5.1/#sec-8

  var Type = function Type(x) {
  	if (x === null) {
  		return 'Null';
  	}
  	if (typeof x === 'undefined') {
  		return 'Undefined';
  	}
  	if (typeof x === 'function' || typeof x === 'object') {
  		return 'Object';
  	}
  	if (typeof x === 'number') {
  		return 'Number';
  	}
  	if (typeof x === 'boolean') {
  		return 'Boolean';
  	}
  	if (typeof x === 'string') {
  		return 'String';
  	}
  };

  // https://262.ecma-international.org/11.0/#sec-ecmascript-data-types-and-values

  var Type$1 = function Type$1(x) {
  	if (typeof x === 'symbol') {
  		return 'Symbol';
  	}
  	if (typeof x === 'bigint') {
  		return 'BigInt';
  	}
  	return Type(x);
  };

  var $TypeError$3 = getIntrinsic('%TypeError%');






  /**
   * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p
   * 1. Assert: Type(O) is Object.
   * 2. Assert: IsPropertyKey(P) is true.
   * 3. Return O.[[Get]](P, O).
   */

  var Get = function Get(O, P) {
  	// 7.3.1.1
  	if (Type$1(O) !== 'Object') {
  		throw new $TypeError$3('Assertion failed: Type(O) is not Object');
  	}
  	// 7.3.1.2
  	if (!IsPropertyKey(P)) {
  		throw new $TypeError$3('Assertion failed: IsPropertyKey(P) is not true, got ' + objectInspect(P));
  	}
  	// 7.3.1.3
  	return O[P];
  };

  var $TypeError$4 = getIntrinsic('%TypeError%');




  // https://ecma-international.org/ecma-262/6.0/#sec-hasproperty

  var HasProperty = function HasProperty(O, P) {
  	if (Type$1(O) !== 'Object') {
  		throw new $TypeError$4('Assertion failed: `O` must be an Object');
  	}
  	if (!IsPropertyKey(P)) {
  		throw new $TypeError$4('Assertion failed: `P` must be a Property Key');
  	}
  	return P in O;
  };

  var fnToStr = Function.prototype.toString;
  var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
  	try {
  		badArrayLike = Object.defineProperty({}, 'length', {
  			get: function () {
  				throw isCallableMarker;
  			}
  		});
  		isCallableMarker = {};
  		// eslint-disable-next-line no-throw-literal
  		reflectApply(function () { throw 42; }, null, badArrayLike);
  	} catch (_) {
  		if (_ !== isCallableMarker) {
  			reflectApply = null;
  		}
  	}
  } else {
  	reflectApply = null;
  }

  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value) {
  	try {
  		var fnStr = fnToStr.call(value);
  		return constructorRegex.test(fnStr);
  	} catch (e) {
  		return false; // not a function
  	}
  };

  var tryFunctionObject = function tryFunctionToStr(value) {
  	try {
  		if (isES6ClassFn(value)) { return false; }
  		fnToStr.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };
  var toStr$6 = Object.prototype.toString;
  var fnClass = '[object Function]';
  var genClass = '[object GeneratorFunction]';
  var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
  /* globals document: false */
  var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

  var isCallable = reflectApply
  	? function isCallable(value) {
  		if (value === documentDotAll) { return true; }
  		if (!value) { return false; }
  		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
  		if (typeof value === 'function' && !value.prototype) { return true; }
  		try {
  			reflectApply(value, null, badArrayLike);
  		} catch (e) {
  			if (e !== isCallableMarker) { return false; }
  		}
  		return !isES6ClassFn(value);
  	}
  	: function isCallable(value) {
  		if (value === documentDotAll) { return true; }
  		if (!value) { return false; }
  		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
  		if (typeof value === 'function' && !value.prototype) { return true; }
  		if (hasToStringTag) { return tryFunctionObject(value); }
  		if (isES6ClassFn(value)) { return false; }
  		var strClass = toStr$6.call(value);
  		return strClass === fnClass || strClass === genClass;
  	};

  // http://262.ecma-international.org/5.1/#sec-9.11

  var IsCallable = isCallable;

  var $Math = getIntrinsic('%Math%');
  var $Number = getIntrinsic('%Number%');

  var maxSafeInteger = $Number.MAX_SAFE_INTEGER || $Math.pow(2, 53) - 1;

  var $abs = getIntrinsic('%Math.abs%');

  // http://262.ecma-international.org/5.1/#sec-5.2

  var abs = function abs(x) {
  	return $abs(x);
  };

  // var modulo = require('./modulo');
  var $floor = Math.floor;

  // http://262.ecma-international.org/5.1/#sec-5.2

  var floor = function floor(x) {
  	// return x - modulo(x, 1);
  	return $floor(x);
  };

  var isPrimitive = function isPrimitive(value) {
  	return value === null || (typeof value !== 'function' && typeof value !== 'object');
  };

  var toStr$7 = Object.prototype.toString;





  // http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
  var ES5internalSlots = {
  	'[[DefaultValue]]': function (O) {
  		var actualHint;
  		if (arguments.length > 1) {
  			actualHint = arguments[1];
  		} else {
  			actualHint = toStr$7.call(O) === '[object Date]' ? String : Number;
  		}

  		if (actualHint === String || actualHint === Number) {
  			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
  			var value, i;
  			for (i = 0; i < methods.length; ++i) {
  				if (isCallable(O[methods[i]])) {
  					value = O[methods[i]]();
  					if (isPrimitive(value)) {
  						return value;
  					}
  				}
  			}
  			throw new TypeError('No default value');
  		}
  		throw new TypeError('invalid [[DefaultValue]] hint supplied');
  	}
  };

  // http://ecma-international.org/ecma-262/5.1/#sec-9.1
  var es5 = function ToPrimitive(input) {
  	if (isPrimitive(input)) {
  		return input;
  	}
  	if (arguments.length > 1) {
  		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
  	}
  	return ES5internalSlots['[[DefaultValue]]'](input);
  };

  // http://262.ecma-international.org/5.1/#sec-9.1

  var ToPrimitive = es5;

  // http://262.ecma-international.org/5.1/#sec-9.3

  var ToNumber = function ToNumber(value) {
  	var prim = ToPrimitive(value, Number);
  	if (typeof prim !== 'string') {
  		return +prim; // eslint-disable-line no-implicit-coercion
  	}

  	// eslint-disable-next-line no-control-regex
  	var trimmed = prim.replace(/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g, '');
  	if ((/^0[ob]|^[+-]0x/).test(trimmed)) {
  		return NaN;
  	}

  	return +trimmed; // eslint-disable-line no-implicit-coercion
  };

  var _isNaN = Number.isNaN || function isNaN(a) {
  	return a !== a;
  };

  var $isNaN = Number.isNaN || function (a) { return a !== a; };

  var _isFinite = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

  var sign = function sign(number) {
  	return number >= 0 ? 1 : -1;
  };

  // http://262.ecma-international.org/5.1/#sec-9.4

  var ToInteger = function ToInteger(value) {
  	var number = ToNumber(value);
  	if (_isNaN(number)) { return 0; }
  	if (number === 0 || !_isFinite(number)) { return number; }
  	return sign(number) * floor(abs(number));
  };

  var $test = getIntrinsic('RegExp.prototype.test');



  var regexTester = function regexTester(regex) {
  	return callBind($test, regex);
  };

  var isPrimitive$1 = function isPrimitive(value) {
  	return value === null || (typeof value !== 'function' && typeof value !== 'object');
  };

  var shams$1 = function hasToStringTagShams() {
  	return shams() && !!Symbol.toStringTag;
  };

  var getDay = Date.prototype.getDay;
  var tryDateObject = function tryDateGetDayCall(value) {
  	try {
  		getDay.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };

  var toStr$8 = Object.prototype.toString;
  var dateClass = '[object Date]';
  var hasToStringTag$1 = shams$1();

  var isDateObject = function isDateObject(value) {
  	if (typeof value !== 'object' || value === null) {
  		return false;
  	}
  	return hasToStringTag$1 ? tryDateObject(value) : toStr$8.call(value) === dateClass;
  };

  var isSymbol$1 = createCommonjsModule(function (module) {

  var toStr = Object.prototype.toString;
  var hasSymbols = hasSymbols$1();

  if (hasSymbols) {
  	var symToStr = Symbol.prototype.toString;
  	var symStringRegex = /^Symbol\(.*\)$/;
  	var isSymbolObject = function isRealSymbolObject(value) {
  		if (typeof value.valueOf() !== 'symbol') {
  			return false;
  		}
  		return symStringRegex.test(symToStr.call(value));
  	};

  	module.exports = function isSymbol(value) {
  		if (typeof value === 'symbol') {
  			return true;
  		}
  		if (toStr.call(value) !== '[object Symbol]') {
  			return false;
  		}
  		try {
  			return isSymbolObject(value);
  		} catch (e) {
  			return false;
  		}
  	};
  } else {

  	module.exports = function isSymbol(value) {
  		// this environment does not support Symbols.
  		return false ;
  	};
  }
  });

  var hasSymbols$3 = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';






  var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
  	if (typeof O === 'undefined' || O === null) {
  		throw new TypeError('Cannot call method on ' + O);
  	}
  	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
  		throw new TypeError('hint must be "string" or "number"');
  	}
  	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
  	var method, result, i;
  	for (i = 0; i < methodNames.length; ++i) {
  		method = O[methodNames[i]];
  		if (isCallable(method)) {
  			result = method.call(O);
  			if (isPrimitive(result)) {
  				return result;
  			}
  		}
  	}
  	throw new TypeError('No default value');
  };

  var GetMethod = function GetMethod(O, P) {
  	var func = O[P];
  	if (func !== null && typeof func !== 'undefined') {
  		if (!isCallable(func)) {
  			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
  		}
  		return func;
  	}
  	return void 0;
  };

  // http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
  var es2015 = function ToPrimitive(input) {
  	if (isPrimitive(input)) {
  		return input;
  	}
  	var hint = 'default';
  	if (arguments.length > 1) {
  		if (arguments[1] === String) {
  			hint = 'string';
  		} else if (arguments[1] === Number) {
  			hint = 'number';
  		}
  	}

  	var exoticToPrim;
  	if (hasSymbols$3) {
  		if (Symbol.toPrimitive) {
  			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
  		} else if (isSymbol$1(input)) {
  			exoticToPrim = Symbol.prototype.valueOf;
  		}
  	}
  	if (typeof exoticToPrim !== 'undefined') {
  		var result = exoticToPrim.call(input, hint);
  		if (isPrimitive(result)) {
  			return result;
  		}
  		throw new TypeError('unable to convert exotic object to primitive');
  	}
  	if (hint === 'default' && (isDateObject(input) || isSymbol$1(input))) {
  		hint = 'string';
  	}
  	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
  };

  // https://ecma-international.org/ecma-262/6.0/#sec-toprimitive

  var ToPrimitive$1 = function ToPrimitive(input) {
  	if (arguments.length > 1) {
  		return es2015(input, arguments[1]);
  	}
  	return es2015(input);
  };

  var $TypeError$5 = getIntrinsic('%TypeError%');
  var $Number$1 = getIntrinsic('%Number%');
  var $RegExp = getIntrinsic('%RegExp%');
  var $parseInteger = getIntrinsic('%parseInt%');





  var $strSlice$1 = callBound('String.prototype.slice');
  var isBinary = regexTester(/^0b[01]+$/i);
  var isOctal = regexTester(/^0o[0-7]+$/i);
  var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
  var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
  var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
  var hasNonWS = regexTester(nonWSregex);

  // whitespace from: https://es5.github.io/#x15.5.4.20
  // implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
  var ws = [
  	'\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
  	'\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
  	'\u2029\uFEFF'
  ].join('');
  var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
  var $replace$1 = callBound('String.prototype.replace');
  var $trim = function (value) {
  	return $replace$1(value, trimRegex, '');
  };



  // https://ecma-international.org/ecma-262/6.0/#sec-tonumber

  var ToNumber$1 = function ToNumber(argument) {
  	var value = isPrimitive$1(argument) ? argument : ToPrimitive$1(argument, $Number$1);
  	if (typeof value === 'symbol') {
  		throw new $TypeError$5('Cannot convert a Symbol value to a number');
  	}
  	if (typeof value === 'bigint') {
  		throw new $TypeError$5('Conversion from \'BigInt\' to \'number\' is not allowed.');
  	}
  	if (typeof value === 'string') {
  		if (isBinary(value)) {
  			return ToNumber($parseInteger($strSlice$1(value, 2), 2));
  		} else if (isOctal(value)) {
  			return ToNumber($parseInteger($strSlice$1(value, 2), 8));
  		} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
  			return NaN;
  		}
  		var trimmed = $trim(value);
  		if (trimmed !== value) {
  			return ToNumber(trimmed);
  		}

  	}
  	return $Number$1(value);
  };

  // https://www.ecma-international.org/ecma-262/11.0/#sec-tointeger

  var ToIntegerOrInfinity = function ToInteger$1(value) {
  	var number = ToNumber$1(value);
  	if (number !== 0) {
  		number = ToInteger(number);
  	}
  	return number === 0 ? 0 : number;
  };

  var ToLength = function ToLength(argument) {
  	var len = ToIntegerOrInfinity(argument);
  	if (len <= 0) { return 0; } // includes converting -0 to +0
  	if (len > maxSafeInteger) { return maxSafeInteger; }
  	return len;
  };

  var $TypeError$6 = getIntrinsic('%TypeError%');





  // https://262.ecma-international.org/11.0/#sec-lengthofarraylike

  var LengthOfArrayLike = function LengthOfArrayLike(obj) {
  	if (Type$1(obj) !== 'Object') {
  		throw new $TypeError$6('Assertion failed: `obj` must be an Object');
  	}
  	return ToLength(Get(obj, 'length'));
  };

  var $Object = getIntrinsic('%Object%');



  // https://ecma-international.org/ecma-262/6.0/#sec-toobject

  var ToObject = function ToObject(value) {
  	RequireObjectCoercible(value);
  	return $Object(value);
  };

  var $String = getIntrinsic('%String%');
  var $TypeError$7 = getIntrinsic('%TypeError%');

  // https://ecma-international.org/ecma-262/6.0/#sec-tostring

  var ToString = function ToString(argument) {
  	if (typeof argument === 'symbol') {
  		throw new $TypeError$7('Cannot convert a Symbol value to a string');
  	}
  	return $String(argument);
  };

  var strValue = String.prototype.valueOf;
  var tryStringObject = function tryStringObject(value) {
  	try {
  		strValue.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };
  var toStr$9 = Object.prototype.toString;
  var strClass = '[object String]';
  var hasToStringTag$2 = shams$1();

  var isString$1 = function isString(value) {
  	if (typeof value === 'string') {
  		return true;
  	}
  	if (typeof value !== 'object') {
  		return false;
  	}
  	return hasToStringTag$2 ? tryStringObject(value) : toStr$9.call(value) === strClass;
  };

  var $TypeError$8 = getIntrinsic('%TypeError%');











  var $split = callBound('String.prototype.split');

  // Check failure of by-index access of string characters (IE < 9) and failure of `0 in boxedString` (Rhino)
  var boxedString = Object('a');
  var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

  var implementation$2 = function forEach(callbackfn) {
  	var thisO = ToObject(this);
  	var O = splitString && isString$1(this) ? $split(this, '') : thisO;

  	var len = LengthOfArrayLike(O);

  	if (!IsCallable(callbackfn)) {
  		throw new $TypeError$8('Array.prototype.forEach callback must be a function');
  	}

  	var thisArg;
  	if (arguments.length > 1) {
  		thisArg = arguments[1];
  	}

  	var k = 0;
  	while (k < len) {
  		var Pk = ToString(k);
  		var kPresent = HasProperty(O, Pk);
  		if (kPresent) {
  			var kValue = Get(O, Pk);
  			Call(callbackfn, thisArg, [kValue, k, O]);
  		}
  		k += 1;
  	}

  	return void undefined;
  };

  var esArrayMethodBoxesProperly = function properlyBoxed(method) {
  	// Check node 0.6.21 bug where third parameter is not boxed
  	var properlyBoxesNonStrict = true;
  	var properlyBoxesStrict = true;
  	var threwException = false;
  	if (typeof method === 'function') {
  		try {
  			// eslint-disable-next-line max-params
  			method.call('f', function (_, __, O) {
  				if (typeof O !== 'object') {
  					properlyBoxesNonStrict = false;
  				}
  			});

  			method.call(
  				[null],
  				function () {
  					'use strict';

  					properlyBoxesStrict = typeof this === 'string'; // eslint-disable-line no-invalid-this
  				},
  				'x'
  			);
  		} catch (e) {
  			threwException = true;
  		}
  		return !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
  	}
  	return false;
  };

  var polyfill = function getPolyfill() {
  	var method = Array.prototype.forEach;
  	return esArrayMethodBoxesProperly(method) ? method : implementation$2;
  };

  var shim = function shimForEach() {
  	var polyfill$1 = polyfill();
  	defineProperties_1(
  		Array.prototype,
  		{ forEach: polyfill$1 },
  		{ forEach: function () { return Array.prototype.forEach !== polyfill$1; } }
  	);
  	return polyfill$1;
  };

  var polyfill$1 = polyfill();


  var $slice = callBound('Array.prototype.slice');

  var bound = callBind.apply(polyfill$1);
  // eslint-disable-next-line no-unused-vars
  var boundCoercible = function forEach(array, callbackfn) {
  	RequireObjectCoercible(array);
  	return bound(array, $slice(arguments, 1));
  };

  defineProperties_1(boundCoercible, {
  	getPolyfill: polyfill,
  	implementation: implementation$2,
  	shim: shim
  });

  var array_prototype_foreach = boundCoercible;

  var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');
  var $push = callBound('Array.prototype.push');

  var implementation$3 = function entries(O) {
  	var obj = RequireObjectCoercible(O);
  	var entrys = [];
  	for (var key in obj) {
  		if ($isEnumerable(obj, key)) { // checks own-ness as well
  			$push(entrys, [key, obj[key]]);
  		}
  	}
  	return entrys;
  };

  var polyfill$2 = function getPolyfill() {
  	return typeof Object.entries === 'function' ? Object.entries : implementation$3;
  };

  var shim$1 = function shimEntries() {
  	var polyfill = polyfill$2();
  	defineProperties_1(Object, { entries: polyfill }, {
  		entries: function testEntries() {
  			return Object.entries !== polyfill;
  		}
  	});
  	return polyfill;
  };

  var polyfill$3 = callBind(polyfill$2(), Object);

  defineProperties_1(polyfill$3, {
  	getPolyfill: polyfill$2,
  	implementation: implementation$3,
  	shim: shim$1
  });

  var object_entries = polyfill$3;

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var warning$1 = function() {};

  {
    var printWarning = function printWarning(format, args) {
      var len = arguments.length;
      args = new Array(len > 1 ? len - 1 : 0);
      for (var key = 1; key < len; key++) {
        args[key - 1] = arguments[key];
      }
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning$1 = function(condition, format, args) {
      var len = arguments.length;
      args = new Array(len > 2 ? len - 2 : 0);
      for (var key = 2; key < len; key++) {
        args[key - 2] = arguments[key];
      }
      if (format === undefined) {
        throw new Error(
            '`warning(condition, format, ...args)` requires a warning ' +
            'message argument'
        );
      }
      if (!condition) {
        printWarning.apply(null, [format].concat(args));
      }
    };
  }

  var warning_1 = warning$1;

  var $replace$2 = callBound('String.prototype.replace');

  /* eslint-disable no-control-regex */
  var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
  var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;
  /* eslint-enable no-control-regex */

  var implementation$4 = function trim() {
  	var S = ToString(RequireObjectCoercible(this));
  	return $replace$2($replace$2(S, leftWhitespace, ''), rightWhitespace, '');
  };

  var zeroWidthSpace = '\u200b';

  var polyfill$4 = function getPolyfill() {
  	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
  		return String.prototype.trim;
  	}
  	return implementation$4;
  };

  var shim$2 = function shimStringTrim() {
  	var polyfill = polyfill$4();
  	defineProperties_1(String.prototype, { trim: polyfill }, {
  		trim: function testTrim() {
  			return String.prototype.trim !== polyfill;
  		}
  	});
  	return polyfill;
  };

  var boundTrim = callBind(polyfill$4());

  defineProperties_1(boundTrim, {
  	getPolyfill: polyfill$4,
  	implementation: implementation$4,
  	shim: shim$2
  });

  var string_prototype_trim = boundTrim;

  var warn = function warn(message) {
    warning_1(false, message);
  };

  var replace = String.prototype.replace;
  var split = String.prototype.split;

  // #### Pluralization methods
  // The string that separates the different phrase possibilities.
  var delimiter = '||||';

  var russianPluralGroups = function (n) {
    var lastTwo = n % 100;
    var end = lastTwo % 10;
    if (lastTwo !== 11 && end === 1) {
      return 0;
    }
    if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {
      return 1;
    }
    return 2;
  };

  var defaultPluralRules = {
    // Mapping from pluralization group plural logic.
    pluralTypes: {
      arabic: function (n) {
        // http://www.arabeyes.org/Plural_Forms
        if (n < 3) { return n; }
        var lastTwo = n % 100;
        if (lastTwo >= 3 && lastTwo <= 10) return 3;
        return lastTwo >= 11 ? 4 : 5;
      },
      bosnian_serbian: russianPluralGroups,
      chinese: function () { return 0; },
      croatian: russianPluralGroups,
      french: function (n) { return n >= 2 ? 1 : 0; },
      german: function (n) { return n !== 1 ? 1 : 0; },
      russian: russianPluralGroups,
      lithuanian: function (n) {
        if (n % 10 === 1 && n % 100 !== 11) { return 0; }
        return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;
      },
      czech: function (n) {
        if (n === 1) { return 0; }
        return (n >= 2 && n <= 4) ? 1 : 2;
      },
      polish: function (n) {
        if (n === 1) { return 0; }
        var end = n % 10;
        return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
      },
      icelandic: function (n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; },
      slovenian: function (n) {
        var lastTwo = n % 100;
        if (lastTwo === 1) {
          return 0;
        }
        if (lastTwo === 2) {
          return 1;
        }
        if (lastTwo === 3 || lastTwo === 4) {
          return 2;
        }
        return 3;
      }
    },

    // Mapping from pluralization group to individual language codes/locales.
    // Will look up based on exact match, if not found and it's a locale will parse the locale
    // for language code, and if that does not exist will default to 'en'
    pluralTypeToLanguages: {
      arabic: ['ar'],
      bosnian_serbian: ['bs-Latn-BA', 'bs-Cyrl-BA', 'srl-RS', 'sr-RS'],
      chinese: ['id', 'id-ID', 'ja', 'ko', 'ko-KR', 'lo', 'ms', 'th', 'th-TH', 'zh'],
      croatian: ['hr', 'hr-HR'],
      german: ['fa', 'da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hi-IN', 'hu', 'hu-HU', 'it', 'nl', 'no', 'pt', 'sv', 'tr'],
      french: ['fr', 'tl', 'pt-br'],
      russian: ['ru', 'ru-RU'],
      lithuanian: ['lt'],
      czech: ['cs', 'cs-CZ', 'sk'],
      polish: ['pl'],
      icelandic: ['is'],
      slovenian: ['sl-SL']
    }
  };

  function langToTypeMap(mapping) {
    var ret = {};
    array_prototype_foreach(object_entries(mapping), function (entry) {
      var type = entry[0];
      var langs = entry[1];
      array_prototype_foreach(langs, function (lang) {
        ret[lang] = type;
      });
    });
    return ret;
  }

  function pluralTypeName(pluralRules, locale) {
    var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);
    return langToPluralType[locale]
      || langToPluralType[split.call(locale, /-/, 1)[0]]
      || langToPluralType.en;
  }

  function pluralTypeIndex(pluralRules, pluralType, count) {
    return pluralRules.pluralTypes[pluralType](count);
  }

  function createMemoizedPluralTypeNameSelector() {
    var localePluralTypeStorage = {};

    return function (pluralRules, locale) {
      var pluralType = localePluralTypeStorage[locale];

      if (pluralType && !pluralRules.pluralTypes[pluralType]) {
        pluralType = null;
        localePluralTypeStorage[locale] = pluralType;
      }

      if (!pluralType) {
        pluralType = pluralTypeName(pluralRules, locale);

        if (pluralType) {
          localePluralTypeStorage[locale] = pluralType;
        }
      }

      return pluralType;
    };
  }

  function escape(token) {
    return token.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  function constructTokenRegex(opts) {
    var prefix = (opts && opts.prefix) || '%{';
    var suffix = (opts && opts.suffix) || '}';

    if (prefix === delimiter || suffix === delimiter) {
      throw new RangeError('"' + delimiter + '" token is reserved for pluralization');
    }

    return new RegExp(escape(prefix) + '(.*?)' + escape(suffix), 'g');
  }

  var memoizedPluralTypeName = createMemoizedPluralTypeNameSelector();

  var defaultTokenRegex = /%\{(.*?)\}/g;

  // ### transformPhrase(phrase, substitutions, locale)
  //
  // Takes a phrase string and transforms it by choosing the correct
  // plural form and interpolating it.
  //
  //     transformPhrase('Hello, %{name}!', {name: 'Spike'});
  //     // "Hello, Spike!"
  //
  // The correct plural form is selected if substitutions.smart_count
  // is set. You can pass in a number instead of an Object as `substitutions`
  // as a shortcut for `smart_count`.
  //
  //     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');
  //     // "1 new message"
  //
  //     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');
  //     // "2 new messages"
  //
  //     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');
  //     // "5 new messages"
  //
  // You should pass in a third argument, the locale, to specify the correct plural type.
  // It defaults to `'en'` with 2 plural forms.
  function transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules) {
    if (typeof phrase !== 'string') {
      throw new TypeError('Polyglot.transformPhrase expects argument #1 to be string');
    }

    if (substitutions == null) {
      return phrase;
    }

    var result = phrase;
    var interpolationRegex = tokenRegex || defaultTokenRegex;

    // allow number as a pluralization shortcut
    var options = typeof substitutions === 'number' ? { smart_count: substitutions } : substitutions;

    // Select plural form: based on a phrase text that contains `n`
    // plural forms separated by `delimiter`, a `locale`, and a `substitutions.smart_count`,
    // choose the correct plural form. This is only done if `count` is set.
    if (options.smart_count != null && phrase) {
      var pluralRulesOrDefault = pluralRules || defaultPluralRules;
      var texts = split.call(phrase, delimiter);
      var bestLocale = locale || 'en';
      var pluralType = memoizedPluralTypeName(pluralRulesOrDefault, bestLocale);
      var pluralTypeWithCount = pluralTypeIndex(
        pluralRulesOrDefault,
        pluralType,
        options.smart_count
      );

      result = string_prototype_trim(texts[pluralTypeWithCount] || texts[0]);
    }

    // Interpolate: Creates a `RegExp` object for each interpolation placeholder.
    result = replace.call(result, interpolationRegex, function (expression, argument) {
      if (!src(options, argument) || options[argument] == null) { return expression; }
      return options[argument];
    });

    return result;
  }

  // ### Polyglot class constructor
  function Polyglot(options) {
    var opts = options || {};
    this.phrases = {};
    this.extend(opts.phrases || {});
    this.currentLocale = opts.locale || 'en';
    var allowMissing = opts.allowMissing ? transformPhrase : null;
    this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;
    this.warn = opts.warn || warn;
    this.tokenRegex = constructTokenRegex(opts.interpolation);
    this.pluralRules = opts.pluralRules || defaultPluralRules;
  }

  // ### polyglot.locale([locale])
  //
  // Get or set locale. Internally, Polyglot only uses locale for pluralization.
  Polyglot.prototype.locale = function (newLocale) {
    if (newLocale) this.currentLocale = newLocale;
    return this.currentLocale;
  };

  // ### polyglot.extend(phrases)
  //
  // Use `extend` to tell Polyglot how to translate a given key.
  //
  //     polyglot.extend({
  //       "hello": "Hello",
  //       "hello_name": "Hello, %{name}"
  //     });
  //
  // The key can be any string.  Feel free to call `extend` multiple times;
  // it will override any phrases with the same key, but leave existing phrases
  // untouched.
  //
  // It is also possible to pass nested phrase objects, which get flattened
  // into an object with the nested keys concatenated using dot notation.
  //
  //     polyglot.extend({
  //       "nav": {
  //         "hello": "Hello",
  //         "hello_name": "Hello, %{name}",
  //         "sidebar": {
  //           "welcome": "Welcome"
  //         }
  //       }
  //     });
  //
  //     console.log(polyglot.phrases);
  //     // {
  //     //   'nav.hello': 'Hello',
  //     //   'nav.hello_name': 'Hello, %{name}',
  //     //   'nav.sidebar.welcome': 'Welcome'
  //     // }
  //
  // `extend` accepts an optional second argument, `prefix`, which can be used
  // to prefix every key in the phrases object with some string, using dot
  // notation.
  //
  //     polyglot.extend({
  //       "hello": "Hello",
  //       "hello_name": "Hello, %{name}"
  //     }, "nav");
  //
  //     console.log(polyglot.phrases);
  //     // {
  //     //   'nav.hello': 'Hello',
  //     //   'nav.hello_name': 'Hello, %{name}'
  //     // }
  //
  // This feature is used internally to support nested phrase objects.
  Polyglot.prototype.extend = function (morePhrases, prefix) {
    array_prototype_foreach(object_entries(morePhrases || {}), function (entry) {
      var key = entry[0];
      var phrase = entry[1];
      var prefixedKey = prefix ? prefix + '.' + key : key;
      if (typeof phrase === 'object') {
        this.extend(phrase, prefixedKey);
      } else {
        this.phrases[prefixedKey] = phrase;
      }
    }, this);
  };

  // ### polyglot.unset(phrases)
  // Use `unset` to selectively remove keys from a polyglot instance.
  //
  //     polyglot.unset("some_key");
  //     polyglot.unset({
  //       "hello": "Hello",
  //       "hello_name": "Hello, %{name}"
  //     });
  //
  // The unset method can take either a string (for the key), or an object hash with
  // the keys that you would like to unset.
  Polyglot.prototype.unset = function (morePhrases, prefix) {
    if (typeof morePhrases === 'string') {
      delete this.phrases[morePhrases];
    } else {
      array_prototype_foreach(object_entries(morePhrases || {}), function (entry) {
        var key = entry[0];
        var phrase = entry[1];
        var prefixedKey = prefix ? prefix + '.' + key : key;
        if (typeof phrase === 'object') {
          this.unset(phrase, prefixedKey);
        } else {
          delete this.phrases[prefixedKey];
        }
      }, this);
    }
  };

  // ### polyglot.clear()
  //
  // Clears all phrases. Useful for special cases, such as freeing
  // up memory if you have lots of phrases but no longer need to
  // perform any translation. Also used internally by `replace`.
  Polyglot.prototype.clear = function () {
    this.phrases = {};
  };

  // ### polyglot.replace(phrases)
  //
  // Completely replace the existing phrases with a new set of phrases.
  // Normally, just use `extend` to add more phrases, but under certain
  // circumstances, you may want to make sure no old phrases are lying around.
  Polyglot.prototype.replace = function (newPhrases) {
    this.clear();
    this.extend(newPhrases);
  };

  // ### polyglot.t(key, options)
  //
  // The most-used method. Provide a key, and `t` will return the
  // phrase.
  //
  //     polyglot.t("hello");
  //     => "Hello"
  //
  // The phrase value is provided first by a call to `polyglot.extend()` or
  // `polyglot.replace()`.
  //
  // Pass in an object as the second argument to perform interpolation.
  //
  //     polyglot.t("hello_name", {name: "Spike"});
  //     => "Hello, Spike"
  //
  // If you like, you can provide a default value in case the phrase is missing.
  // Use the special option key "_" to specify a default.
  //
  //     polyglot.t("i_like_to_write_in_language", {
  //       _: "I like to write in %{language}.",
  //       language: "JavaScript"
  //     });
  //     => "I like to write in JavaScript."
  //
  Polyglot.prototype.t = function (key, options) {
    var phrase, result;
    var opts = options == null ? {} : options;
    if (typeof this.phrases[key] === 'string') {
      phrase = this.phrases[key];
    } else if (typeof opts._ === 'string') {
      phrase = opts._;
    } else if (this.onMissingKey) {
      var onMissingKey = this.onMissingKey;
      result = onMissingKey(key, opts, this.currentLocale, this.tokenRegex, this.pluralRules);
    } else {
      this.warn('Missing translation for key: "' + key + '"');
      result = key;
    }
    if (typeof phrase === 'string') {
      result = transformPhrase(phrase, opts, this.currentLocale, this.tokenRegex, this.pluralRules);
    }
    return result;
  };

  // ### polyglot.has(key)
  //
  // Check if polyglot has a translation for given key
  Polyglot.prototype.has = function (key) {
    return src(this.phrases, key);
  };

  // export transformPhrase
  Polyglot.transformPhrase = function transform(phrase, substitutions, locale) {
    return transformPhrase(phrase, substitutions, locale);
  };

  var nodePolyglot = Polyglot;

  lodash.templateSettings.interpolate = /{([\s\S]+?)}/;
  var translation = /*#__PURE__*/new nodePolyglot();
  var superInterpolation = [];
  var cache = {};
  var R_Match_Super_Interpolcation_raw = /\\{\w+\\}/g;

  function escapeStringRegexp(string) {
    if (typeof string !== 'string') {
      throw new TypeError('Expected a string');
    }

    return string.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
  }

  function setTranslation(strings) {
    translation = new nodePolyglot();
    translation.extend(strings);
    superInterpolation = [];
    cache = {};
    Object.keys(strings).forEach(function (key) {
      var r = /{(.+?)}/g;
      var match = r.exec(key);
      var keys = [];

      while (match) {
        keys.push(match[1]);
        match = r.exec(key);
      }

      if (keys.length > 0) {
        var reg = escapeStringRegexp(key).replace(R_Match_Super_Interpolcation_raw, '(.+?)');
        superInterpolation.push({
          match: new RegExp("^" + reg + "$"),
          interpolcation: function interpolcation(template, templateKeys, keys) {
            var ctx = {};
            templateKeys.forEach(function (key, index) {
              ctx[key] = translate$1(keys[index]);
            });
            return template.replace(/{(.+?)}/g, function (_, key) {
              return typeof ctx[key] === 'undefined' ? key : ctx[key];
            });
          },
          template: strings[key],
          keys: keys
        });
      }
    });
    superInterpolation.sort(function (a, b) {
      return b.template.length - a.template.length;
    });
  }
  function translate$1(text, options) {
    if (cache[text]) {
      return cache[text];
    }

    if (!isNaN(Number(text))) {
      return text;
    }

    if (config$1.items[text]) {
      text = config$1.items[text].name;
    } else if (config$1.Outside.INCOME[text]) {
      text = config$1.Outside.INCOME[text].name;
    } else {
      for (var i = 0, len = superInterpolation.length; i < len; i++) {
        var tester = superInterpolation[i];
        var match = tester.match.exec(text);
        tester.match.lastIndex = 0;

        if (match) {
          var _res = tester.interpolcation(tester.template, tester.keys, match.slice(1));

          cache[text] = _res;
          return _res;
        }
      }
    }

    var res = translation.t(text, options);
    cache[text] = res;
    return res;
  }

  exports.Engine = Engine;
  exports.Perks = Perks;
  exports.config = config$1;
  exports.incomes = incomes;
  exports.setTranslation = setTranslation;
  exports.translate = translate$1;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=adarkroom-core.umd.development.js.map
